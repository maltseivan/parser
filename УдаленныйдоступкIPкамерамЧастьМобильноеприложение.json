[
   "Удаленный доступ к IP камерам. Часть 2. Мобильное приложение",
   "\nВ предыдущей статье я рассказывал о простом сервере для работы с камерами видеонаблюдения, но для оперативного просмотра RTSP потоков использовал мобильное приложение VLC, которое меня не вполне устраивало по нескольким причинам. Под катом вы найдете описание и листинги простого мобильного приложения под андроид, написанного специально для охранных камер. Исходники приложения можно взять на github. Для тех, кто не хочет собирать apk самостоятельно, вот ссылка на готовый файл.\nВозможно, нам всем сейчас немного не до камер, но Хабр ведь не для политики, верно?\nНа самом деле доставить контент пользователю можно было бы разными способами, например, через веб приложение. Но, к сожалению, почти все современные браузеры не поддерживают кодек H.265, который мне был очень нужен, поэтому этот путь пришлось отбросить сразу.\nКроме того, в моей схеме подключения участвуют два сервера – локальный, с «серым» IP адесом, и удаленный, с «белым» IP, который предоставляет доступ к камерам через интернет по протоколу TCP. Поэтому одно из главных требований к приложению – возможность явного переключения TCP/UDP. Такой роскоши в VLC нет.\nНемного порывшись в плей сторе и перепробовав некоторое количество существующих приложений разного толка, активно впихивающих мне рекламу, выклянчивающих деньги за платный контент, требующих доступ к всем мыслимым и немыслимым активам телефона и бодро сливающие мои данные в недра интернета, я понял, что для решения такой простой задачи все-таки придется погрузится в пучины мобильной разработки.\nЛирическое отступление о выборе платформы\nФреймворки для разработки кроссплатформенных приложений также пришлось исключить, потому что мне нужно обрабатывать жесты для масштабирования и позиционирования изображения, и сделать это максимально плавно.\nКстати, JetBrains предлагает вроде бы интересное мультиплатформенное решение – Kotlin Multiplatform Mobile. Надо попробовать! Устанавливаю плагин KMM в Android Studio, создаю проект по единственному предложенному шаблону. Структура проекта не нравится. Ладно, может быть можно вынести в shared хотя бы строковые ресурсы? Нет, без танцев с бубном нельзя. А как собрать приложение под iOS? Да никак, для этого нужна iOS. А если учесть, что в стране, где я живу, будущее продукции Apple несколько туманно, смысл теряется окончательно. Решено: буду честно писать под андроид на его официальном языке — котлине.\nРеализация\nПриложение должно быть максимально простым, я (пока) не буду использовать фрагменты и граф навигации. У меня будет всего три экрана: список камер, редактор настроек камеры и экран видео:\n\nДля работы с потоками я буду использовать библиотеку libvlc, настройки сохранять в приватном каталоге во внутреннем хранилище устройства в формате json с помощью библиотеки gson. Для взаимодействия с элементами представления мне нравится view binding, который включается опцией viewBinding true в файле build.gradle уровня приложения:\n\nbuild.gradle\nplugins {\n    id 'com.android.application'\n    id 'org.jetbrains.kotlin.android'\n}\n\nandroid {\n    compileSdk 32\n\n    defaultConfig {\n        applicationId \"com.vladpen.cams\"\n        minSdk 23\n        targetSdk 32\n        versionCode 1\n        versionName \"1.0\"\n\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n    }\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n    kotlinOptions {\n        jvmTarget = '1.8'\n    }\n    buildFeatures {\n        viewBinding true\n    }\n    packagingOptions {\n        jniLibs {\n            useLegacyPackaging = true\n        }\n    }\n}\n\ndependencies {\n\n    implementation 'androidx.core:core-ktx:1.7.0'\n    implementation 'androidx.appcompat:appcompat:1.4.1'\n    implementation 'com.google.android.material:material:1.5.0'\n\n    implementation 'com.google.code.gson:gson:2.8.6'\n    implementation 'org.videolan.android:libvlc-all:3.4.9'\n\n    testImplementation 'junit:junit:4.13.2'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.3'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'\n}\n\nВ манифесте, помимо трех activity, нужно не забыть включить разрешение на доступ к сети android.permission.INTERNET:\n\nAndroidManifest.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.vladpen.cams\">\n\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\">\n\n        <activity\n            android:name=\".MainActivity\"\n            android:exported=\"true\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n        <activity\n            android:name=\".EditActivity\"\n            android:exported=\"false\" />\n        <activity\n            android:name=\".VideoActivity\"\n            android:configChanges=\"orientation|screenSize|screenLayout|keyboardHidden\"\n            android:exported=\"false\" />\n\n    </application>\n\n</manifest>\n\nГлавный экран приложения (MainActivity) содержит список камер recyclerView и ссылки на редактирование/добавление камер:\n\nMainActivity.kt\npackage com.vladpen.cams\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.view.View\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.vladpen.StreamData\nimport com.vladpen.StreamsAdapter\nimport com.vladpen.cams.databinding.ActivityMainBinding\n\nclass MainActivity: AppCompatActivity() {\n    private val binding by lazy { ActivityMainBinding.inflate(layoutInflater) }\n    private val streams by lazy { StreamData.getStreams(this) }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(binding.root)\n        initActivity()\n    }\n\n    private fun initActivity() {\n        binding.recyclerView.layoutManager = LinearLayoutManager(this)\n        binding.recyclerView.adapter = StreamsAdapter(streams)\n\n        binding.toolbar.btnBack.visibility = View.GONE\n        binding.toolbar.tvToolbarLabel.text = getString(R.string.app_name)\n        binding.toolbar.tvToolbarLink.text = getString(R.string.add)\n        binding.toolbar.tvToolbarLink.visibility = View.VISIBLE\n        binding.toolbar.tvToolbarLink.setOnClickListener {\n            editScreen()\n        }\n    }\n\n    private fun editScreen() {\n        val editIntent = Intent(this, EditActivity::class.java)\n        editIntent.putExtra(\"id\", -1)\n        startActivity(editIntent)\n    }\n}\n\n\nactivity_main.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <include android:id=\"@+id/toolbar\" layout=\"@layout/toolbar\" />\n\n    <androidx.recyclerview.widget.RecyclerView\n        android:id=\"@+id/recyclerView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:textColor=\"@color/text\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/toolbar\"\n        tools:listitem=\"@layout/stream_item\" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n\nДля работы recyclerView требуется адаптер:\n\nStreamsAdapter.kt\npackage com.vladpen\n\nimport android.content.Context\nimport android.content.Intent\nimport android.content.Intent.FLAG_ACTIVITY_NEW_TASK\nimport android.view.LayoutInflater\nimport android.view.ViewGroup\nimport androidx.recyclerview.widget.RecyclerView\nimport com.vladpen.cams.VideoActivity\nimport com.vladpen.cams.EditActivity\nimport com.vladpen.cams.databinding.StreamItemBinding\n\nclass StreamsAdapter(private val dataSet: List<StreamDataModel>) :\n    RecyclerView.Adapter<StreamsAdapter.StreamHolder>() {\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): StreamHolder {\n        val binding = StreamItemBinding.inflate(LayoutInflater.from(parent.context), parent, false)\n        return StreamHolder(parent.context, binding)\n    }\n\n    override fun onBindViewHolder(holder: StreamHolder, position: Int) {\n        val row: StreamDataModel = dataSet[position]\n        holder.bind(position, row)\n    }\n\n    override fun getItemCount(): Int = dataSet.size\n\n    inner class StreamHolder(private val context: Context, private val binding: StreamItemBinding) :\n        RecyclerView.ViewHolder(binding.root) {\n        fun bind(position: Int, row: StreamDataModel) {\n            with(binding) {\n                tvStreamName.text = row.name\n                tvStreamName.setOnClickListener {\n                    val intent = Intent(context, VideoActivity::class.java)\n                    navigate(context, intent, position)\n                }\n                btnEdit.setOnClickListener {\n                    val intent = Intent(context, EditActivity::class.java)\n                    navigate(context, intent, position)\n                }\n            }\n        }\n    }\n\n    private fun navigate(context: Context, intent: Intent,  position: Int) {\n        intent.setFlags(FLAG_ACTIVITY_NEW_TASK).putExtra(\"position\", position)\n        context.startActivity(intent)\n    }\n}\n\nи элемент списка:\n\nstream_item.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\">\n\n    <TextView\n        android:id=\"@+id/tvStreamName\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"\"\n        android:textSize=\"20sp\"\n        android:padding=\"16dp\"\n        android:textColor=\"@color/text\"\n        android:background=\"?attr/selectableItemBackground\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n    <ImageButton\n        android:id=\"@+id/btnEdit\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:background=\"@color/background\"\n        android:foreground=\"?android:attr/selectableItemBackground\"\n        android:contentDescription=\"@string/settings\"\n        android:padding=\"10dp\"\n        android:src=\"@drawable/ic_baseline_settings_24\"\n        app:tint=\"@color/hint\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n\nЗа хранение данных отвечает синглтон StreamData, формат данных описывает data class StreamDataModel:\n\nStreamData.kt\npackage com.vladpen\n\nimport android.content.Context\nimport android.util.Log\nimport com.google.gson.Gson\nimport com.google.gson.reflect.TypeToken\nimport java.io.File\n\ndata class StreamDataModel(val name: String, val url: String, val tcp: Boolean)\n\nobject StreamData {\n    private const val fileName = \"streams.json\"\n    private var streams = mutableListOf<StreamDataModel>()\n\n    fun save(context: Context, position: Int, stream: StreamDataModel) {\n        if (position < 0) {\n            streams.add(stream)\n        } else {\n            streams[position] = stream\n        }\n        streams.sortBy { it.name }\n        write(context)\n    }\n\n    fun delete(context: Context, position: Int) {\n        if (position < 0) {\n            return\n        }\n        streams.removeAt(position)\n        write(context)\n    }\n\n    private fun write(context: Context) {\n        val json = Gson().toJson(streams)\n\n        context.openFileOutput(fileName, Context.MODE_PRIVATE).use {\n            it.write(json.toByteArray())\n        }\n    }\n\n    fun getStreams(context: Context): MutableList<StreamDataModel> {\n        if (streams.size == 0) {\n            try {\n                val filesDir = context.filesDir\n\n                if (File(filesDir, fileName).exists()) {\n                    val json: String = File(filesDir, fileName).readText()\n                    initStreams(json)\n                } else {\n                    Log.i(\"DATA\", \"Data file $fileName does not exist\")\n                }\n            } catch (e: Exception) {\n                Log.e(\"Data\", e.localizedMessage ?: \"Can't read data file $fileName\")\n            }\n        }\n        return streams\n    }\n\n    fun getByPosition(position: Int): StreamDataModel? {\n        if (position < 0 || position >= streams.count()) {\n            return null\n        }\n        return streams[position]\n    }\n\n    private fun initStreams(json: String) {\n        if (json == \"\") {\n            return\n        }\n        val listType = object : TypeToken<List<StreamDataModel>>() { }.type\n        streams = Gson().fromJson<List<StreamDataModel>>(json, listType).toMutableList()\n    }\n}\n\nКамеры (streams) хранятся в списке mutableList, доступ к данным камеры можно получить по индексу (position).\nЭкран редактирования настроек камер (EditActivity) отвечает за добавление, редактирование и удаление записей в списке streams:\n\nEditActivity.kt\npackage com.vladpen.cams\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.view.View\nimport androidx.appcompat.app.AlertDialog\nimport androidx.appcompat.app.AppCompatActivity\nimport com.vladpen.StreamData\nimport com.vladpen.StreamDataModel\nimport com.vladpen.cams.databinding.ActivityEditBinding\n\nclass EditActivity : AppCompatActivity() {\n    private val binding by lazy { ActivityEditBinding.inflate(layoutInflater) }\n    private val streams by lazy { StreamData.getStreams(this) }\n    private var position: Int = -1\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(binding.root)\n        initActivity()\n    }\n\n    private fun initActivity() {\n        position = intent.getIntExtra(\"position\", -1)\n\n        val stream = StreamData.getByPosition(position)\n        if (stream == null) {\n            position = -1\n            binding.toolbar.tvToolbarLabel.text = getString(R.string.cam_add)\n        } else {\n            binding.toolbar.tvToolbarLabel.text = stream.name\n\n            binding.etEditName.setText(stream.name)\n            binding.etEditUrl.setText(stream.url)\n            binding.scEditTcp.isChecked = !stream.tcp\n\n            binding.tvDeleteLink.visibility = View.VISIBLE\n            binding.tvDeleteLink.setOnClickListener {\n                delete()\n            }\n        }\n        binding.btnSave.setOnClickListener {\n            save()\n        }\n        binding.toolbar.btnBack.setOnClickListener {\n            back()\n        }\n    }\n\n    private fun save() {\n        if (!validate()) {\n            return\n        }\n        StreamData.save(this, position, StreamDataModel(\n            binding.etEditName.text.toString().trim(),\n            binding.etEditUrl.text.toString().trim(),\n            !binding.scEditTcp.isChecked\n        ))\n        back()\n    }\n\n    private fun validate(): Boolean {\n        val name = binding.etEditName.text.toString().trim()\n        val url = binding.etEditUrl.text.toString().trim()\n        var ok = true\n\n        if (name.isEmpty() || name.length > 255) {\n            binding.etEditName.error = getString(R.string.err_invalid)\n            ok = false\n        }\n        if (url.isEmpty() || url.length > 255) {\n            binding.etEditUrl.error = getString(R.string.err_invalid)\n            ok = false\n        }\n        for (i in streams.indices) {\n            if (i == position) {\n                break\n            }\n            if (streams[i].name == name) {\n                binding.etEditName.error = getString(R.string.err_cam_exists)\n                ok = false\n            }\n            if (streams[i].name == url) {\n                binding.etEditUrl.error = getString(R.string.err_cam_exists)\n                ok = false\n            }\n        }\n        return ok\n    }\n\n    private fun delete() {\n        AlertDialog.Builder(this)\n            .setMessage(R.string.cam_delete)\n            .setPositiveButton(R.string.delete) { _, _ ->\n                StreamData.delete(this, position)\n                back()\n            }\n            .setNegativeButton(R.string.cancel) { dialog, _ ->\n                dialog.dismiss()\n            }\n            .create().show()\n    }\n\n    private fun back() {\n        startActivity(Intent(this, MainActivity::class.java))\n    }\n}\n\n\nactivity_edit.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <include android:id=\"@+id/toolbar\" layout=\"@layout/toolbar\"/>\n\n    <TextView\n        android:id=\"@+id/tvHintName\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/cam_name\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/toolbar\" />\n\n    <EditText\n        android:id=\"@+id/etEditName\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:inputType=\"text\"\n        android:hint=\"@string/cam_name_hint\"\n        android:autofillHints=\"\"\n        android:gravity=\"center\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/tvHintName\" />\n\n    <TextView\n        android:id=\"@+id/tvHintUrl\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/cam_url\"\n        android:layout_marginTop=\"16dp\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/etEditName\" />\n\n    <EditText\n        android:id=\"@+id/etEditUrl\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:inputType=\"textUri\"\n        android:hint=\"@string/cam_url_hint\"\n        android:autofillHints=\"\"\n        android:gravity=\"center\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/tvHintUrl\" />\n\n    <androidx.appcompat.widget.SwitchCompat\n        android:id=\"@+id/scEditTcp\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"16dp\"\n        android:text=\"@string/cam_tcp_udp\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/etEditUrl\" />\n\n    <Button\n        android:id=\"@+id/btnSave\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"16dp\"\n        android:padding=\"10dp\"\n        android:text=\"@string/save\"\n        android:background=\"@color/buttonBackground\"\n        android:foreground=\"?android:attr/selectableItemBackground\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/scEditTcp\" />\n\n    <TextView\n        android:id=\"@+id/tvDeleteLink\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/delete\"\n        android:layout_marginTop=\"18dp\"\n        android:padding=\"10dp\"\n        android:textColor=\"@color/error\"\n        android:clickable=\"true\"\n        android:focusable=\"true\"\n        android:background=\"?attr/selectableItemBackground\"\n        android:visibility=\"gone\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/scEditTcp\" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n\nЭкран видео (VideoActivity) инициализирует медиаплеер (MediaPlayer(libVlc)) и добавляет необходимые параметры --rtsp-tcp и network-caching. К сожалению, не существует рекомендуемого набора опций, при которых плеер будет работать «хорошо». Значение параметра network-caching подобрано опытным путем. Слишком низкое значение может привести к невозможности отображения видеопотока, слишком высокое увеличивает задержку перед воспроизведением.\n\nVideoActivity.kt\npackage com.vladpen.cams\n\nimport android.content.Intent\nimport android.net.Uri\nimport android.os.Bundle\nimport android.view.*\nimport android.view.ScaleGestureDetector.SimpleOnScaleGestureListener\nimport androidx.appcompat.app.AppCompatActivity\nimport com.vladpen.StreamData\nimport com.vladpen.cams.databinding.ActivityVideoBinding\nimport org.videolan.libvlc.LibVLC\nimport org.videolan.libvlc.Media\nimport org.videolan.libvlc.MediaPlayer\nimport org.videolan.libvlc.util.VLCVideoLayout\nimport java.io.IOException\nimport kotlin.math.max\nimport kotlin.math.min\n\nclass VideoActivity : AppCompatActivity(), MediaPlayer.EventListener {\n    private val binding by lazy { ActivityVideoBinding.inflate(layoutInflater) }\n\n    private lateinit var libVlc: LibVLC\n    private lateinit var mediaPlayer: MediaPlayer\n    private lateinit var videoLayout: VLCVideoLayout\n    private lateinit var scaleGestureDetector: ScaleGestureDetector\n    private var scaleFactor = 1.0f\n\n    private var position: Int = -1\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(binding.root)\n        initActivity()\n    }\n\n    private fun initActivity() {\n        position = intent.getIntExtra(\"position\", -1)\n\n        val stream = StreamData.getByPosition(position)\n        if (stream == null) {\n            position = -1\n            return\n        }\n\n        binding.toolbar.tvToolbarLabel.text = stream.name\n        binding.toolbar.btnBack.setOnClickListener {\n            val mainIntent = Intent(this, MainActivity::class.java)\n            startActivity(mainIntent)\n        }\n\n        videoLayout = binding.videoLayout\n\n        libVlc = LibVLC(this, ArrayList<String>().apply {\n            if (stream.tcp) {\n                add(\"--rtsp-tcp\")\n            }\n        })\n        mediaPlayer = MediaPlayer(libVlc)\n        mediaPlayer.setEventListener(this)\n\n        mediaPlayer.attachViews(videoLayout, null, false, false)\n\n        try {\n            val uri = Uri.parse(stream.url)\n            Media(libVlc, uri).apply {\n                setHWDecoderEnabled(true, false)\n                addOption(\":network-caching=150\")\n                mediaPlayer.media = this\n            }.release()\n\n            mediaPlayer.play()\n\n        } catch (e: IOException) {\n            e.printStackTrace()\n        }\n        scaleGestureDetector = ScaleGestureDetector(this, ScaleListener())\n    }\n\n    override fun onStop() {\n        super.onStop()\n        mediaPlayer.stop()\n        mediaPlayer.detachViews()\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        mediaPlayer.release()\n        libVlc.release()\n    }\n\n    override fun onEvent(ev: MediaPlayer.Event) {\n        if (ev.type == MediaPlayer.Event.Buffering && ev.buffering == 100f) {\n            binding.pbLoading.visibility = View.GONE\n        }\n    }\n\n    override fun onTouchEvent(ev: MotionEvent): Boolean {\n        // Let the ScaleGestureDetector inspect all events.\n        scaleGestureDetector.onTouchEvent(ev)\n        return true\n    }\n\n    inner class ScaleListener : SimpleOnScaleGestureListener() {\n        override fun onScale(scaleGestureDetector: ScaleGestureDetector): Boolean {\n            scaleFactor *= scaleGestureDetector.scaleFactor\n            scaleFactor = max(1f, min(scaleFactor, 10.0f))\n            videoLayout.scaleX = scaleFactor\n            videoLayout.scaleY = scaleFactor\n            return true\n        }\n    }\n}\n\n\nactivity_video.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".VideoActivity\">\n\n    <org.videolan.libvlc.util.VLCVideoLayout\n        android:id=\"@+id/videoLayout\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\" />\n\n    <ProgressBar\n        android:id=\"@+id/pbLoading\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:indeterminate=\"true\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\" />\n\n    <include android:id=\"@+id/toolbar\" layout=\"@layout/toolbar\"/>\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n\nЭкран видео дополнительно реализует (implements) интерфейс MediaPlayer.EventListener, который нужен для отключения индикатора загрузки (pbLoading) после окончания буферизации потока. Внутренний класс ScaleListener обрабатывает жест масштабирования «pinch zoom».\nЗаголовок экранов я вынес в отдельный файл, включаемый в разметку экранов директивой include:\n\ntoolbar.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:id=\"@+id/toolbar\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:background=\"@color/overlay_background\">\n\n    <ImageButton\n        android:id=\"@+id/btnBack\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:background=\"@color/transparent_background\"\n        android:foreground=\"?android:attr/selectableItemBackground\"\n        android:padding=\"10dp\"\n        android:src=\"@drawable/ic_baseline_arrow_back_24\"\n        android:contentDescription=\"@string/back\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintBottom_toBottomOf=\"parent\" />\n\n    <TextView\n        android:id=\"@+id/tvToolbarLabel\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginStart=\"16dp\"\n        android:textColor=\"@android:color/white\"\n        android:textSize=\"20sp\"\n        android:textStyle=\"bold\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintStart_toEndOf=\"@+id/btnBack\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n    <TextView\n        android:id=\"@+id/tvToolbarLink\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:padding=\"10dp\"\n        android:layout_marginEnd=\"6dp\"\n        android:textColor=\"@color/hint\"\n        android:clickable=\"true\"\n        android:focusable=\"true\"\n        android:background=\"?attr/selectableItemBackground\"\n        android:visibility=\"gone\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n\nВ результате приложение получилось если не максимально простым, то, по крайне мере, максимально близким к этому:)\nСборка\nХотя нативные приложения имеют минимальный размер (и максимальную производительность), использование библиотеки libvlc-all увеличивает результирующий размер сборки:\n\nКак видите, поддержка каждой платформы съедает около 19 МБ дискового пространства. Такова цена «всеядности» VLC, который работает почти всегда и везде и воспроизводит все, что вообще может воспроизводиться.\nTODO\nПоскольку мне нужно было сделать максимально просто, в эту статью не вошла реализация перемещения увеличенного изображение – это требует некоторого количества арифметических вычислений, не добавляющих понятности коду. Кроме того, чуть позже я планирую добавить поддержку воспроизведения сохраненного архива через SFTP.\nВместо заключения\nВ результате моих исследований получилось вот такое импортозамещенное демилитаризованное (читайте: только с русской локализацией) приложение. Оно просто работает, поэтому я взял на себя смелость оставить его здесь, на Хабре. Надеюсь, кому-нибудь поможет.\nP.S. Времени на написание комментариев в коде не было, прошу не судить строго. Зато комментарии открыты на Хабре – добро пожаловать! "
]