[
   "Ревизия уровней доступа пользователей с помощью Power BI на примере CMS Битрикс (БУС)",
   "\n\r\nВ статье показан пример применения Power BI для анализа доступов пользователей на сайте под управлением 1С-Битрикс.\n\nПроблема\r\nС течением времени к развитию интернет-ресурсов подключается все больше и больше пользователей так или иначе, обладающих расширенными правами нежели рядовой пользователь сайта.\n\r\nВ связи с этим все сложнее контролировать доступы к конфиденциальным функциям. Хорошо, если написаны регламенты, которые помогают контролировать доступы на более-менее безопасном уровне. Но часто бывает так, что коллеги переходят работать в другие подразделения, уходят в декреты :) или увольняются, а доступы остаются.\n\r\nЕстественно это несет разные угрозы: утечка базы клиентов ну и вплоть до саботажа и др.\r\nВозраст проектов, с которыми я работаю уже составил 10 лет. База насчитывает сотни тысяч пользователей, среди которых сотни с привилегированными правами.\n\r\nВ данной статье показан пример того, как можно упростить ревизию пользователей к различным объектам сайта под управлением CMS Битрикс (БУС).\n\r\nПроблема в том, что админка Битрикса не дает возможности получить целостную картину с доступами; прокликивать кучу ссылок и ждать, пока загрузятся страницы админки тоже неприятно.\n\r\nВ качестве основного инструмента для этого будет использован Power BI (немного не по своему основному назначению :)\n\r\nПредполагается, что читатель уже знаком на базовом уровне с Power BI, знает основы SQL, ну и пользоваться админкой Битрикса тоже умеет. Будут рассмотрены стандартные возможности Битрикса в плане предоставления доступов.\n\nНедостатки админки Битрикса\r\nНевозможно провести ревизию в стандартной админке за приемлемое время по причине отсутствия целостной картины с доступами – сводных данных по всем модулям/разделам/инфо-блокам и т.д., к которым предоставлен доступ.\n\r\nПроизводительность админки:\n\n\nВ разделе “Группы пользователей” админки Битрикса есть фича, которая генерирует SQL-запрос на выборку всех групп с подсчетом кол-ва пользователей. Все хорошо, когда база небольшая. Но с базой на сотни тысяч пользователей, с сотней пользовательских групп на выделенном сервере с 128 Гб оперативки простое открытие этого раздела занимает 8 сек.\nВ карточке группы тоже есть запрос, который зачем-то выбирает все группы пользователей, вместо того, чтобы получить данные только по выбранной. Потери на ожидании 3 сек.\n\nСпособы решения\r\nОбычно есть несколько решений проблемы.\n\n\nНаписать регламенты по предоставлению доступов к сайтам и четко им следовать.\nПериодически проводить ревизию доступов.\nНадеяться на лучшее и не тратить ограниченные ресурсы компании.\n\r\nВ данной статье будет рассмотрен как раз второй способ.\n\nЗадачи\n\nВыбрать инструменты, которые позволят оперативно получить данные об уровнях доступа каждого пользователя с расширенными правами.\nНастроить инструменты так, чтобы они наглядно показывали картину с доступами в целом с необходимой детализацией и интерактивностью.\nПровести ревизию доступов.\n\nХранение доступов в Битрикс\r\nБитрикс позволяет достаточно гибко настроить права через пользовательские группы.\r\nНастройки доступов хранятся в основном в таблицах MySQL. Часть настроек хранится в файлах. Например, доступы к файлам и папкам хранятся в файлах .access.php.\n\r\nБудет рассмотрен анализ доступов пользователей и пользовательских групп к:\n\n\nинфо-блокам\nвеб-формам с указанием уровня доступа\nстатусам веб-формы с указанием уровня доступа\nразделам сайта\nмодулям Битрикс с указанием уровней доступа\n\nИнструменты\n\nPower BI Desktop, позволяющий хорошо визуализировать данные, получать данные из многочисленных источников (почти) из коробки. Собственно Power BI можно заменить обычным Excel 2016 и выше – в его поставку уже включен PowerQuery, через который можно выбрать все данные для проведения анализа. Однако, Power BI позволяет интерактивно отображать данные с учетом их взаимосвязей, а это позволяет быстро находить скрытые зависимости.\nMySQL Connector потребуется для возможности создать запрос через Power BI к MySQL веб-сервера.\nKitty или Putty для организации туннеля к MySql, если доступ к БД открыт только через SSH.\n\r\nПолучается следующая схема доступа: Power BI → MySQL Connector → Kitty → MySQL.\n\nPower BI\r\nPower BI Desktop – позволяет хорошо визуализировать данные, получать данные из многочисленных источников (почти) из коробки. Собственно Power BI можно заменить обычным Excel 2016 и выше – в его поставку уже включен PowerQuery, через который можно выбрать все данные для проведения анализа. Однако, Power BI позволяет интерактивно отображать данные с учетом их взаимосвязей, а это позволяет быстро находить скрытые зависимости, что нам и нужно для ревизии доступов.\n\r\nСкачать можно на официальной странице.\n\nMySQL Connector\r\nПереходим на страницу. Скачиваем и устанавливаем. Иногда придется перезагрузить ПК после установки.\n\nKitty/Putty\r\nДля выполнения SQL-запросов к БД Битрикса потребуется настроить туннель.\n\n\nВводим IP сервера и порт\n\n \nЗабиваем логин и пароль по SSH\n\n \nДелаем проброс портов:\n\n \nСохраняем в профиль сделанные настройки для будущих использований:\n\n \nЗапускаем.\n\r\nМожно также просто скачать Putty и запустить его командой:\n\nputty.exe -ssh \"USER@HOST\" -pw \"PASSWORD\" -2 -v -P 22 -L 3306:127.0.0.1:3306\r\nЕстественно, Kitty/Putty должен быть запущен до обновления данных в Power BI.\n\nПользователи и пользовательские группы\r\nКак и во многих CMS в Битриксе реализован механизм разграничения прав доступа через пользовательские группы.\n\r\nВыгружаем в модель данных Power BI сущности из БД:\n\n\nГруппы \nПользователи\n\r\n… а также отношения групп и пользователей.\n\nГруппы\r\nОграничимся только активными группами.\n\r\nСписок групп хранит таблица b_group.\n\n\nСоздаем подключение:\n\n \nВводим:\n\n\nв поле Server: localhost:3306 \nв поле Database: bitrix_db (название БД, с которой работает Битрикс)\nSQL-запрос:\n\nSELECT id, timestamp_x, active, name, description, anonymous FROM b_group WHERE active = 'Y';\n\n\n\n\nВводим логин и пароль к БД и отправляем запрос:\n\n\n\n\n\n\n\nСразу даем понятное имя запросу:\n\n\n Выводим список групп на отдельный лист в табличном виде:\n\n\n\n\r\nДанный способ извлечения и представления данных будет аналогичен и для других запросов, связанных с БД Битрикса.\n\nПользователи\r\nТеперь выгрузим всех пользователей, которые имеют расширенные права. Но не стоит выгружать пользователей, включенных только в группы, которые не дают им никаких дополнительных прав, например “Все пользователи, включая незарегистрированные” (стоит отметить, что связь данной группы с пользователями хранится для всех пользователей, зарегистрированных до версии 12. В более новых версиях группа считается системной и данных о связи пользователями БД уже не хранит).\n\r\nОграничимся только активированными пользователями.\n\r\nДля этого нужно:\n\n\nВыбрать все ID групп, дающих расширенные права. Это нужно, чтобы сэкономить на трафике, т.к. количество записей в b_user_group может доходить до миллионов в зависимости от сложности проекта.\nСоздать динамический запрос на выгрузку связей Пользователь — Группа\nВыгрузить пользователей, имеющих связь из п.2.\n\r\nНачнем:\n\n\nВызовем редактор запросов: Home → Edit Queries\nСоздадим ссылку на исходный запрос “Группы”:\n\n\nПереименуем новый запрос в “ID групп” и фильтром выберем только те группы, которые интересны с точки зрения безопасности.\n\n\nТеперь получим строку, содержащую ID групп через запятую:\n\nДобавляем пользовательский столбец: AddColumn → General → Custom Column\n\n \nУдалим все колонки кроме ID и Группировка:\n\n \nСгруппируем по колонке “Группировка”:\n\n\n\n \nДобавим еще одну колонку следующим образом:\n\n \nРаскроем список так, чтобы получились значения через запятую:\n\n \nИ провалимся в получившуюся ячейку: \n\n \nPower BI после этого преобразует запрос в переменную, которую можно использовать в динамических SQL-запросах:\n\n \n\nСоздадим запрос “Пользователь-группа”, содержащий связь пользователя с группой, аналогично тому, как это сделано в разделе “Группы”.\n\r\nSQL-запрос:\n\nSELECT ug.user_id, ug.group_id\nFROM b_user_group ug\nJOIN b_group g ON g.id = ug.group_id\nJOIN b_user u ON u.id = ug.user_id\nWHERE g.ACTIVE = 'Y'\n  AND u.ACTIVE = 'Y'\n  AND ug.group_id IN (ХХХ);\r\nХХХ нужно будет заменить на ID групп через запятую.\n\nВызовем на редактирование исходники запроса и заменим его на следующее:\n\nlet\n    sql = \"SELECT ug.user_id, ug.group_id #(lf)FROM b_user_group ug #(lf)JOIN b_group g ON g.id = ug.group_id #(lf)JOIN b_user u ON u.id = ug.user_id #(lf)WHERE g.ACTIVE = 'Y' #(lf)  AND u.ACTIVE = 'Y' #(lf)  AND ug.group_id IN (\"&#\"ID групп\"&\");\",\n    Source = MySQL.Database(\"localhost:3306\", \"bitrix_db\", [ReturnSingleDatabase=true, Query=sql, CreateNavigationProperties=false])\nin\n    Source\n\nПосле этого можно получить следующее предупреждение:\n\nFormula.Firewall: Query 'Пользователь-группа' (step 'Source') references other queries or steps, so it may not directly access a data source. Please rebuild this data combination.\r\nЧтобы от него избавиться, нужно изменить уровень конфиденциальности:\n\n\n\n\n\r\nПосле этого обновить запросы.\nДелаем переменную “ID пользователей” аналогично тому, как это сделано для “ID групп” (т.е. делаем ссылку от запроса Пользователи и т.д.). С помощью нее мы сгенерируем SQL-запрос, который позволит выбрать только нужных для анализа пользователей. Предварительно удалим дубликаты user_id:\n\n \nСоздаем запрос на выборку пользователей, аналогично тому, как это сделано для “Пользователь-группа”.\n\nSQL: SELECT id, last_name, NAME, email, date_register, last_login FROM b_user WHERE active = 'Y' AND id IN (ХХХ );\r\nХХХ нужно будет заменить ID пользователей.\n\n\nНастройка связей между запросами\r\nЧтобы Power BI мог интерактивно фильтровать данные в разных представлениях, нужно задать связи между запросами. В нашем случае нужно связать поля:\n\n\n“Пользователь-группа”[group_id] → “Группы”[id]\n“Пользователь-группа”[user_id] → “Пользователи”[id]\n\n\n\r\nАналогичным образом мы будем связывать другие запросы.\n\nОтчет о пользователях и пользовательских группах\r\nНа вкладке Reports (Отчеты) выведем список пользователей и групп, используя в качестве элемента визуализации Table (Таблица).\n\r\nИз запроса “Пользователи” выбираем поля: last_name, name, last_login, email.\r\nИз запроса “Пользователь-группа” выбираем поле group_id.\r\nТ.к. мы назначили связи между запросами, то Power BI сможет корректно использовать агрегирующую функцию Count для подсчета количества групп, в которые входит каждый конкретный пользователь.\n\n\n\r\nДобавим рядом еще один Table и выберем из запроса «Группа» поле name, а из запроса “Пользователь-группа” поле user_id – для него выставим агрегацию “Count (Distinct)”, чтобы увидеть количество пользователей, входящих в группу.\n\r\nТ.к. запросы “Группа” и “Пользователь” связаны через ассоциативный запрос “Пользователь-группа”, то при клике на пользователе в таблице со списком групп отобразятся только те группы, в которые входит выбранный пользователь. И наоборот.\n\n\n\r\nТаким образом можно прощелкать либо каждого пользователя и посмотреть, в какие группы он входит, либо прощелкать группы и посмотреть, какие пользователи входят в группу. Ну а затем уже принимать решения относительно изменения доступов для пользователя.\n\r\nДалее описываться способ размещения оставшихся таблиц в общем отчете Power BI не будет, т.к. это делается аналогичным образом.\n\n.access.php\r\nВ Битриксе имеется возможность задать доступ к папкам и файлам, указав в файлах .access.php номера групп и необходимый уровень доступа.\n\r\nНаша задача свести данные из всех файлов .access.php, раскиданных по серверу проекта, в табличный вид.\n\r\nДля этого:\n\n\nИщем и архивируем все файлы .access.php с сервера, сохраняя пути к этим файлам.\r\nЯ использовал терминалку для поиска, копирования и архивирования найденных файлов. Пример команды:\n\nfind “BITRIX_PROJECT_DIR” -name '.access.php' -type f > “OUTPUT_DIR/.access.php.files.txt”&&tar cvfpz “OUTPUT_DIR/.access.php.files.tar”  -T “OUTPUT_DIR/.access.php.files.txt”&&find “OUTPUT_DIR” -type d -exec chmod 775 {} \\; && find “OUTPUT_DIR” -type f -exec chmod 775 {} \\;&&find “OUTPUT_DIR” -type d -exec chown bitrix:bitrix {} \\; && find “OUTPUT_DIR”/ -type f -exec chown bitrix:bitrix {} \\;\r\nЗдесь:\n\n\nBITRIX_PROJECT_DIR – папка с проектом на Битриксе.\nOUTPUT_DIR – путь к папке, в которой будут размещен файл .access.php.files.txt со списком найденных .access.php, а также архив .access.php.files.tar, содержащий копии всех найденных .access.php.\n\r\nЕстественно, если проектов много (использована многосайтовость), то выбираем папку, содержащую все проекты.\nСкачиваем и распаковываем архив с .access.php где-нибудь рядом с проектом Power BI.\r\nЯ написал батник, который делает это автоматически: через wget реализовано скачивание; через 7zip – разархивирование.\n\r\nПример батника:\n\n\n\r\nФайл, содержащий настройки для батника:\n\n\n\n\r\nТеперь создаем запрос, который сведет содержимое всех .access.php в табличном виде.\n\n\nДля удобства создадим параметр, который будет содержать путь к папке, из которой мы извлечем содержимое всех .access.php\n\n\nВыберем запрос типа “Folder” и выберем наш параметр в качестве пути:\n\n\nРазвернем поле Content:\n\n\n\r\nХХХХХХ – это разделитель колонок, нужен чтобы столбец был один после импорта данных из всех файлов.\nПосле этого Power BI удалит нужную нам колонку, содержащую путь к .access.php. Поэтому нам нужно отредактировать шаг “Remove other columns1”, выбрав в нем “Folder Path”:\n\n\nОставляем колонки: Folder Path и Column1.\nЧтобы удалить из Folder Path абсолютный путь к локальному файлу воспользуемся заменой:\n\n\nФайлы .access.php содержат настройки доступа в формате:\n\n$PERM[\"путь\"][\"ID группы\"] = \"<Уровень доступа>\";\r\nНаша задача раскидать по колонкам: Путь, ID группы, Уровень доступа. Делается это с помощью фильтров, разделения по столбцам (Split Column) и пользовательских столбцов (Custom column).\nВ итоге должна получиться следующая таблица:\n\n\n\r\nКак видно в поле ID группы есть “*” (доступ для всех). Чтобы была возможность задать связь с другими запросами нам нужно сделать это поле целочисленным, при этом не потеряв информации о “*” (что означает для всех групп). Сделаем два запроса, типа “ссылка” на исходный запрос DotAccessPhp:\n\n\nПервый DotAccessPhpForRels будет содержать только целочисленные ID групп (используем фильтр, убрав * в колонке ID группы) – ее мы и свяжем с остальными запросами:\n\nВторой – DotAccessPhpForAll – только * (используем фильтр).\n\n\r\nСхема связей:\n\n\n\r\nЧтобы при выборе файла из DotAccessForRels в других представлениях показывались только связанные данные, нужно изменить параметр “Cross filter direction” на Both:\n\n\n\r\nДля остальных запросов, которые будут добавлены ниже это тоже нужно сделать.\n\nИнфо-блоки\r\nНеобходимо выгрузить список инфо-блоков и таблицу связей инфо-блоков с группами.\n\r\nБудем выгружать информацию только об активных инфо-блоках.\n\n\nСоздаем запрос “Инфоблоки”. SQL-запрос:\n\nSELECT i.id, i.NAME 'Инфоблок', i.TIMESTAMP_X 'Дата изменения', GROUP_CONCAT(ist.SITE_ID SEPARATOR ', ') 'Сайты'\nFROM b_iblock i\nJOIN b_iblock_site ist ON ist.IBLOCK_ID = i.id\nGROUP BY 1,2,3;\nСоздаем запрос “Инфоблок-группа”:\nSELECT ig.iblock_id, ig.group_id, ig.permission\nFROM b_iblock_group ig\nJOIN b_group g ON g.id = ig.group_id\nJOIN b_iblock i ON i.ID = ig.IBLOCK_ID\nWHERE g.ACTIVE = 'Y'\n  AND i.ACTIVE = 'Y';\nОбновляем схему связей, не забывая изменять параметр “Cross filter direction” на Both:\n\n\n\nФормы\r\nВ случае форм права для пользовательских групп выдаются как на сами формы, так и на статусы, в которых пребывает результат заполнения формы.\n\n\nСоздаем запрос “Формы”:\n\nSELECT\n  f.ID,\n  f.name 'Форма',\n  GROUP_CONCAT(f2s.SITE_ID SEPARATOR ', ') 'Сайты'\nFROM b_form f\nJOIN b_form_2_site f2s ON f2s.FORM_ID = f.ID\nGROUP BY 1, 2\nORDER BY 2;\nСоздаем запрос “Форма-группа”:\n\nSELECT DISTINCT\n  f2g.group_id,\n  f2g.form_id,\n  f2g.PERMISSION 'Код разрешения'\nFROM b_form_2_site f2s\nJOIN b_form_2_group f2g ON f2g.FORM_ID = f2s.FORM_ID\nJOIN b_group g ON g.ID = f2g.group_ID\nWHERE g.ACTIVE = 'Y'\nORDER BY 1, 2, 3;\nСоздаем запрос “Статусы форм”.\n\nSELECT  fs.ID,  fs.TITLE 'Статус',  fs.form_id\nFROM b_form_status fs\nJOIN b_form f ON f.ID = fs.FORM_ID\nWHERE fs.ACTIVE = 'Y'\n  AND EXISTS (SELECT f2s.FORM_ID FROM b_form_2_site f2s WHERE f2s.FORM_ID = f.ID LIMIT 1)\nORDER BY 3, 2;\nСоздаем запрос “Статусы форм-группа”\n\nSELECT  fs2g.status_id,  fs2g.group_id,  fs2g.PERMISSION 'Разрешение'\nFROM b_form_status_2_group fs2g\nJOIN b_form_status fs ON fs.ID = fs2g.STATUS_ID\nJOIN b_group g ON g.ID = fs2g.group_ID\nJOIN b_form f ON f.ID = fs2g.GROUP_ID\nJOIN b_form_2_site f2s ON f2s.FORM_ID = f.ID\nWHERE fs.ACTIVE = 'Y'\n  AND (g.ACTIVE = 'Y')\nORDER BY 1, 2, 3;\nОбновляем схему связей:\n\n\n\nМодули\n\nСоздаем запрос “Модуль-группа”.\n\nSELECT mg.MODULE_ID 'Модуль', mg.group_id, mg.G_ACCESS 'Разрешение', t.LETTER, t.NAME\nFROM b_module_group mg\nJOIN b_group g ON g.id = mg.GROUP_ID\nLEFT JOIN b_task t ON t.MODULE_ID = mg.MODULE_ID AND t.BINDING = 'module'\nWHERE g.active = 'Y'\n  AND mg.G_ACCESS = t.LETTER;\nОбновляем связи:\n\n\n\nТабло\r\nНастраиваем стили таблиц, используем полезное пространство по-максимуму.\n\r\nВ итоге должно получиться что-то похожее на следующее:\n\n\n\r\nНемного доработанное табло (кол-во элементов в таблицах):\n\n\n\r\nКстати удобно сначала настроить вид одной таблицы, а потом просто применить ее вид на другие таблицы с помощью Home → Format Painter. Данная функция действует так же, как и в Word и Excel (Формат по образцу).\n\nСсылки в админку\r\nЧтобы можно было быстро переходить на сайт в и делать настройки в админке, можно добавить пользовательскую колонку на языке DAX и сделать ее тип “Web URL”. Для этого выберем созданную колонку и назначим соответствующий тип (Modeling → Properties → Data Category → Web URL). \n\r\nПример для запроса Группы:\n\n\n\r\nДобавим колонку в представление:\n\n\r\nТеперь можно просто кликать на ячейку таблицы и переходить в карточку группы в админке Битрикса.\n\nОтчет “Файлы”\r\nДля удобства можно сделать отдельный отчет разместив на нем таблицы, касающиеся доступов к файлам и разделам интернет-ресурса:\n\n\n\r\nВ этом отчете также добавлены ссылки на редактирование всех .access.php непосредственно через админку Битрикса.\n\nИтоги\r\nБитрикс – это чемпион среди cms-монстров с очевидными плюсами и минусами, красивый снаружи и ужасный внутри. В нем нет удобных средств администрирования доступов. Но данная проблема решена с помощью бесплатных инструментов, не привлекая к этому процессу ценное время программистов.\n\r\nК преимуществам приведенного подхода также стоит отнести возможность быстро дополнить модель в Power BI дополнительной информацией из Битрикса, например, кто-то захочет узнать когда были созданы или изменены .access.php и др.\n\r\nТеперь после построения модели прав доступа и ее визуализации в Power BI достаточно:\n\n\nпоследовательно прощелкать пользователей, группы, формы, файлы и в реальном времени увидеть все связи, касательно доступов;\nбыстро перейти на необходимые страницы админки, чтобы внести правки;\nобновить модель данных актуальными данными из Битрикса прямо в Power BI.\n\r\nВ итоге была проведена ревизия и сделаны корректировка в доступах пользователей.\n\r\nP.S. В маркетплейсе есть бесплатный модуль “Центр управления доступом”, но он весьма ограничен, а последнему комментарию к нему более 5 лет. Возможно кому-то понравится идея построения такого дашборда прямо в Битриксе и он реализует ее в качестве модуля…\n\r\nP.S.2. Если кому интересна тема использования Power BI для решения проблем поиска скрытых зависимостей в различных учетных системах, то пишите в комментариях. Я тогда напишу еще несколько статей на эту тему.\n\r\nP.S.3. Спасибо моим соратникам за помощь в подготовке этой статьи: Александру Воронкову, Евгению Шапочкину, Алексею Титову. "
]