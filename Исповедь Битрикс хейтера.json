[
   "Исповедь Битрикс хейтера",
   "Что-то много развелось в последнее время статей про минусы битрикса, и их опровержений. Раз уж пошла такая пьянка, то и я добавлю свои 5 копеек. \r\nВ комментариях к статьям писали, что не хватает конкретики, примеров, более глубокого обзора.\n\r\nДанная статья — попытка этот обзор написать. Хотя нет, это скорее пост ненависти и боли (может даже немного нытья). Это такой расширенный вариант поста про минусы от  pistol. Я постараюсь описать большинство тех вещей, которые раздражают именно меня и моих коллег в Битриксе. Постараюсь собрать в одном посте все те минусы, которые доставляют ежедневно очень много боли. Под конец я постараюсь сделать выводы.\n\r\nКто я такой? Да в общем-то, обычный разработчик. Работаю с битриксом с ноября 2010 года (5.5 лет). Работаю только с битриксом, не сделал ни одного коммерческого проекта на других CMS, не использовал фреймворки в создании сайтов. По роду деятельности я занимаюсь в основном интернет-магазинами, их созданием, поддержкой и развитием.\n\nTL;DR\r\nБитрикс — УГ, не стоит лезть в этот омут без особой надобности.\n\nВместо вступления\r\nДля начала я предлагаю вам провести мысленный эксперимент. Давайте попробуем взять двух backend-разработчиков примерно одного возраста и примерно с одинаковым стажем работы (допустим, 1 — 1.5 года), только чтобы один из них работал все это время с 1С-Битрикс, а другой — с Symfony(например). Можно легко сравнить, с каким набором технологий работал все это время один, а с каким — другой, и какой в итоге набор знаний они получили за это время.\n\r\nВ случае с Symfony разработчиком это будет: php5/7 + глубокое понимание ООП, общепринятые паттерны проектирования (MVC, DI, Factory, Repository как минимум), умение разрабатывать Unit тесты, использовать шаблонизаторы (минимум twig), ORM (с Doctrine), composer, git, стандарты PSR, опыт работы с консолью и написания консольных приложений, базовые навыки настройки веб-сервера.\n\r\nВ случае с 1С-Битрикс разработчиком это будет php5, html/css + javascript/jquery (из коробки шаблонизаторов нет, а битрикс сует логику в шаблоны, как ни крути, придется с этим возиться), возможно git (и это сильно зависит от компании, некоторые динозавры до сих пор пилят на продакшене через FTP), если повезет — немножно sql и… все?\n\r\nЯ понимаю, что это все очень индивидуально и очень большую роль может сыграть окружение человека. Но тут я говорю о том, к чему двигают разработчика системы из коробки. В большинстве случаев, Битрикс разработчик очень сильно уступает в навыках по сравнению с разработчиками под другие фреймворки/CMS — и это неоспоримый факт. А все потому, что Битрикс изначально дает слишком много свободы при отсутствии внятной архитектуры, документации, и правильных решений, тогда как Symfony предлагает все необходимое.\n\r\nЛишь однажды к нам в компанию пришел опытный человек не из мира 1С-Битрикс (в регионе) и он был на голову сильнее своих коллег с тем же стажем просто за счет того, что ранее ему поставили мозги на правильные рельсы.\r\nЯ и сам такой. Мне, к сожалению, с самого начала пустили пыль в глаза той же маркетинговой чепухой, да и попал я в не очень хорошее окружение. Я сам понимаю и чувствую, что мои коллеги с аналогичным стажем работы, но в том же Symfony, имеют больший кругозор, и это очень сильный побочный эффект от битрикса.\r\nЭто все наводит на мысли о том, что если ты хочешь развиваться в мире веб-разработки, то в качестве основы нужно выбирать уж точно не битрикс.\n\r\nСравнивая двух разработчиков, я хочу обратить внимание на те рамки, в которые загоняет система, и на ту свободу, которую она предоставляет. Что Битрикс, что Symfony — они оба дают почти безграничную гибкость, и в принципе на каждой из них можно создать продукт абсолютно любой сложности. Однако система должна помогать разработчику в решении проблем, вместо того, чтобы вставлять палки в колеса. И тут Битрикс очень сильно проигрывает.\n\nМаркетинг\r\nСразу хочу сказать немного слов об этом, т.к. это основная составляющая успеха Битрикса. \r\nМожно сказать, что духом маркетинга пропитан весь Битрикс, даже документация для разработчиков. Даже там они пишут о том, что их продукт «настолько крутой, что его ценят и уважают все наши партнеры»(пруф, блок «Структура»). В битриксе работают хорошие маркетологи, которые грамотно умеют преподнести свой продукт. Раз в полгода они устраивают конференции для партнеров, где рассказывают о том, что было сделано и о том, какие у них планы. Как показывает практика, никогда эти планы не сбываются в срок и очень часто релизы либо неполные, либо с кучей ошибок. \r\nВ качестве примера — нашумевший рефакторинг модуля sale, релиз которого откладывали больше года, и даже самую последнюю дату релиза (23 декабря 2015 года) провалили на 3 месяца, и выпустили новый магазин и БУС (Битрикс ред. «Управление Сайтом») 16 версии только в конце марта 2016го. Но в результате после обновления пользователи не только не получили новых фич. Пользователи получили в большинстве случаев неработоспособный магазин, и горку нового недокументированного кода в придачу.\r\nНовым инструментам дают такие громкие названия, которые у всех на слуху: Композитный сайт — ускорение x100; Highload-блоки; Bitrix BigData. На самом деле за этими словами скрываются вполне обыденные вещи, которые не соответствуют своему имени.\r\nИ такой подход прослеживается везде, к сожалению. Снаружи продукт выглядит как конфетка, которую купил, поставил и пользуешься. Но если с битриксом сделать шаг в сторону от стандартной поставки — все, поддержание функциональности при обновлениях превращается в ад.\r\nВпрочем, обо всем по порядку, тема маркетинга еще будет всплывать в этом посте, скорее всего, не раз.\n\nАрхитектура\r\nНа протяжении десятка лет Битрикс отчаянно загонял сам себя в тупик. Каждая новая фича в продукте выходила в соответствии с интересами бизнеса, без должной проработки с технической точки зрения. И, естественно, все это росло как снежный ком.\r\nЕсли вдуматься, то в Битриксе нет архитектуры, как таковой. Нет даже общепринятых сформулированных правил, которые позволили бы следовать этой архитектуре. В курсе разработчиков, в разделе Архитектура продукта, сказано, что битрикс следует архитектуре MVC и приводит схему:\n\n\n\r\nСразу хочу сказать, что это MVC очень сильно отличается от классического варианта. Тут очень сильная подмена понятий, никакого MVC тут на самом деле нет, просто есть некое абстрактное разделение на модули, компоненты, и шаблоны компонентов. А уже из этих кирпичиков строится весь сайт. Но каждый из этих кирпичиков может брать на себя разные задачи, и поэтому они тесно взаимосвязаны между собой.\r\nПопробую рассмотреть каждый из этих аспектов архитектуры более подробно.\n\nM — Model, или API\r\nМне сложно судить об API системы как о модели. Да, API предоставляет интерфейс доступа к данным и позволяет ими манипулировать. Но API битрикса позволяет работать не только с данными, но и с шаблонами, да и с пользовательскими запросами тоже. Ну да ладно… это лишь мое мнение.\r\nНа данный момент в Битриксе есть 2 варианта API. Условно можно разделить их на старое и новое. Новое API называется D7 (честно — не помню почему, но  Rizhikov рассказывал об этом на одной из партнерских конференций). \n\r\nСтарое API — это собрание антипаттернов, ужасных примеров плохого кода. В Битриксе всегда считалось нормальным вызывать нестатические методы статически, и наоборот, требовать состояния тогда, когда это неуместно. Например, всем известный CIBlockElement::GetList — пожалуй, один из самых часто-используемых методов при разработке. Его реализация содержит более 500 строк кода, использует глобалки, строит ужасающие, колоссальные запросы, и содержит нереальный, просто нечитабельный недокументированный код.\nСмотримfunction GetList($arOrder=array(\"SORT\"=>\"ASC\"), $arFilter=array(), $arGroupBy=false, $arNavStartParams=false, $arSelectFields=array())\n    {\n        /*\n        Filter combinations:\n        CHECK_PERMISSIONS=\"N\" - check permissions of the current user to the infoblock\n            MIN_PERMISSION=\"R\" - when permissions check, then minimal access level\n        SHOW_HISTORY=\"N\" - add history items to list\n            SHOW_NEW=\"N\" - if not add history items, then add new, but not published elements\n        */\n        global $DB, $USER;\n        $MAX_LOCK = intval(COption::GetOptionString(\"workflow\",\"MAX_LOCK_TIME\",\"60\"));\n        $uid = is_object($USER)? intval($USER->GetID()): 0;\n\n        $formatActiveDates = CPageOption::GetOptionString(\"iblock\", \"FORMAT_ACTIVE_DATES\", \"-\") != \"-\";\n        $shortFormatActiveDates = CPageOption::GetOptionString(\"iblock\", \"FORMAT_ACTIVE_DATES\", \"SHORT\");\n\n        $arIblockElementFields = array(\n                \"ID\"=>\"BE.ID\",\n                \"TIMESTAMP_X\"=>$DB->DateToCharFunction(\"BE.TIMESTAMP_X\"),\n                \"TIMESTAMP_X_UNIX\"=>'UNIX_TIMESTAMP(BE.TIMESTAMP_X)',\n                \"MODIFIED_BY\"=>\"BE.MODIFIED_BY\",\n                \"DATE_CREATE\"=>$DB->DateToCharFunction(\"BE.DATE_CREATE\"),\n                \"DATE_CREATE_UNIX\"=>'UNIX_TIMESTAMP(BE.DATE_CREATE)',\n                \"CREATED_BY\"=>\"BE.CREATED_BY\",\n                \"IBLOCK_ID\"=>\"BE.IBLOCK_ID\",\n                \"IBLOCK_SECTION_ID\"=>\"BE.IBLOCK_SECTION_ID\",\n                \"ACTIVE\"=>\"BE.ACTIVE\",\n                \"ACTIVE_FROM\"=>(\n                        $formatActiveDates\n                        ?\n                            $DB->DateToCharFunction(\"BE.ACTIVE_FROM\", $shortFormatActiveDates)\n                        :\n                            \"IF(EXTRACT(HOUR_SECOND FROM BE.ACTIVE_FROM)>0, \".$DB->DateToCharFunction(\"BE.ACTIVE_FROM\", \"FULL\").\", \".$DB->DateToCharFunction(\"BE.ACTIVE_FROM\", \"SHORT\").\")\"\n                        ),\n                \"ACTIVE_TO\"=>(\n                        $formatActiveDates\n                        ?\n                            $DB->DateToCharFunction(\"BE.ACTIVE_TO\", $shortFormatActiveDates)\n                        :\n                            \"IF(EXTRACT(HOUR_SECOND FROM BE.ACTIVE_TO)>0, \".$DB->DateToCharFunction(\"BE.ACTIVE_TO\", \"FULL\").\", \".$DB->DateToCharFunction(\"BE.ACTIVE_TO\", \"SHORT\").\")\"\n                        ),\n                \"DATE_ACTIVE_FROM\"=>(\n                        $formatActiveDates\n                        ?\n                            $DB->DateToCharFunction(\"BE.ACTIVE_FROM\", $shortFormatActiveDates)\n                        :\n                            \"IF(EXTRACT(HOUR_SECOND FROM BE.ACTIVE_FROM)>0, \".$DB->DateToCharFunction(\"BE.ACTIVE_FROM\", \"FULL\").\", \".$DB->DateToCharFunction(\"BE.ACTIVE_FROM\", \"SHORT\").\")\"\n                        ),\n                \"DATE_ACTIVE_TO\"=>(\n                        $formatActiveDates\n                        ?\n                            $DB->DateToCharFunction(\"BE.ACTIVE_TO\", $shortFormatActiveDates)\n                        :\n                            \"IF(EXTRACT(HOUR_SECOND FROM BE.ACTIVE_TO)>0, \".$DB->DateToCharFunction(\"BE.ACTIVE_TO\", \"FULL\").\", \".$DB->DateToCharFunction(\"BE.ACTIVE_TO\", \"SHORT\").\")\"\n                        ),\n                \"SORT\"=>\"BE.SORT\",\n                \"NAME\"=>\"BE.NAME\",\n                \"PREVIEW_PICTURE\"=>\"BE.PREVIEW_PICTURE\",\n                \"PREVIEW_TEXT\"=>\"BE.PREVIEW_TEXT\",\n                \"PREVIEW_TEXT_TYPE\"=>\"BE.PREVIEW_TEXT_TYPE\",\n                \"DETAIL_PICTURE\"=>\"BE.DETAIL_PICTURE\",\n                \"DETAIL_TEXT\"=>\"BE.DETAIL_TEXT\",\n                \"DETAIL_TEXT_TYPE\"=>\"BE.DETAIL_TEXT_TYPE\",\n                \"SEARCHABLE_CONTENT\"=>\"BE.SEARCHABLE_CONTENT\",\n                \"WF_STATUS_ID\"=>\"BE.WF_STATUS_ID\",\n                \"WF_PARENT_ELEMENT_ID\"=>\"BE.WF_PARENT_ELEMENT_ID\",\n                \"WF_LAST_HISTORY_ID\"=>\"BE.WF_LAST_HISTORY_ID\",\n                \"WF_NEW\"=>\"BE.WF_NEW\",\n                \"LOCK_STATUS\"=>\"if (BE.WF_DATE_LOCK is null, 'green', if(DATE_ADD(BE.WF_DATE_LOCK, interval \".$MAX_LOCK.\" MINUTE)<now(), 'green', if(BE.WF_LOCKED_BY=\".$uid.\", 'yellow', 'red')))\",\n                \"WF_LOCKED_BY\"=>\"BE.WF_LOCKED_BY\",\n                \"WF_DATE_LOCK\"=>$DB->DateToCharFunction(\"BE.WF_DATE_LOCK\"),\n                \"WF_COMMENTS\"=>\"BE.WF_COMMENTS\",\n                \"IN_SECTIONS\"=>\"BE.IN_SECTIONS\",\n                \"SHOW_COUNTER\"=>\"BE.SHOW_COUNTER\",\n                \"SHOW_COUNTER_START\"=>$DB->DateToCharFunction(\"BE.SHOW_COUNTER_START\"),\n                \"CODE\"=>\"BE.CODE\",\n                \"TAGS\"=>\"BE.TAGS\",\n                \"XML_ID\"=>\"BE.XML_ID\",\n                \"EXTERNAL_ID\"=>\"BE.XML_ID\",\n                \"TMP_ID\"=>\"BE.TMP_ID\",\n                \"USER_NAME\"=>\"concat('(',U.LOGIN,') ',ifnull(U.NAME,''),' ',ifnull(U.LAST_NAME,''))\",\n                \"LOCKED_USER_NAME\"=>\"concat('(',UL.LOGIN,') ',ifnull(UL.NAME,''),' ',ifnull(UL.LAST_NAME,''))\",\n                \"CREATED_USER_NAME\"=>\"concat('(',UC.LOGIN,') ',ifnull(UC.NAME,''),' ',ifnull(UC.LAST_NAME,''))\",\n                \"LANG_DIR\"=>\"L.DIR\",\n                \"LID\"=>\"B.LID\",\n                \"IBLOCK_TYPE_ID\"=>\"B.IBLOCK_TYPE_ID\",\n                \"IBLOCK_CODE\"=>\"B.CODE\",\n                \"IBLOCK_NAME\"=>\"B.NAME\",\n                \"IBLOCK_EXTERNAL_ID\"=>\"B.XML_ID\",\n                \"DETAIL_PAGE_URL\"=>\"B.DETAIL_PAGE_URL\",\n                \"LIST_PAGE_URL\"=>\"B.LIST_PAGE_URL\",\n                \"CANONICAL_PAGE_URL\"=>\"B.CANONICAL_PAGE_URL\",\n                \"CREATED_DATE\"=>$DB->DateFormatToDB(\"YYYY.MM.DD\", \"BE.DATE_CREATE\"),\n                \"BP_PUBLISHED\"=>\"if(BE.WF_STATUS_ID = 1, 'Y', 'N')\",\n            );\n        unset($shortFormatActiveDates);\n        unset($formatActiveDates);\n\n        $bDistinct = false;\n\n        CIBlockElement::PrepareGetList(\n                $arIblockElementFields,\n                $arJoinProps,\n                $bOnlyCount,\n                $bDistinct,\n\n                $arSelectFields,\n                $sSelect,\n                $arAddSelectFields,\n\n                $arFilter,\n                $sWhere,\n                $sSectionWhere,\n                $arAddWhereFields,\n\n                $arGroupBy,\n                $sGroupBy,\n\n                $arOrder,\n                $arSqlOrder,\n                $arAddOrderByFields,\n\n                $arIBlockFilter,\n                $arIBlockMultProps,\n                $arIBlockConvProps,\n                $arIBlockAllProps,\n                $arIBlockNumProps,\n                $arIBlockLongProps\n            );\n\n        $arFilterIBlocks = isset($arFilter[\"IBLOCK_ID\"])? array($arFilter[\"IBLOCK_ID\"]): array();\n        //******************FROM PART********************************************\n        $sFrom = \"\";\n        foreach($arJoinProps[\"FPS\"] as $iblock_id => $iPropCnt)\n        {\n            $sFrom .= \"\\t\\t\\tINNER JOIN b_iblock_element_prop_s\".$iblock_id.\" FPS\".$iPropCnt.\" ON FPS\".$iPropCnt.\".IBLOCK_ELEMENT_ID = BE.ID\\n\";\n            $arFilterIBlocks[$iblock_id] = $iblock_id;\n        }\n\n        foreach($arJoinProps[\"FP\"] as $propID => $db_prop)\n        {\n            $i = $db_prop[\"CNT\"];\n\n            if($db_prop[\"bFullJoin\"])\n                $sFrom .= \"\\t\\t\\tINNER JOIN b_iblock_property FP\".$i.\" ON FP\".$i.\".IBLOCK_ID = B.ID AND \".\n                    (\n                        IntVal($propID)>0?\n                        \" FP\".$i.\".ID=\".IntVal($propID).\"\\n\":\n                        \" FP\".$i.\".CODE='\".$DB->ForSQL($propID, 200).\"'\\n\"\n                    );\n            else\n                $sFrom .= \"\\t\\t\\tLEFT JOIN b_iblock_property FP\".$i.\" ON FP\".$i.\".IBLOCK_ID = B.ID AND \".\n                    (\n                        IntVal($propID)>0?\n                        \" FP\".$i.\".ID=\".IntVal($propID).\"\\n\":\n                        \" FP\".$i.\".CODE='\".$DB->ForSQL($propID, 200).\"'\\n\"\n                    );\n\n            if($db_prop[\"IBLOCK_ID\"])\n                $arFilterIBlocks[$db_prop[\"IBLOCK_ID\"]] = $db_prop[\"IBLOCK_ID\"];\n        }\n\n        foreach($arJoinProps[\"FPV\"] as $propID => $db_prop)\n        {\n            $i = $db_prop[\"CNT\"];\n\n            if($db_prop[\"MULTIPLE\"]==\"Y\")\n                $bDistinct = true;\n\n            if($db_prop[\"VERSION\"]==2)\n                $strTable = \"b_iblock_element_prop_m\".$db_prop[\"IBLOCK_ID\"];\n            else\n                $strTable = \"b_iblock_element_property\";\n\n            if($db_prop[\"bFullJoin\"])\n                $sFrom .= \"\\t\\t\\tINNER JOIN \".$strTable.\" FPV\".$i.\" ON FPV\".$i.\".IBLOCK_PROPERTY_ID = FP\".$db_prop[\"JOIN\"].\".ID AND FPV\".$i.\".IBLOCK_ELEMENT_ID = BE.ID\\n\";\n            else\n                $sFrom .= \"\\t\\t\\tLEFT JOIN \".$strTable.\" FPV\".$i.\" ON FPV\".$i.\".IBLOCK_PROPERTY_ID = FP\".$db_prop[\"JOIN\"].\".ID AND FPV\".$i.\".IBLOCK_ELEMENT_ID = BE.ID\\n\";\n\n            if($db_prop[\"IBLOCK_ID\"])\n                $arFilterIBlocks[$db_prop[\"IBLOCK_ID\"]] = $db_prop[\"IBLOCK_ID\"];\n        }\n\n        foreach($arJoinProps[\"FPEN\"] as $propID => $db_prop)\n        {\n            $i = $db_prop[\"CNT\"];\n\n            if($db_prop[\"VERSION\"] == 2 && $db_prop[\"MULTIPLE\"] == \"N\")\n            {\n                if($db_prop[\"bFullJoin\"])\n                    $sFrom .= \"\\t\\t\\tINNER JOIN b_iblock_property_enum FPEN\".$i.\" ON FPEN\".$i.\".PROPERTY_ID = \".$db_prop[\"ORIG_ID\"].\" AND FPS\".$db_prop[\"JOIN\"].\".PROPERTY_\".$db_prop[\"ORIG_ID\"].\" = FPEN\".$i.\".ID\\n\";\n                else\n                    $sFrom .= \"\\t\\t\\tLEFT JOIN b_iblock_property_enum FPEN\".$i.\" ON FPEN\".$i.\".PROPERTY_ID = \".$db_prop[\"ORIG_ID\"].\" AND FPS\".$db_prop[\"JOIN\"].\".PROPERTY_\".$db_prop[\"ORIG_ID\"].\" = FPEN\".$i.\".ID\\n\";\n            }\n            else\n            {\n                if($db_prop[\"bFullJoin\"])\n                    $sFrom .= \"\\t\\t\\tINNER JOIN b_iblock_property_enum FPEN\".$i.\" ON FPEN\".$i.\".PROPERTY_ID = FPV\".$db_prop[\"JOIN\"].\".IBLOCK_PROPERTY_ID AND FPV\".$db_prop[\"JOIN\"].\".VALUE_ENUM = FPEN\".$i.\".ID\\n\";\n                else\n                    $sFrom .= \"\\t\\t\\tLEFT JOIN b_iblock_property_enum FPEN\".$i.\" ON FPEN\".$i.\".PROPERTY_ID = FPV\".$db_prop[\"JOIN\"].\".IBLOCK_PROPERTY_ID AND FPV\".$db_prop[\"JOIN\"].\".VALUE_ENUM = FPEN\".$i.\".ID\\n\";\n            }\n\n            if($db_prop[\"IBLOCK_ID\"])\n                $arFilterIBlocks[$db_prop[\"IBLOCK_ID\"]] = $db_prop[\"IBLOCK_ID\"];\n        }\n\n        foreach($arJoinProps[\"BE\"] as $propID => $db_prop)\n        {\n            $i = $db_prop[\"CNT\"];\n\n            $sFrom .= \"\\t\\t\\tLEFT JOIN b_iblock_element BE\".$i.\" ON BE\".$i.\".ID = \".\n                (\n                    $db_prop[\"VERSION\"]==2 && $db_prop[\"MULTIPLE\"]==\"N\"?\n                    \"FPS\".$db_prop[\"JOIN\"].\".PROPERTY_\".$db_prop[\"ORIG_ID\"]\n                    :\"FPV\".$db_prop[\"JOIN\"].\".VALUE_NUM\"\n                ).\n                (\n                    $arFilter[\"SHOW_HISTORY\"] != \"Y\"?\n                    \" AND ((BE.WF_STATUS_ID=1 AND BE.WF_PARENT_ELEMENT_ID IS NULL)\".($arFilter[\"SHOW_NEW\"]==\"Y\"? \" OR BE.WF_NEW='Y'\": \"\").\")\":\n                    \"\"\n                ).\"\\n\";\n\n            if($db_prop[\"bJoinIBlock\"])\n                $sFrom .= \"\\t\\t\\tLEFT JOIN b_iblock B\".$i.\" ON B\".$i.\".ID = BE\".$i.\".IBLOCK_ID\\n\";\n\n            if($db_prop[\"bJoinSection\"])\n                $sFrom .= \"\\t\\t\\tLEFT JOIN b_iblock_section BS\".$i.\" ON BS\".$i.\".ID = BE\".$i.\".IBLOCK_SECTION_ID\\n\";\n\n            if($db_prop[\"IBLOCK_ID\"])\n                $arFilterIBlocks[$db_prop[\"IBLOCK_ID\"]] = $db_prop[\"IBLOCK_ID\"];\n        }\n\n        foreach($arJoinProps[\"BE_FPS\"] as $iblock_id => $db_prop)\n        {\n            $sFrom .= \"\\t\\t\\tLEFT JOIN b_iblock_element_prop_s\".$iblock_id.\" JFPS\".$db_prop[\"CNT\"].\" ON JFPS\".$db_prop[\"CNT\"].\".IBLOCK_ELEMENT_ID = BE\".$db_prop[\"JOIN\"].\".ID\\n\";\n\n            if($db_prop[\"IBLOCK_ID\"])\n                $arFilterIBlocks[$db_prop[\"IBLOCK_ID\"]] = $db_prop[\"IBLOCK_ID\"];\n        }\n\n        foreach($arJoinProps[\"BE_FP\"] as $propID => $db_prop)\n        {\n            $i = $db_prop[\"CNT\"];\n            list($propID, $link) = explode(\"~\", $propID, 2);\n\n            if($db_prop[\"bFullJoin\"])\n                $sFrom .= \"\\t\\t\\tINNER JOIN b_iblock_property JFP\".$i.\" ON JFP\".$i.\".IBLOCK_ID = BE\".$db_prop[\"JOIN\"].\".IBLOCK_ID AND \".\n                    (\n                        IntVal($propID)>0?\n                        \" JFP\".$i.\".ID=\".IntVal($propID).\"\\n\":\n                        \" JFP\".$i.\".CODE='\".$DB->ForSQL($propID, 200).\"'\\n\"\n                    );\n            else\n                $sFrom .= \"\\t\\t\\tLEFT JOIN b_iblock_property JFP\".$i.\" ON JFP\".$i.\".IBLOCK_ID = BE\".$db_prop[\"JOIN\"].\".IBLOCK_ID AND \".\n                    (\n                        IntVal($propID)>0?\n                        \" JFP\".$i.\".ID=\".IntVal($propID).\"\\n\":\n                        \" JFP\".$i.\".CODE='\".$DB->ForSQL($propID, 200).\"'\\n\"\n                    );\n\n            if($db_prop[\"IBLOCK_ID\"])\n                $arFilterIBlocks[$db_prop[\"IBLOCK_ID\"]] = $db_prop[\"IBLOCK_ID\"];\n        }\n\n        foreach($arJoinProps[\"BE_FPV\"] as $propID => $db_prop)\n        {\n            $i = $db_prop[\"CNT\"];\n            list($propID, $link) = explode(\"~\", $propID, 2);\n\n            if($db_prop[\"MULTIPLE\"]==\"Y\")\n                $bDistinct = true;\n\n            if($db_prop[\"VERSION\"]==2)\n                $strTable = \"b_iblock_element_prop_m\".$db_prop[\"IBLOCK_ID\"];\n            else\n                $strTable = \"b_iblock_element_property\";\n\n            if($db_prop[\"bFullJoin\"])\n                $sFrom .= \"\\t\\t\\tINNER JOIN \".$strTable.\" JFPV\".$i.\" ON JFPV\".$i.\".IBLOCK_PROPERTY_ID = JFP\".$db_prop[\"JOIN\"].\".ID AND JFPV\".$i.\".IBLOCK_ELEMENT_ID = BE\".$db_prop[\"BE_JOIN\"].\".ID\\n\";\n            else\n                $sFrom .= \"\\t\\t\\tLEFT JOIN \".$strTable.\" JFPV\".$i.\" ON JFPV\".$i.\".IBLOCK_PROPERTY_ID = JFP\".$db_prop[\"JOIN\"].\".ID AND JFPV\".$i.\".IBLOCK_ELEMENT_ID = BE\".$db_prop[\"BE_JOIN\"].\".ID\\n\";\n\n            if($db_prop[\"IBLOCK_ID\"])\n                $arFilterIBlocks[$db_prop[\"IBLOCK_ID\"]] = $db_prop[\"IBLOCK_ID\"];\n        }\n\n        foreach($arJoinProps[\"BE_FPEN\"] as $propID => $db_prop)\n        {\n            $i = $db_prop[\"CNT\"];\n            list($propID, $link) = explode(\"~\", $propID, 2);\n\n            if($db_prop[\"VERSION\"] == 2 && $db_prop[\"MULTIPLE\"] == \"N\")\n            {\n                if($db_prop[\"bFullJoin\"])\n                    $sFrom .= \"\\t\\t\\tINNER JOIN b_iblock_property_enum JFPEN\".$i.\" ON JFPEN\".$i.\".PROPERTY_ID = \".$db_prop[\"ORIG_ID\"].\" AND JFPS\".$db_prop[\"JOIN\"].\".PROPERTY_\".$db_prop[\"ORIG_ID\"].\" = JFPEN\".$i.\".ID\\n\";\n                else\n                    $sFrom .= \"\\t\\t\\tLEFT JOIN b_iblock_property_enum JFPEN\".$i.\" ON JFPEN\".$i.\".PROPERTY_ID = \".$db_prop[\"ORIG_ID\"].\" AND JFPS\".$db_prop[\"JOIN\"].\".PROPERTY_\".$db_prop[\"ORIG_ID\"].\" = JFPEN\".$i.\".ID\\n\";\n            }\n            else\n            {\n                if($db_prop[\"bFullJoin\"])\n                    $sFrom .= \"\\t\\t\\tINNER JOIN b_iblock_property_enum JFPEN\".$i.\" ON JFPEN\".$i.\".PROPERTY_ID = JFPV\".$db_prop[\"JOIN\"].\".IBLOCK_PROPERTY_ID AND JFPV\".$db_prop[\"JOIN\"].\".VALUE_ENUM = JFPEN\".$i.\".ID\\n\";\n                else\n                    $sFrom .= \"\\t\\t\\tLEFT JOIN b_iblock_property_enum JFPEN\".$i.\" ON JFPEN\".$i.\".PROPERTY_ID = JFPV\".$db_prop[\"JOIN\"].\".IBLOCK_PROPERTY_ID AND JFPV\".$db_prop[\"JOIN\"].\".VALUE_ENUM = JFPEN\".$i.\".ID\\n\";\n            }\n\n            if($db_prop[\"IBLOCK_ID\"])\n                $arFilterIBlocks[$db_prop[\"IBLOCK_ID\"]] = $db_prop[\"IBLOCK_ID\"];\n        }\n\n        if(strlen($arJoinProps[\"BES\"]))\n        {\n            $sFrom .= \"\\t\\t\\t\".$arJoinProps[\"BES\"].\"\\n\";\n        }\n\n        if(strlen($arJoinProps[\"FC\"]))\n        {\n            $sFrom .= \"\\t\\t\\t\".$arJoinProps[\"FC\"].\"\\n\";\n            $bDistinct = $bDistinct || (isset($arJoinProps[\"FC_DISTINCT\"]) && $arJoinProps[\"FC_DISTINCT\"] == \"Y\");\n        }\n\n        if($arJoinProps[\"RV\"])\n            $sFrom .= \"\\t\\t\\tLEFT JOIN b_rating_voting RV ON RV.ENTITY_TYPE_ID = 'IBLOCK_ELEMENT' AND RV.ENTITY_ID = BE.ID\\n\";\n        if($arJoinProps[\"RVU\"])\n            $sFrom .= \"\\t\\t\\tLEFT JOIN b_rating_vote RVU ON RVU.ENTITY_TYPE_ID = 'IBLOCK_ELEMENT' AND RVU.ENTITY_ID = BE.ID AND RVU.USER_ID = \".$uid.\"\\n\";\n        if($arJoinProps[\"RVV\"])\n            $sFrom .= \"\\t\\t\\t\".($arJoinProps[\"RVV\"][\"bFullJoin\"]? \"INNER\": \"LEFT\").\" JOIN b_rating_vote RVV ON RVV.ENTITY_TYPE_ID = 'IBLOCK_ELEMENT' AND RVV.ENTITY_ID = BE.ID\\n\";\n\n        //******************END OF FROM PART********************************************\n\n        $bCatalogSort = false;\n        if(count($arAddSelectFields)>0 || count($arAddWhereFields)>0 || count($arAddOrderByFields)>0)\n        {\n            if(CModule::IncludeModule(\"catalog\"))\n            {\n                $res_catalog = CCatalogProduct::GetQueryBuildArrays($arAddOrderByFields, $arAddWhereFields, $arAddSelectFields);\n                if(\n                    $sGroupBy==\"\"\n                    && !$bOnlyCount\n                    && !(is_object($this) && isset($this->strField))\n                )\n                    $sSelect .= $res_catalog[\"SELECT\"].\" \";\n                $sFrom .= str_replace(\"LEFT JOIN\", \"\\n\\t\\t\\tLEFT JOIN\", $res_catalog[\"FROM\"]).\"\\n\";\n                //$sWhere .= $res_catalog[\"WHERE\"].\" \"; moved to MkFilter\n                if(is_array($res_catalog[\"ORDER\"]) && count($res_catalog[\"ORDER\"]))\n                {\n                    $bCatalogSort = true;\n                    foreach($res_catalog[\"ORDER\"] as $i=>$val)\n                        $arSqlOrder[$i] = $val;\n                }\n            }\n        }\n\n        $i = array_search(\"CREATED_BY_FORMATTED\", $arSelectFields);\n        if ($i !== false)\n        {\n            if (\n                $sSelect\n                && $sGroupBy==\"\"\n                && !$bOnlyCount\n                && !(is_object($this) && isset($this->strField))\n            )\n            {\n                $sSelect .= \",UC.NAME UC_NAME, UC.LAST_NAME UC_LAST_NAME, UC.SECOND_NAME UC_SECOND_NAME, UC.EMAIL UC_EMAIL, UC.ID UC_ID, UC.LOGIN UC_LOGIN\";\n            }\n            else\n            {\n                unset($arSelectFields[$i]);\n            }\n        }\n\n        $sOrderBy = \"\";\n        foreach($arSqlOrder as $i=>$val)\n        {\n            if(strlen($val))\n            {\n                if($sOrderBy==\"\")\n                    $sOrderBy = \" ORDER BY \";\n                else\n                    $sOrderBy .= \",\";\n\n                $sOrderBy .= $val.\" \";\n            }\n        }\n\n        $sSelect = trim($sSelect, \", \\t\\n\\r\");\n        if(strlen($sSelect) <= 0)\n            $sSelect = \"0 as NOP \";\n\n        $bDistinct = $bDistinct || (isset($arFilter[\"INCLUDE_SUBSECTIONS\"]) && $arFilter[\"INCLUDE_SUBSECTIONS\"] == \"Y\");\n\n        if($bDistinct)\n            $sSelect = str_replace(\"%%_DISTINCT_%%\", \"DISTINCT\", $sSelect);\n        else\n            $sSelect = str_replace(\"%%_DISTINCT_%%\", \"\", $sSelect);\n\n        $sFrom = \"\n            b_iblock B\n            INNER JOIN b_lang L ON B.LID=L.LID\n            INNER JOIN b_iblock_element BE ON BE.IBLOCK_ID = B.ID\n            \".ltrim($sFrom, \"\\t\\n\")\n            .(in_array(\"USER_NAME\", $arSelectFields)? \"\\t\\t\\tLEFT JOIN b_user U ON U.ID=BE.MODIFIED_BY\\n\": \"\")\n            .(in_array(\"LOCKED_USER_NAME\", $arSelectFields)? \"\\t\\t\\tLEFT JOIN b_user UL ON UL.ID=BE.WF_LOCKED_BY\\n\": \"\")\n            .(in_array(\"CREATED_USER_NAME\", $arSelectFields) || in_array(\"CREATED_BY_FORMATTED\", $arSelectFields)? \"\\t\\t\\tLEFT JOIN b_user UC ON UC.ID=BE.CREATED_BY\\n\": \"\").\"\n        \";\n\n        $strSql = \"\n            FROM \".$sFrom.\"\n            WHERE 1=1 \"\n            .$sWhere.\"\n            \".$sGroupBy.\"\n        \";\n\n        if(isset($this) && is_object($this) && isset($this->strField))\n        {\n            $this->sFrom = $sFrom;\n            $this->sWhere = $sWhere;\n            return \"SELECT \".$sSelect.$strSql;\n        }\n\n        if($bOnlyCount)\n        {\n            $res = $DB->Query(\"SELECT \".$sSelect.$strSql, false, \"FILE: \".__FILE__.\"<br> LINE: \".__LINE__);\n            $res = $res->Fetch();\n            return $res[\"CNT\"];\n        }\n\n        if(is_array($arNavStartParams))\n        {\n            $nTopCount = intval($arNavStartParams[\"nTopCount\"]);\n            $nElementID = intval($arNavStartParams[\"nElementID\"]);\n\n            if($nTopCount > 0)\n            {\n                $strSql = \"SELECT \".$sSelect.$strSql.$sOrderBy.\" LIMIT \".$nTopCount;\n                $res = $DB->Query($strSql);\n            }\n            elseif(\n                $nElementID > 0\n                && $sGroupBy == \"\"\n                && $sOrderBy != \"\"\n                && strpos($sSelect, \"BE.ID\") !== false\n                && !$bCatalogSort\n            )\n            {\n                $nPageSize = intval($arNavStartParams[\"nPageSize\"]);\n\n                if($nPageSize > 0)\n                {\n                    $DB->Query(\"SET @rank_e=0\");\n\n                    $DB->Query(\"SET @rank_r=0\");\n                    $DB->Query(\"\n                        SELECT\n                            \".$sSelect.\"\n                            ,@rank_r:=@rank_r+1 AS rank1\n                            ,if (BE.ID = \".$nElementID.\", @rank_e:=@rank_r, null) rank2\n                        \".$strSql.$sOrderBy.\"\n                    \");\n\n                    $DB->Query(\"SET @rank_r=0\");\n                    $res = $DB->Query(\"\n                        SELECT *\n                        FROM (\n                            SELECT\n                                \".$sSelect.\"\n                                ,@rank_r:=@rank_r+1 AS RANK\n                            \".$strSql.$sOrderBy.\"\n                            LIMIT 18446744073709551615\n                        ) el0\n                        WHERE el0.RANK between @rank_e-$nPageSize and @rank_e+$nPageSize\n                    \");\n                }\n                else\n                {\n                    $DB->Query(\"SET @rank=0\");\n                    $res = $DB->Query(\"\n                        SELECT *\n                        FROM (\n                            SELECT\n                                \".$sSelect.\"\n                                ,@rank:=@rank+1 AS RANK\n                            \".$strSql.$sOrderBy.\"\n                            LIMIT 18446744073709551615\n                        ) el0\n                        WHERE el0.ID = \".$nElementID.\"\n                    \");\n                }\n            }\n            else\n            {\n                if($sGroupBy == \"\")\n                {\n                    $res_cnt = $DB->Query(\"SELECT COUNT(\".($bDistinct? \"DISTINCT BE.ID\": \"'x'\").\") as C \".$strSql);\n                    $res_cnt = $res_cnt->Fetch();\n                    $cnt = $res_cnt[\"C\"];\n                }\n                else\n                {\n                    $res_cnt = $DB->Query(\"SELECT 'x' \".$strSql);\n                    $cnt = $res_cnt->SelectedRowsCount();\n                }\n\n                $strSql = \"SELECT \".$sSelect.$strSql.$sOrderBy;\n                $res = new CDBResult();\n                $res->NavQuery($strSql, $cnt, $arNavStartParams);\n            }\n        }\n        else//if(is_array($arNavStartParams))\n        {\n            $strSql = \"SELECT \".$sSelect.$strSql.$sOrderBy;\n            $res = $DB->Query($strSql, false, \"FILE: \".__FILE__.\"<br> LINE: \".__LINE__);\n        }\n\n        $res = new CIBlockResult($res);\n        $res->SetIBlockTag($arFilterIBlocks);\n        $res->arIBlockMultProps = $arIBlockMultProps;\n        $res->arIBlockConvProps = $arIBlockConvProps;\n        $res->arIBlockAllProps  = $arIBlockAllProps;\n        $res->arIBlockNumProps = $arIBlockNumProps;\n        $res->arIBlockLongProps = $arIBlockLongProps;\n\n        return $res;\n    }\n\n\n\r\nКак можно догадаться, этот метод получает из БД список элементов инфоблока, и для получения списка не требуется создания экземпляра класса CIBlockElement. Однако, чтобы добавить элемент инфоблока, обязательно нужно состояние, и только для того, чтобы записать инфо о последней произошедшей ошибке в публичное свойство класса.\n\r\nВ старом API очень активно используются такие глобальные переменные, как $APPLICATION, $USER, $DB. Они являются экземплярами определенных классов, и в документации раньше гордо звались синглтонами, правда сейчас я не нашел уже этих слов.\r\nДля того, чтобы сгенерировать ошибку, например, в обработчиках событий, нужно воспользоваться методом $APPLICATION->ThrowException(), который на самом деле исключения не бросает.\n    public function ThrowException($msg, $id = false)\n    {\n        $this->ResetException();\n        if(is_object($msg) && (is_subclass_of($msg, 'CApplicationException') || (strtolower(get_class($msg))=='capplicationexception')))\n            $this->LAST_ERROR = $msg;\n        else\n            $this->LAST_ERROR = new CApplicationException($msg, $id);\n    }\n\n\r\nИ да — вся эта красота до сих пор используется при разработке новых проектов, т.к. D7 пока еще не поддерживает всех возможностей старого API. Тот же модуль инфоблоков до сих пор позволяет выполнять только выборку сущностей, причем не целиком. Создать новый элемент, или обновить существующий с помощью нового API пока нельзя.\n\r\nНовое API уже несколько отличается от старого. Во-первых, весь код из нового ядра разложен по неймспейсам, где прослеживается четкая зависимость от модуля. Например, аналог CIBlockElement::GetList из нового ядра — Bitrix\\Iblock\\ElementTable::getList, где корневое пространство имен — это имя вендора, а следующее — имя модуля. Для того, чтобы это работало, в битриксе написали свой автозагрузчик \\Bitrix\\Main\\Loader::autoLoad, который совсем не совместим с PSR-0/4.\n\nСобственно, код автозагрузчика в виде одной функции        public static function autoLoad($className)\n\t{\n\t\t$file = ltrim($className, \"\\\\\");    // fix web env\n\t\t$file = strtr($file, static::ALPHA_UPPER, static::ALPHA_LOWER);\n\n\t\tstatic $documentRoot = null;\n\t\tif ($documentRoot === null)\n\t\t\t$documentRoot = static::getDocumentRoot();\n\n\t\tif (isset(self::$arAutoLoadClasses[$file]))\n\t\t{\n\t\t\t$pathInfo = self::$arAutoLoadClasses[$file];\n\t\t\tif ($pathInfo[\"module\"] != \"\")\n\t\t\t{\n\t\t\t\t$m = $pathInfo[\"module\"];\n\t\t\t\t$h = isset(self::$arLoadedModulesHolders[$m]) ? self::$arLoadedModulesHolders[$m] : 'bitrix';\n\t\t\t\tinclude_once($documentRoot.\"/\".$h.\"/modules/\".$m.\"/\" .$pathInfo[\"file\"]);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\trequire_once($documentRoot.$pathInfo[\"file\"]);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (preg_match(\"#[^\\\\\\\\/a-zA-Z0-9_]#\", $file))\n\t\t\treturn;\n\n\t\tif (substr($file, -5) == \"table\")\n\t\t\t$file = substr($file, 0, -5);\n\n\t\t$file = str_replace('\\\\', '/', $file);\n\t\t$arFile = explode(\"/\", $file);\n\n\t\tif ($arFile[0] === \"bitrix\")\n\t\t{\n\t\t\tarray_shift($arFile);\n\n\t\t\tif (empty($arFile))\n\t\t\t\treturn;\n\n\t\t\t$module = array_shift($arFile);\n\t\t\tif ($module == null || empty($arFile))\n\t\t\t\treturn;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$module1 = array_shift($arFile);\n\t\t\t$module2 = array_shift($arFile);\n\t\t\tif ($module1 == null || $module2 == null || empty($arFile))\n\t\t\t\treturn;\n\n\t\t\t$module = $module1.\".\".$module2;\n\t\t}\n\n\t\tif (!isset(self::$arLoadedModulesHolders[$module]))\n\t\t\treturn;\n\n\t\t$filePath = $documentRoot.\"/\".self::$arLoadedModulesHolders[$module].\"/modules/\".$module.\"/lib/\".implode(\"/\", $arFile).\".php\";\n\n\t\tif (file_exists($filePath))\n\t\t\trequire_once($filePath);\n\t}\n\n\n\r\nВ новом API прослеживается большая любовь к Singleton: \n\n\\Bitrix\\Main\\Application::getInstance — инстанс приложения\n\\Bitrix\\Main\\Config\\Configuration::getInstance — инстанс класса для управления конфигами\n\\Bitrix\\Main\\Page\\Asset::getInstance — инстанс Asset-менеджера\n\\Bitrix\\Main\\EventManager::getInstance — менеджер событий\n\n\r\nВозможно, это все в будущем обрастет своим ServiceLayer'ом (есть некий \\Bitrix\\Main\\ServiceManager в новом ядре, который пока не используется и не документирован). Но надежды пока мало.\n\r\nORM — еще одно из нововведений D7, и это уже что-то, что может претендовать на звание настоящей модели! Отличить класс сущности ORM от любого другого класса можно по его имени. Класс сущности всегда должен заканчиваться на Table (ElementTable, SectionTable, OrderTable и т.д.). Причем, парадокс, имя файла с классом ORM сущности не должно заканчиваться на Table. К примеру, для ElementTable мы должны создать файл element.php. Ниже на скрине представлено содержимое директории lib (только в этой директории работает автозагрузка D7) модуля iblock. Попробуйте на глазок определить, что есть сущности ORM, а что — обычные классы с бизнес-логикой.\n\n\n\r\nORM, по большому счету, пока что не представляет из себя ничего особенного. Оно позволяет описывать таблицы БД в виде классов и позволяет выполнять запросы к этим таблицам, связывать их между собой. Никакого ActiveRecord и Repository нет и не предвидится. \n\nПример типичного класса сущности ORM для элемента инфоблока<?\nnamespace Bitrix\\Iblock;\n\nuse Bitrix\\Main;\nuse Bitrix\\Main\\Localization\\Loc;\n\nLoc::loadMessages(__FILE__);\n\n/**\n * Class ElementTable\n *\n * Fields:\n * <ul>\n * <li> ID int mandatory\n * <li> TIMESTAMP_X datetime optional\n * <li> MODIFIED_BY int optional\n * <li> DATE_CREATE datetime optional\n * <li> CREATED_BY int optional\n * <li> IBLOCK_ID int mandatory\n * <li> IBLOCK_SECTION_ID int optional\n * <li> ACTIVE bool optional default 'Y'\n * <li> ACTIVE_FROM datetime optional\n * <li> ACTIVE_TO datetime optional\n * <li> SORT int optional default 500\n * <li> NAME string(255) mandatory\n * <li> PREVIEW_PICTURE int optional\n * <li> PREVIEW_TEXT string optional\n * <li> PREVIEW_TEXT_TYPE enum ('text', 'html') optional default 'text'\n * <li> DETAIL_PICTURE int optional\n * <li> DETAIL_TEXT string optional\n * <li> DETAIL_TEXT_TYPE enum ('text', 'html') optional default 'text'\n * <li> SEARCHABLE_CONTENT string optional\n * <li> WF_STATUS_ID int optional default 1\n * <li> WF_PARENT_ELEMENT_ID int optional\n * <li> WF_NEW enum ('N', 'Y') optional\n * <li> WF_LOCKED_BY int optional\n * <li> WF_DATE_LOCK datetime optional\n * <li> WF_COMMENTS string optional\n * <li> IN_SECTIONS bool optional default 'N'\n * <li> XML_ID string(255) optional\n * <li> CODE string(255) optional\n * <li> TAGS string(255) optional\n * <li> TMP_ID string(40) optional\n * <li> WF_LAST_HISTORY_ID int optional\n * <li> SHOW_COUNTER int optional\n * <li> SHOW_COUNTER_START datetime optional\n * <li> PREVIEW_PICTURE_FILE reference to {@link \\Bitrix\\File\\FileTable}\n * <li> DETAIL_PICTURE_FILE reference to {@link \\Bitrix\\File\\FileTable}\n * <li> IBLOCK reference to {@link \\Bitrix\\Iblock\\IblockTable}\n * <li> WF_PARENT_ELEMENT reference to {@link \\Bitrix\\Iblock\\IblockElementTable}\n * <li> IBLOCK_SECTION reference to {@link \\Bitrix\\Iblock\\IblockSectionTable}\n * <li> MODIFIED_BY_USER reference to {@link \\Bitrix\\User\\UserTable}\n * <li> CREATED_BY_USER reference to {@link \\Bitrix\\User\\UserTable}\n * <li> WF_LOCKED_BY_USER reference to {@link \\Bitrix\\User\\UserTable}\n * </ul>\n *\n * @package Bitrix\\Iblock\n **/\n\nclass ElementTable extends Main\\Entity\\DataManager\n{\n\tconst TYPE_TEXT = 'text';\n\tconst TYPE_HTML = 'html';\n\n\t/**\n\t * Returns DB table name for entity.\n\t *\n\t * @return string\n\t */\n\tpublic static function getTableName()\n\t{\n\t\treturn 'b_iblock_element';\n\t}\n\n\t/**\n\t * Returns entity map definition.\n\t *\n\t * @return array\n\t */\n\tpublic static function getMap()\n\t{\n\t\treturn array(\n\t\t\t'ID' => new Main\\Entity\\IntegerField('ID', array(\n\t\t\t\t'primary' => true,\n\t\t\t\t'autocomplete' => true,\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_ID_FIELD'),\n\t\t\t)),\n\t\t\t'TIMESTAMP_X' => new Main\\Entity\\DatetimeField('TIMESTAMP_X', array(\n\t\t\t\t'default_value' => new Main\\Type\\DateTime(),\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_TIMESTAMP_X_FIELD'),\n\t\t\t)),\n\t\t\t'MODIFIED_BY' => new Main\\Entity\\IntegerField('MODIFIED_BY', array(\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_MODIFIED_BY_FIELD'),\n\t\t\t)),\n\t\t\t'DATE_CREATE' => new Main\\Entity\\DatetimeField('DATE_CREATE', array(\n\t\t\t\t'default_value' => new Main\\Type\\DateTime(),\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_DATE_CREATE_FIELD'),\n\t\t\t)),\n\t\t\t'CREATED_BY' => new Main\\Entity\\IntegerField('CREATED_BY', array(\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_CREATED_BY_FIELD'),\n\t\t\t)),\n\t\t\t'IBLOCK_ID' => new Main\\Entity\\IntegerField('IBLOCK_ID', array(\n\t\t\t\t'required' => true,\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_IBLOCK_ID_FIELD'),\n\t\t\t)),\n\t\t\t'IBLOCK_SECTION_ID' => new Main\\Entity\\IntegerField('IBLOCK_SECTION_ID', array(\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_IBLOCK_SECTION_ID_FIELD'),\n\t\t\t)),\n\t\t\t'ACTIVE' => new Main\\Entity\\BooleanField('ACTIVE', array(\n\t\t\t\t'values' => array('N', 'Y'),\n\t\t\t\t'default_value' => 'Y',\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_ACTIVE_FIELD'),\n\t\t\t)),\n\t\t\t'ACTIVE_FROM' => new Main\\Entity\\DatetimeField('ACTIVE_FROM', array(\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_ACTIVE_FROM_FIELD'),\n\t\t\t)),\n\t\t\t'ACTIVE_TO' => new Main\\Entity\\DatetimeField('ACTIVE_TO', array(\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_ACTIVE_TO_FIELD'),\n\t\t\t)),\n\t\t\t'SORT' => new Main\\Entity\\IntegerField('SORT', array(\n\t\t\t\t'default_value' => 500,\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_SORT_FIELD'),\n\t\t\t)),\n\t\t\t'NAME' => new Main\\Entity\\StringField('NAME', array(\n\t\t\t\t'required' => true,\n\t\t\t\t'validation' => array(__CLASS__, 'validateName'),\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_NAME_FIELD'),\n\t\t\t)),\n\t\t\t'PREVIEW_PICTURE' => new Main\\Entity\\IntegerField('PREVIEW_PICTURE', array(\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_PREVIEW_PICTURE_FIELD'),\n\t\t\t)),\n\t\t\t'PREVIEW_TEXT' => new Main\\Entity\\TextField('PREVIEW_TEXT', array(\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_PREVIEW_TEXT_FIELD'),\n\t\t\t)),\n\t\t\t'PREVIEW_TEXT_TYPE' => new Main\\Entity\\EnumField('PREVIEW_TEXT_TYPE', array(\n\t\t\t\t'values' => array(self::TYPE_TEXT, self::TYPE_HTML),\n\t\t\t\t'default_value' => self::TYPE_TEXT,\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_PREVIEW_TEXT_TYPE_FIELD'),\n\t\t\t)),\n\t\t\t'DETAIL_PICTURE' => new Main\\Entity\\IntegerField('DETAIL_PICTURE', array(\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_DETAIL_PICTURE_FIELD'),\n\t\t\t)),\n\t\t\t'DETAIL_TEXT' => new Main\\Entity\\TextField('DETAIL_TEXT', array(\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_DETAIL_TEXT_FIELD'),\n\t\t\t)),\n\t\t\t'DETAIL_TEXT_TYPE' => new Main\\Entity\\EnumField('DETAIL_TEXT_TYPE', array(\n\t\t\t\t'values' => array(self::TYPE_TEXT, self::TYPE_HTML),\n\t\t\t\t'default_value' => self::TYPE_TEXT,\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_DETAIL_TEXT_TYPE_FIELD'),\n\t\t\t)),\n\t\t\t'SEARCHABLE_CONTENT' => new Main\\Entity\\TextField('SEARCHABLE_CONTENT', array(\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_SEARCHABLE_CONTENT_FIELD'),\n\t\t\t)),\n\t\t\t'WF_STATUS_ID' => new Main\\Entity\\IntegerField('WF_STATUS_ID', array(\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_WF_STATUS_ID_FIELD'),\n\t\t\t)),\n\t\t\t'WF_PARENT_ELEMENT_ID' => new Main\\Entity\\IntegerField('WF_PARENT_ELEMENT_ID', array(\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_WF_PARENT_ELEMENT_ID_FIELD'),\n\t\t\t)),\n\t\t\t'WF_NEW' => new Main\\Entity\\EnumField('WF_NEW', array(\n\t\t\t\t'values' => array('N', 'Y'),\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_WF_NEW_FIELD'),\n\t\t\t)),\n\t\t\t'WF_LOCKED_BY' => new Main\\Entity\\IntegerField('WF_LOCKED_BY', array(\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_WF_LOCKED_BY_FIELD'),\n\t\t\t)),\n\t\t\t'WF_DATE_LOCK' => new Main\\Entity\\DatetimeField('WF_DATE_LOCK', array(\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_WF_DATE_LOCK_FIELD'),\n\t\t\t)),\n\t\t\t'WF_COMMENTS' => new Main\\Entity\\TextField('WF_COMMENTS', array(\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_WF_COMMENTS_FIELD'),\n\t\t\t)),\n\t\t\t'IN_SECTIONS' => new Main\\Entity\\BooleanField('IN_SECTIONS', array(\n\t\t\t\t'values' => array('N', 'Y'),\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_IN_SECTIONS_FIELD'),\n\t\t\t)),\n\t\t\t'XML_ID' => new Main\\Entity\\StringField('XML_ID', array(\n\t\t\t\t'validation' => array(__CLASS__, 'validateXmlId'),\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_XML_ID_FIELD'),\n\t\t\t)),\n\t\t\t'CODE' => new Main\\Entity\\StringField('CODE', array(\n\t\t\t\t'validation' => array(__CLASS__, 'validateCode'),\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_CODE_FIELD'),\n\t\t\t)),\n\t\t\t'TAGS' => new Main\\Entity\\StringField('TAGS', array(\n\t\t\t\t'validation' => array(__CLASS__, 'validateTags'),\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_TAGS_FIELD'),\n\t\t\t)),\n\t\t\t'TMP_ID' => new Main\\Entity\\StringField('TMP_ID', array(\n\t\t\t\t'validation' => array(__CLASS__, 'validateTmpId'),\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_TMP_ID_FIELD'),\n\t\t\t)),\n\t\t\t'SHOW_COUNTER' => new Main\\Entity\\IntegerField('SHOW_COUNTER', array(\n\t\t\t\t'default_value' => 0,\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_SHOW_COUNTER_FIELD'),\n\t\t\t)),\n\t\t\t'SHOW_COUNTER_START' => new Main\\Entity\\DatetimeField('SHOW_COUNTER_START', array(\n\t\t\t\t'title' => Loc::getMessage('ELEMENT_ENTITY_SHOW_COUNTER_START_FIELD'),\n\t\t\t)),\n\t\t\t'PREVIEW_PICTURE_FILE' => new Main\\Entity\\ReferenceField(\n\t\t\t\t'PREVIEW_PICTURE_FILE',\n\t\t\t\t'Bitrix\\File\\File',\n\t\t\t\tarray('=this.PREVIEW_PICTURE' => 'ref.ID'),\n\t\t\t\tarray('join_type' => 'LEFT')\n\t\t\t),\n\t\t\t'DETAIL_PICTURE_FILE' => new Main\\Entity\\ReferenceField(\n\t\t\t\t'DETAIL_PICTURE_FILE',\n\t\t\t\t'Bitrix\\File\\File',\n\t\t\t\tarray('=this.DETAIL_PICTURE' => 'ref.ID'),\n\t\t\t\tarray('join_type' => 'LEFT')\n\t\t\t),\n\t\t\t'IBLOCK' => new Main\\Entity\\ReferenceField(\n\t\t\t\t'IBLOCK',\n\t\t\t\t'Bitrix\\Iblock\\Iblock',\n\t\t\t\tarray('=this.IBLOCK_ID' => 'ref.ID'),\n\t\t\t\tarray('join_type' => 'LEFT')\n\t\t\t),\n\t\t\t'WF_PARENT_ELEMENT' => new Main\\Entity\\ReferenceField(\n\t\t\t\t'WF_PARENT_ELEMENT',\n\t\t\t\t'Bitrix\\Iblock\\Element',\n\t\t\t\tarray('=this.WF_PARENT_ELEMENT_ID' => 'ref.ID'),\n\t\t\t\tarray('join_type' => 'LEFT')\n\t\t\t),\n\t\t\t'IBLOCK_SECTION' => new Main\\Entity\\ReferenceField(\n\t\t\t\t'IBLOCK_SECTION',\n\t\t\t\t'Bitrix\\Iblock\\Section',\n\t\t\t\tarray('=this.IBLOCK_SECTION_ID' => 'ref.ID'),\n\t\t\t\tarray('join_type' => 'LEFT')\n\t\t\t),\n\t\t\t'MODIFIED_BY_USER' => new Main\\Entity\\ReferenceField(\n\t\t\t\t'MODIFIED_BY_USER',\n\t\t\t\t'Bitrix\\User\\User',\n\t\t\t\tarray('=this.MODIFIED_BY' => 'ref.ID'),\n\t\t\t\tarray('join_type' => 'LEFT')\n\t\t\t),\n\t\t\t'CREATED_BY_USER' => new Main\\Entity\\ReferenceField(\n\t\t\t\t'CREATED_BY_USER',\n\t\t\t\t'Bitrix\\User\\User',\n\t\t\t\tarray('=this.CREATED_BY' => 'ref.ID'),\n\t\t\t\tarray('join_type' => 'LEFT')\n\t\t\t),\n\t\t\t'WF_LOCKED_BY_USER' => new Main\\Entity\\ReferenceField(\n\t\t\t\t'WF_LOCKED_BY_USER',\n\t\t\t\t'Bitrix\\User\\User',\n\t\t\t\tarray('=this.WF_LOCKED_BY' => 'ref.ID'),\n\t\t\t\tarray('join_type' => 'LEFT')\n\t\t\t),\n\t\t);\n\t}\n\t/**\n\t * Returns validators for NAME field.\n\t *\n\t * @return array\n\t */\n\tpublic static function validateName()\n\t{\n\t\treturn array(\n\t\t\tnew Main\\Entity\\Validator\\Length(null, 255),\n\t\t);\n\t}\n\n\t/**\n\t * Returns validators for XML_ID field.\n\t *\n\t * @return array\n\t */\n\tpublic static function validateXmlId()\n\t{\n\t\treturn array(\n\t\t\tnew Main\\Entity\\Validator\\Length(null, 255),\n\t\t);\n\t}\n\t/**\n\t * Returns validators for CODE field.\n\t *\n\t * @return array\n\t */\n\tpublic static function validateCode()\n\t{\n\t\treturn array(\n\t\t\tnew Main\\Entity\\Validator\\Length(null, 255),\n\t\t);\n\t}\n\t/**\n\t * Returns validators for TAGS field.\n\t *\n\t * @return array\n\t */\n\tpublic static function validateTags()\n\t{\n\t\treturn array(\n\t\t\tnew Main\\Entity\\Validator\\Length(null, 255),\n\t\t);\n\t}\n\t/**\n\t * Returns validators for TMP_ID field.\n\t *\n\t * @return array\n\t */\n\tpublic static function validateTmpId()\n\t{\n\t\treturn array(\n\t\t\tnew Main\\Entity\\Validator\\Length(null, 40),\n\t\t);\n\t}\n\n\t/**\n\t * Add iblock element.\n\t *\n\t * @param array $data\t\t\tElement data.\n\t * @return Main\\Entity\\AddResult\n\t */\n\tpublic static function add(array $data)\n\t{\n\t\t$result = new Main\\Entity\\AddResult();\n\t\t$result->addError(new Main\\Entity\\EntityError(\n\t\t\tLoc::getMessage('ELEMENT_ENTITY_MESS_ADD_BLOCKED')\n\t\t));\n\t\treturn $result;\n\t}\n\n\t/**\n\t * Updates iblock element by primary key.\n\t *\n\t * @param mixed $primary\t\tElement primary key.\n\t * @param array $data\t\t\tElement data.\n\t * @return Main\\Entity\\UpdateResult\n\t */\n\tpublic static function update($primary, array $data)\n\t{\n\t\t$result = new Main\\Entity\\UpdateResult();\n\t\t$result->addError(new Main\\Entity\\EntityError(\n\t\t\tLoc::getMessage('ELEMENT_ENTITY_MESS_UPDATE_BLOCKED')\n\t\t));\n\t\treturn $result;\n\t}\n\n\t/**\n\t * Deletes iblock element by primary key.\n\t *\n\t * @param mixed $primary\t\tElement primary key.\n\t * @return Main\\Entity\\DeleteResult\n\t */\n\tpublic static function delete($primary)\n\t{\n\t\t$result = new Main\\Entity\\DeleteResult();\n\t\t$result->addError(new Main\\Entity\\EntityError(\n\t\t\tLoc::getMessage('ELEMENT_ENTITY_MESS_DELETE_BLOCKED')\n\t\t));\n\t\treturn $result;\n\t}\n}\n\n\nИ пример работы с этой сущностью//Выборка данных\n$dbElements = Bitrix\\Iblock\\ElementTable::query()\n\t->setFilter(['IBLOCK_ID' => CATALOG_IBLOCK_ID, 'ACTIVE' => 'Y'])\n\t->setSelect(['NAME', 'ID', 'DETAIL_PAGE_URL', 'DATE_ACTIVE_FROM'])\n\t->addSelect('IBLOCK_SECTION_ID', 'PARENT_SECTION')\n\t->setLimit(10)\n\t->addOrder('id', 'DESC')\n\t->exec();\n\nwhile ($arElement = $dbElements->fetch()) {\n\techo \"{$arElement['NAME']} - \" . $arElement['DATE_ACTIVE_FROM']->format('d.m.Y H:i:s');\n}\n\n//Добавление записи\n$addResult = Bitrix\\Iblock\\ElementTable::add([\n\t'NAME' => 'Название нового элемента', \n\t'IBLOCK_ID' => CATALOG_IBLOCK_ID\n]);\nif (!$addResult->isSuccess()) {\n\techo implode('<br>' ,$addResult->getErrorMessages());\n}\n\n\n\n\r\nБитрикс очень гордится своим модулем Highload-блоков, который полностью написан с использованием D7. \r\nРаньше у них в качестве хранилища произвольного набора информации были только инфоблоки. Инфоблок, для тех кто не в курсе, это такая сущность, которая в БД хранится как комплекс из нескольких таблиц (1 таблица на «базовые» поля элемента инфоблока и до 2х таблиц на свойства элемента инфоблока). Все базовые поля элементов всех инфоблоков хранятся в одной таблице. Если у вас будет 15 инфоблоков, в каждом из которых будет по 500к элементов, все эти элементы по факту будут находиться в одной таблице. Дополнительные свойства элементов инфоблоков джойнятся из других таблиц. Если это инфоблоки первой версии, то все свойства всех инфоблоков также лежат в одной таблице, а в случае с инфоблоками 2.0 (привет, маркетинг) — свойства каждого инфоблока уже разделены по разным таблицам. \r\nИ все это дело естественно очень сильно тормозило уже на относительно небольших наборах данных. 400к элементов в одном инфоблоке уже довольно сильно затормаживают работу админки. Маркетологи в битриксе подумали, и запилили Highload-блоки! Разница в реализации между обычными инфоблоками — минимальная. Теперь для каждого highload-блока создается своя таблица + дополнительно создается еще одна таблица для хранения множественных значений. Обычный подход в создании обычной таблицы в БД они назвали гордым именем highload просто потому, что оно тормозит меньше обычных инфоблоков!\r\nКроме того, внутри модуля, для того, чтобы он работал согласно D7, классы сущностей генерируются динамически и eval'ятся на каждом хите. Вот такой вот highload.\nПосмотреть на этоpublic static function compileEntity($hlblock)\n    {\n        global $USER_FIELD_MANAGER;\n\n        // generate entity & data manager\n        $fieldsMap = array();\n\n        // add ID\n        $fieldsMap['ID'] = array(\n            'data_type' => 'integer',\n            'primary' => true,\n            'autocomplete' => true\n        );\n\n        // build datamanager class\n        $entity_name = $hlblock['NAME'];\n        $entity_data_class = $hlblock['NAME'];\n\n        if (!preg_match('/^[a-z0-9_]+$/i', $entity_data_class))\n        {\n            throw new Main\\SystemException(sprintf(\n                'Invalid entity name `%s`.', $entity_data_class\n            ));\n        }\n\n        $entity_data_class .= 'Table';\n\n        if (class_exists($entity_data_class))\n        {\n            // rebuild if it's already exists\n            Entity\\Base::destroy($entity_data_class);\n        }\n        else\n        {\n            $entity_table_name = $hlblock['TABLE_NAME'];\n\n            // make with an empty map\n            $eval = '\n                class '.$entity_data_class.' extends '.__NAMESPACE__.'\\DataManager\n                {\n                    public static function getTableName()\n                    {\n                        return '.var_export($entity_table_name, true).';\n                    }\n\n                    public static function getMap()\n                    {\n                        return '.var_export($fieldsMap, true).';\n                    }\n\n                    public static function getHighloadBlock()\n                    {\n                        return '.var_export($hlblock, true).';\n                    }\n                }\n            ';\n\n            eval($eval);\n        }\n\n        // then configure and attach fields\n        /** @var \\Bitrix\\Main\\Entity\\DataManager $entity_data_class */\n        $entity = $entity_data_class::getEntity();\n\n        $uFields = $USER_FIELD_MANAGER->getUserFields('HLBLOCK_'.$hlblock['ID']);\n\n        foreach ($uFields as $uField)\n        {\n            if ($uField['MULTIPLE'] == 'N')\n            {\n                // just add single field\n                $field = $USER_FIELD_MANAGER->getEntityField($uField, $uField['FIELD_NAME']);\n                $entity->addField($field);\n\n                foreach ($USER_FIELD_MANAGER->getEntityReferences($uField, $field) as $reference)\n                {\n                    $entity->addField($reference);\n                }\n            }\n            else\n            {\n                // build utm entity\n                static::compileUtmEntity($entity, $uField);\n            }\n        }\n\n        return Entity\\Base::getInstance($entity_name);\n    }\n\n\r\nЧерт бы с ним, но эти самые хайлоад блоки ну никак не могут выступать в роли альтернативы обычным инфоблокам. Оказывается их придумали только для того, чтобы хранить справочные не-иерархичные данные. Кроме того, модуль до сих пор не поддерживает таких нужных функций в админке, как фильтрация по полю типа «Дата», нельзя обозвать сущность HLблока каким-то человекопонятным названием, чтобы администратор каждый раз не пугался при входе на страницу редактирования сущности, к примеру, BrandReference. Все это наводит на мысль, что задумывалось это дело ради альтернативы медленным инфоблокам, но допилить не успели (или не осилили, или пошло в разрез с интересами бизнеса), и в итоге зарелизили полу-готовый функционал как новую фишку, а маркетологи причесали и красиво подали эту идею.\n\nC — Controller, или компонент\r\nОбычный компонент в битриксе можно сравнить с виджетами из Yii. Это некий контейнер, обособленный от всех остальных контейнеров, который принимает на вход какие-то параметры, делает какую-то работу, и с результатом работы подключает вьюху. Разработчики битрикс глубоко убеждены, что те компоненты, которые они предоставляют из коробки, решают большинство задач, которые стоят перед их коллегами. Но, как водится, разработчикам же ничего не нравится всегда, и возможностей стандартных компонентов им всегда «немного» не хватает. Поэтому Битриксоиды решили дать разработчикам возможность модифицировать результат работы компонента… с помощью вьюхи. В директории шаблона компонента можно создать файлик result_modifier.php, в котором можно дополнить результат работы компонента своими данными. И если вы вдруг захотите использовать эти данные в другом шаблоне, вам придется скопипастить этот файлик (ну или заинклюдить этот файл из другого шаблона). Меня всегда мучал вопрос — для чего этот пафос? Почему бы не добавить горку запросов прям в php шаблоне? Разница то невеликая получается.\r\nЧто это я про шаблоны в разделе о контроллерах… \n\r\nВ битрикс есть 2 вида компонентов 2.0 (опять привет маркетинг) — обычные и комплексные. Обычный компонент — это виджет. Комплексный компонент — это некий контроллер+роутер, который на основании URL понимает, какую именно страницу с набором виджетов нужно отобразить. Порядок работы примерно такой:\n\nв url написано /catalog/bolshaya-zelenaya-shapka.html\nс помощью mod_rewrite битрикс понимает, что для физического раздела /catalog нужно всегда подключать файл /catalog/index.php\nкомплексный компонент парсит url, и понимает, что нужно подключить детальную страницу товара, назовем ее detail\nкомплексный компонент собирает параметры, которые необходимы для работы его дочерних компонентов\nкомплексный компонент подключает свой шаблон detail.php, внутри которого прописано подключение дочерних обычных компонентов\n\n\r\nС виду не очень красиво, но работать можно. Однако не все так просто… Если вы с помощью визуального редактора поменяете параметры комплексного компонента, то файлик с настройками адресации (urlrewrite.php) будет перезаписан системой. Причем, если вы вдруг что-то неправильно там написали для других страниц обязательно что-то сломается без какого-либо предупреждения. На практике это может привести к потере работоспособности целых разделов сайта.\r\nНастройка параметров комплексного компонента может превратиться в муку. У одного такого компонента с легкостью может быть сотня входных параметров, просто потому, что нужно настраивать параметры дочерних компонентов.\r\nКомплексный компонент — он вроде бы и роутер. Однако все те маршруты, которые вы создадите в этом компоненте, не попадут в автоматически генерируемый sitemap.xml. Эти ссылки не попадут в модуль поиска. У вас не будет никакой возможности сгенерировать адрес до маршрута извне (например, вы хотите поставить ссылку на детальную страницу бренда где-то в сайдбаре, и нельзя будет обратиться к роутеру с просьбой сгенерить этот URL).\n\r\nВообще говоря, функции роутера в битриксе толком не выполняет никто. В инфоблоках есть возможность настроить шаблон URL для страницы инфоблока, страницы раздела инфоблока и страницы элемента инфоблока. Все, у инфоблоков больше не может быть страниц. \r\nДля форумов есть возможность настроить шаблоны некоторых страниц. Для блогов можно настроить. Возможно, где-то еще можно что-то настроить… все это настолько децентрализовано, что собрать воедино это все становится достаточно тяжело.\n\r\nОбычные компоненты — это чуть более простые сущности, чем комплексные компоненты. Их задача — принять на вход набор параметров, обработать их, скормить результат работы шаблону и закешировать все и вся. \r\nВся логика компонента содержится в файле component.php. С 12й версии битрикса (ныне актуальной является версия 16, 4 года прошло) появилась возможность «использовать ООП» в компонентах. Это нововведение заключается в том, что вместо файла component.php можно создать файл class.php, в котором можно вместо обычной лапши написать класс, унаследованный от \\CBitrixComponent. И это был большой шаг вперед, т.к. появилась возможность наследовать компоненты и не использовать result_modifier.php вообще, и не практиковать копипасту, если нужно вдруг сильно кастомизировать компонент. Но и тут до сих пор все не так ладно. Из всего набора компонентов, лишь процентов 25-30 могут похвастать наличием класса в своем арсенале. Причем добрая половина из них просто не даст вам возможности расширить себя полностью, т.к. написаны они часто нелогично. \r\nК слову, добрые люди пытаются стандартизировать, как-то помочь разработчикам в написании компонентов, и есть соответствующий инструментарий\n\nV — View, или шаблоны\r\nШаблоны в битриксе можно разделить на несколько типов:\n\nШаблоны обычных и комплексных компонентов 2.0\nШаблоны сайта\nШаблоны прочих сущностей (почтовых отправлений, выпусков рассылок, веб-форм, генераторов экспортов и еще много чего)\n\n\r\nВ шаблонах компонентов есть даже возможность использовать шаблонизаторы. В принципе можно подключить любой шаблонизатор, но из коробки никаких вспомогательных инструментов нет. Если кому надо, есть у меня пара ссылок на расширения для twig и blade, которые работают и вполне себе используются на продакшене. Но и тут битриксоиды извратились. Шаблонизатор можно использовать только с компонентами. Подключить шаблонизатор к рендереру шаблона сайта, или других сущностей не получится, т.к. нет там никакого рендерера.\n\r\nВ шаблонах компонентов раздражает еще момент с их размещением. Компонент подключается с помощью нехитрой контструкции\n$APPLICATION->IncludeComponent('bitrix:catalog.section', 'template_name', []);\n\r\nВ качестве второго параметра идет название шаблона компонента. Так вот в зависимости от различных условий, местоположение этого шаблона может быть в самых неожиданных местах:\n\nbitrix/components/bitrix/catalog.section/templates/template_name\nlocal/components/bitrix/catalog.section/templates/template_name\nbitrix/templates/.default/components/bitrix/catalog.section/template_name\nbitrix/templates/site_template/components/bitrix/catalog.section/template_name\nlocal/templates/.default/components/bitrix/catalog.section/template_name\nlocal/templates/site_template/components/bitrix/catalog.section/template_name\nbitrix/components/bitrix/catalog/templates/.default/bitrix/catalog.section/template_name\nlocal/templates/site_template/components/bitrix/catalog/.default/bitrix/catalog.section/template_name\n\r\nИ это еще я не все варианты перечислил…\n\r\nШаблон сайта можно рассматривать как набор файлов: header.php, footer.php (да, у сайта обязательно они должны быть), description.php (системное описание шаблона сайта), template_styles.css (стили шаблона сайта), директорию с шаблонами компонентов и еще группка менее значимых файликов. И все. И никак на это не повлиять, ничего с этим не сделать. Невозможно подцепить шаблонизатор.\n\r\nПро другие шаблоны и говорить нечего. Они либо просто хранятся в БД в виде верстки со включением в нее каких-то «переменных» данных, либо это тупой php файл, который делает всю работу, от выборки параметров из БД до вывода информации. Для примера, можно посмотреть на генератор YML файла для маркета. Нет никакого смысла выкладывать его сюда, просто потому, что он достаточно большой, около 2к строк. Кому нужно, тот нагуглит, лежит он в /bitrix/modules/catalog/load/yandex_run.php\n\nФайловая природа\n\r\nКак стало ясно выше, в битриксе с архитектурой все не очень хорошо. Но есть у битрикса и еще один важный аспект архитектуры.\r\nБитрикс — это на половину файловая CMS. Очень многие вещи управляются с помощью каких-то файлов:\n\nНужна страница — создай файл\nНужен набор страниц — создай файл и подключи там компонент, работающий с инфоблоками\nНужно задать title для страницы — отредактируй файл\nНужно задать title для всех страниц раздела — создай специальный файл .section.php в корне этого раздела\nНужно отредактировать права — редактируй файл .access.php\nНастройки до инициализации системы — в файле dbconn.php, .settings.php и .settings_extra.php\nresult_modifier.php, component_epilog.php, init.php, .parameters.php, .description.php ....\n\n\r\nИ таких специальных файликов по битриксу разбросано огромное множество. С одной стороны, это дает определенную гибкость при работе с системой. С другой — это может превратиться в муку как для разработчика, так и для менеджера сайта. Файлы страниц иногда превращаются в кашу из php кода, верстки, и подключаемых компонентов. В результате визуальный редактор может некорректно распарсить этот файл, и при редактировании он запросто может экранировать php теги в некоторых местах, что приведет к неработоспособности страницы. Вы скажете — не надо писать php код в таких файлах? Да, я знаю. Но битрикс очень часто и безальтернативно заставляет так поступить.\r\nДа и в голове нужно держать постоянно информацию о том, что это за файлы такие, и какие данные они могут содержать. В разных файлах должны содержаться разные данные с разной структурой, и нужно ее помнить для каждого варианта. В документации искать это каждый раз — тяжелый труд.\n\nВ дополнение к вышесказанному\n\r\nМожно бесконечно жаловаться на то, как все плохо устроено в битриксе. На мой взгляд, все эти жалобы можно охарактеризовать одним словосочетанием — «как-то не до конца». И действительно, если вдруг битриксоиды анонсируют какую-то фишку, то они ее релизят как-то не полностью, не доделывают, не доводят до ума. Примеров — масса:\n\nвнедрили ORM — не доделали, пользоваться в полной мере нельзя\nсделали автозагрузчик, он работает только в модулях, и не по стандартам\nдали возможность подключить шаблонизатор, но использовать его можно не везде, и не полностью\nи т.д. и т.п.\n\n\r\nВ двух словах попробую охарактеризовать остальные проблемы, с которым приходится сталкиваться ежедневно. \n\nАдминка\r\nЕсли кто-то работал с админкой, создавал свои страницы в административной части так, как это предлагает делать битрикс, тот меня поймет. Это просто ад. Для тех, кто не в курсе — битрикс предлагает для каждой страницы использовать файл с лапшой. Например, страница детального просмотра заказа в админке в исполнении разработчиков битрикса занимает over 4к строк. У меня IDE начинает подтормаживать при просмотре содержимого этого файла. Там тебе и php, и js, и html. Хорошо хоть, от SQL избавились, хотя я уверен, что на других административных страницах он есть.\r\nИ что мешало сделать работу административных страниц с помощью тех же компонентов — не понятно. Кастомизировать большинство административных страниц просто нет никакой возможности. В случае с компонентами это можно было бы сделать в два счета.\r\nК слову, добрые люди сделали модуль, который поможет вам в построении административных страниц\n\njs-фреймворк\r\nВ битриксе есть js составляющая, которая выполняет роль некоего клиентского фреймворка. Никто из разработчиков не любит его по нескольким причинам: \n\nон почти не документирован\nон монструозен\nон во многом дублирует привычный многим jquery\n\n\r\nБитрикс очень часто использует его в своих компонентах, тем самым вызывая еще больше гнева разработчиков. Ядро этой библиотеки в минифицированном виде составляет 85кб, что очень не мало. Избежать его подключения не получится, если вы хотите использовать все возможности битрикса (композит, asset-management).\n\nДух копипасты\r\nВ последнее время все меньше, но все равно довольно часто, битрикс заставляет что-то копипастить. Хочешь модифицировать работу компонента — скопипасти. Хочешь создать свой шаблон выгрузки — скопипасти системный и допили. Хочешь сделать почти такой же шаблон, который у тебя есть — скопипасти и немного измени его. И об этом даже рассказывают на курсах для начинающих разработчиков. Слов нет.\n\nAsset-management и CDN\r\nОчень «мне нравится» в битриксе способ управления ресурсами. В принципе, можно зарегистрировать набор определенных «библиотек». Каждая библиотека — это набор css/js файлов, который может зависеть от каких-то других библиотек. Если подключить какую-то библиотеку на страницу, то перед ее подключением будут разрешены все зависимости и все зависимые библиотеки будут вставлены на страницу. Все вроде бы хорошо, только каждый ресурс будет вставлен в виде отдельного файла в тег script или link. И благодаря этому существуют сайты, у которых подключено по 30-50 скриптов и столько же файлов стилей. \r\nГовно-вопрос, сказали в битриксе, и сделали волшебную галочку, которая объединяет все эти файлы в один. И появились сайты, где вместо 50 скриптов стало 2, каждый по 300-500кб. Какое-то время назад это объединение работало с ошибками и объединяло одни и те же ресурсы по нескольку раз, но сейчас вроде бы исправили.\r\nИ тут битриксоиды выкрутились — прикрутили возможность выгрузить все ресурсы на CDN сервер. Который вечно отваливается…\r\nПотом появился Google Pagespeed Insights, который рекомендовал опустить все ресурсы в нижнюю часть страницы. И в битриксе опять сделали волшебную галочку, которая тупо опускает все ресурсы в body, если они не помечены специальным атрибутом. \r\nА еще они вместе с коробкой распространяют минифицированные версии своих скриптов, которые подключаются при использовании еще одной волшебной галочки в админке. \r\nВ общем, никаких вам scss, никаких TypeScript. Хотите грамотно управлять ресурсами — не используйте встроенную систему битрикса, юзайте webpack, который можно спокойно с битриксом подружить.\n\nМногосайтовость / многоязычность\r\nЭто, наверно, самая страшная головная боль разработчика, которая продолжается с момента зарождения продукта. Нельзя просто так взять, и создать многоязычный сайт. А если вам нужен многоязычный каталог с разными ценами и валютами — то это превращается в муку, за которую нужно еще и выложить кругленькую сумму (на покупку доп.лицензии для очередной языковой версии сайта придется раскошелиться). \r\nЕсли вы создаете многоязычный и многовалютный сайт, то будьте готовы к тому, что битрикс будет очень агрессивно сопротивляться этому. Настройки многосайтовости децентрализованы по всей админке. Каждая сущность в админке имеет свою зависимость от языковой версии сайта. Какие-то сущности могут вообще не поддерживать зависимости от сайта/языка, а какие-то имеют только однозначную привязку к языку, так что придется эту сущность продублировать и потом поддерживать.\r\nВ базовом варианте, чтобы заставить инфоблок работать в нескольких языках, вам придется создать дубль этого инфоблока. Но на практике никто этого не делает, и пытается придумать свои способы хранения одной сущности централизованно, разнося ее языкозависимые атрибуты по другим хранилищам.\r\nНельзя задать дефолтный язык при локализации. Если у вас есть языковая переменная, описывающая какую-то фразу на русском, и этой языковой переменной нет в английском исполнении, то на английском сайте будет показана пустая строка, и никак на это нельзя повлиять (во-многих случаях можно было бы оставить русскую фразу, чтобы не было пустот).\n\nМеханизм управления правами\r\nОчень замудрили с этой подсистемой. Часто бывает сложно разобраться, почему ты выдал права на просмотр какой-то сущности, а пользователь не может ими воспользоваться. Например, чтобы дать право на редактирование инфоблока, нужно дать доступ к директории /bitrix/admin, выдать права для конкретного инфоблока и выдать права в главном модуле. Чересчур много операций нужно сделать, чтобы выдать права для одной сущности. А если прав не хватает, то без ковыряния в исходниках никак не получится понять — почему.\n\nКонфигурирование\r\nВ битриксе нет централизованного хаба, который бы позволил управлять настройками системы. Настройки опять таки децентрализованы по всей системе. Опции есть в настройках модуля, в настройках компонентов, в COption (будучи не вынесенными в админку). В админке опции одного модуля могут быть разнесены по 3-4м разным страницам, которые находятся в совершенно разных местах. urlrewrite можно править через админку! Теперь еще и .settings и .settings_extra. Иногда совершенно не ясно, какие из них более приоритетны, очень часто не хватает пояснений для опций, непонятны взаимосвязи. Нет никакого нативного способа расшаривать конфигурацию между разработчиками. \r\nНастройки бывают очень нелогичными. Иногда доходит до абсурда… посмотрите компонент бигдаты — разве его сможет настроить неподготовленный человек?\n\nИнтеграция с 1С\r\nЭто тот пункт в списке фич битрикса, на который клюет достаточно большое количество заказчиков. Битрикс обещает в 2 клика настроить двустороннюю интеграцию сайта с 1С, которая будет мгновенно доставлять контент и документы от одной системы к другой.\r\nДа, оно действительно так и есть, но с несколькими оговорками. \r\nВо-первых, чтобы сделать интеграцию «из коробки» без дополнительных усилий, нужно сделать все именно так, как написано в документации битрикса — построить каталог на сайте по тем правилам, которые предлагает битрикс и построить каталог в 1С, которые требует битрикс. В идеале — создать вообще все с нуля, и тогда может быть, у вас все заработает из коробки.\r\nВо-вторых, Битрикс дружит не со всеми конфигурациями 1С из коробки. Стоит предварительно ознакомиться\r\nВ-третьих, идеального мира не бывает. Обычно у заказчика, который хочет сайт, уже есть розничный бизнес, а значит уже есть 1С, которая является огромной мусоркой. И эту мусорку приходится прокидывать на сайт. А чтобы на сайте не получилось такой же мусорки, требуется значительно доработать механизм обмена.\r\nОчень часто требования заказчика сильно расходятся с тем видением продукта, которое сформировано у команды Битрикса, и тогда доработка механизма обмена может быть достаточно дорогой, по трудоемкости сопоставимой с разработкой уникального модуля обмена под конкретный случай. \r\nПоэтому не нужно пытать иллюзий по поводу того, что вам удастся легко интегрировать сайт с 1С. Это все происки маркетологов.\n\r\nДоработка обмена с 1С — это тоже отдельная тема. За организацию обмена каталогом отвечает класс \\CIBlockCMLImport.- 5.7к строк. Один из главных методов, который чаще всего требует расширения — \\CIBlockCMLImport::ImportElement, содержит больше 1к строк. Достаточно раз унаследоваться, пару раз обновить продукт на протяжении длительного времени, и можно получить неработающий обмен с 1С. Поэтому часто разработчики не лезут в этот класс и пытаются как-то влезть в процесс импорта с помощью обработчиков событий. Работать с обработчиками событий в битриксе, особенно в модуле инфоблоков — тоже не очень приятное занятие, хотя бы из-за того, что однотипные события устроены не однородно, а некоторых событий просто не хватает. \r\nВ общем с этим дела обстоят также печально, как и ранее.\n\nНесогласованность\r\nМне порой кажется, что разработчики разных модулей не особенно то общаются между собой. Изучая исходники ядра натыкаешься на очень разнородные решения, которые можно было бы выполнить на одном движке, но они реализованы почему-то по разному. \r\nДля примера можно взять свойства элементов инфоблоков и UserFields. И та и другая сущность по факту является дополнительным полем для другой сущности. Она имеет тип, имеет значение и описание. Значение хранится в отдельной(ых) таблице(ах) БД, имеют примерно схожий интерфейс доступа к данным. Так почему бы не сделать для них одинаковый интерфейс?\r\nВот в конце марта обновился модуль sale до последней версии, и там тоже обещали произвольные свойства для заказов. Неужели там теперь новый, третий интерфейс для работы со расширенными свойствами сущности?\n\nБитрикс24\r\nЭто вообще отдельная тема для разговора. На почве этой системы часто возникает путаница. Есть 2 варианта исполнения Б24 — SaaS и Standlone. Есть маркетплейс для Б24, но в нем содержатся приложения только для SaaS версии! Если у вас коробочная версия, купленная за 200 кусков, вы не сможете поставить такое популярнейшие приложения, как конструктор документов, да и вообще вы не сможете на свой Битрикс24 поставить ни одно приложение из маркетплейса для Битрикс24. Вот такой парадокс.\r\nВместо этого в вашем Битрикс24 будет доступен маркетплейс от обычной версии. Там решений гораздо больше, но они сконцентрированы в основном вокруг Управления Сайтом, а не Б24.\n\r\nБитрикс24, как мне сказали в отделе технической поддержки, это целостная система. Если вы вмешиваетесь в работу стандартных компонентов системы, то будьте готовы, что эта функциональность сломается при последующих обновлениях. Битрикс не будет рассчитывать на то, что вы дорабатываете компоненты портала, и это несмотря на то, что они официально отправляют своих клиентов к партнерам\n\r\nК слову, дорабатывать компоненты в коробочной версии Б24 — та еще задачка. Компоненты, которые генерируют js код, который с помощью ajax обращается к php коду, который в ответ генерирует html+js. Это адовая смесь, в которую очень не хочется погружаться.\n\nДокументация\r\nДокументация по битриксу отстает от развития продукта на 1-1.5 года. Код очень слабо покрыт phpDoc'ами, и часто комментарий перед классом стоит исключительно «для галочки», будучи автоматически сгенерированным в IDE. \r\nСам стиль изложения документации в официальных источниках часто бывает слишком «вольным», а содержимое некоторых статей в документации может не иметь никакого отношения к самому битриксу. \r\nКурс разработчика имеет очень много информации, однако формат, в котором разработчика знакомят с возможностями системы, не дает того уровня восприятия, который требуется. Если вы зайдете в Cookbook Symfony, то там все разложено по полочкам, расписаны все необходимые аспекты в зависимости от версии. Тогда как в битриксе курс обучения разработчика содержит непонятно по какому принципу структурированную информацию по старому и новому ядру, которая подается сначала отдельно, а потом вперемешку, от чего у начинающих возникает головная боль.\n\nОрганизация процесса разработки\r\nИз-за специфичности системы не так уж просто организовать удобный процесс разработки. Не самая свежая версия редакции Бизнес (что была под рукой) после установки занимает, вдумайтесь, почти 530 мегабайт\n$ du -s *|sort -nr|cut -f 2-|while read a;do du -hs $a;done\n523M\tbitrix\n204K\tupload\n 64K\tbitrixsetup.php\n 56K\tdesktop_app\n 20K\treadme.html\n 20K\tlicense.html\n4,0K\tweb.config\n4,0K\turlrewrite.php\n4,0K\treadme.php\n4,0K\tlicense.php\n4,0K\tinstall.config\n4,0K\tindex.php\n\r\nИз этого объема добрая половина — это бинарники и установочники, которые в общем-то не нужны для версионного контроля. Вообще говоря, принято не версионировать битриксовое ядро. Разработчики Битрикса как бы сами гарантируют целостность ядра, управляют сами зависимостями версий разных модулей при обновлениях. Но это несет в себе сразу, как минимум, один большой минус — невозможно одной командой из версионного контроля развернуть полностью работающий проект, приходится собирать его по частям: исходники ядра доставать из битриксового бекапа, а исходники разработчиков — из git.\r\nС базой тоже все не ладно. Если сами вы можете использовать миграции при разработке, то битрикс накатывает обновления в базу с помощью обычных скриптов, которые вы не можете контролировать. Поэтому при обновлениях все равно придется перекидывать бекапы баз от центрального хоста разработки к другим разработчикам.\r\nДобрые люди, опять же, пилят инструменты, которые помогают это все организовать, но заставить битрикс следовать этим правилам к сожалению до сих пор не удается. \r\nОфициально битрикс разрешает иметь 2 копии одного дистрибутива. Один — для продакшена, второй для разработки. Если у вас несколько разработчиков на одном проекте — то вы, как бы, вне закона ) На самом деле, достаточно отрубить машине с битриксом входящие и исходящие подключения с/на www.bitrixsoft.com, и тогда можно наклепать сколь угодно много копий разработки, просто они не смогут самостоятельно обновляться.\n\nКоллеги\r\nИ последний вопрос, которого хотелось бы коснуться. \r\nВ связи с тем, что битрикс имеет низкий порог вхождения, среди компаний, которые предоставляют услуги на этом рынке очень много неквалифицированных кадров. Мне довелось повидать множество различных проектов за свою карьеру (суммарно более сотни), выполненных на 1С-Битрикс. Могу с уверенностью сказать, что 95% из них были выполнены «тяп-ляп». Очень редко попадались проекты, к разработке которых чувствовался подход, однако это были единицы. Это все очень печально.\n\nВыводы\r\nКонечно же, всех минусов в рамках одной статьи не рассмотреть. Каждый день натыкаешься на какие-то мелочи, которые ежедневно мешают работать. Но рассмотреть все такие мелочи просто невозможно, да и наверно ни к чему. \n\r\nКакие тут можно сделать выводы. Битрикс — крайне сложная система в связи с тем, что имеет непродуманную архитектуру, множество изъянов, которые так и продолжают жить в продукте на протяжении длительного времени. С другой стороны Битрикс — это достаточно простая система, которая для старта требует гораздо меньший уровень квалификации, в отличие от фреймворков. \r\nПоддержка этого продукта — весьма неблагодарное занятие, по сравнению с такими продуктами, как Symfony, Laravel, Yii. Продукт очень любит вставлять палки в колеса как неопытным, так и опытным разработчикам, что, в свою очередь, может отражаться и на стоимости услуг опытных разработчиков под Битрикс.\n\r\nЖалею ли я о том, что так много времени потратил на работу с этой системой? Скорее да, чем нет. Разумнее было бы потратить это время на изучение чего-то более правильного и более логичного (чем я стараюсь активно заниматься сейчас). Но так уж получилось, что некому было меня направить в правильное русло в начале моего пути. \n\r\nЕсли вы — начинающий php разработчик, то предпочтите Битриксу изучение фреймворков, таких как Symfony, Laravel, Yii, ZendFramework. Поверьте, в будущем это с лихвой окупится. Освоив любой из этих фреймворков вам не составит труда в будущем разрабатывать что-то под Битрикс. Если у вас нет выбора, то изучайте Битрикс, но в свободное время лучше все-таки пытаться погрузиться в мир фреймворков, чтобы поставить мозги на место.\n\r\nЕсли вы — разработчик со стажем в Битрикс, но без опыта в других фреймворках, то обязательно окунитесь в другой мир, вам откроется очень много новых и полезных знаний, которые помогут вам в написании гораздо более качественных решений под 1С-Битрикс. Старайтесь использовать решения из других фреймворков в своих проектах, благо сделать это совсем несложно благодаря компонентному подходу последних и composer.\n\r\nЕсли вы — заказчик, то не верьте маркетологам Битрикса. Ничего не будет так легко, как рассказывают в презенташках битрикса. И не вините в этом своих разработчиков, они тут не причем. Если вы хотите создать большой и сложный интернет-магазинище уровня эльдорадо/мвидео/спортмастер, то, возможно, Битрикс будет не самым лучшим выбором.\n\nUPD. Видно, что статью прочитали сотрудники битрикса. В разделе про Маркетинг я писал, что в разделе Архитектура в курсе разработчика Битрикс написаны маркетинговые призывы. Теперь их там нет. Даже опечатались, видимо, торопились очень.\n\n\r\nСпасибо  nook за наблюдательность и зоркий глаз :) "
]