[
   "Разрабатываем приложение на Golang + gRPC + gRPC Gateway",
   "Сегодня я хотел бы поделиться особенностью разработки сервисов на Golang вместе с протоколом gRPC. В этой статье я не буду рассказывать, что такое gRPC, protobuf и для чего они нужны, вместо этого я сосредоточусь на технической части.",
   "Мы напишем простое приложение на Golang, который в качестве транспортного протокола будет использовать gRPC, а так же с помощью gRPC Gateway мы подключим поддержку RESTful API. У нашего сервиса будет всего два ендпоинта, а именно:",
   "Создать пользователя",
   "Получить пользователя по идентификатору",
   "Давайте определим интерфейс для нашего сервиса, для этого нам нужно создать два protobuf файла, один для моделей, а другой для сервисов. Хорошей практикой является разделение моделей и сервисов в разные protobuf файлы, таким образом мы можем легко переиспользовать модели в других сервисах.",
   "Я намеренно разделил модель пользователя, на запись и чтение, чтобы показать как на стороне сервиса мы можем сгенерировать уникальный идентификатор.",
   "Обратите внимание на тип пользователя, который является перечислением. Перечисления в protobuf/syntax3 имеют ряд особенностей. Из интересного, например - нулевое значение должно быть первым элементом для совместимости с семантикой proto2, где первое значение перечисления всегда используется по умолчанию.",
   "Так же, рекомендуется, чтобы имя элемента перечисления начиналось с типа перечисления + имя элемента. Например при следующем определении возникнет конфликт имен пространств элементов перечисления: ",
   "Разобравшись с моделью, давайте перейдем к определию интерфейса сервиса:",
   "Мы импортировали \"google/api/annotations.proto\", которые содержат исходные определения интерфейсов Google API, для описания  RESTful API в protobuf.",
   "Теперь, когда мы описали интерфейс приложения, мы можем скомпилировать protobuf файлы под Golang. Для компиляции нам нужно установить следующие библиотеки:",
   "Другим вариантом, чтобы скомпилировать protobuf файлы под Golang, мы можем воспользоваться докер образом namely/protoc-all и тогда не нужно устанавливать дополнительные библиотеки. Опишем  файл docker-compose:",
   "Где:",
   "-o - директория, куда будут скомпилированы proto stubs.",
   "-i - путь к сторонним зависимостям, в нашем случае googleapis ",
   "-l - ЯП, в нашем случае Golang (go)",
   "флаг --with-gateway, для генерации RESTful API",
   "Когда protobuf файлы скомпилированы, мы можем приступить к написанию main файла, где собственно будет описан gRPC сервер.",
   "Запустим приложение и проверим как работают наши ендпоинты. Для тестирования RESTful API, вызовем следующие команды:",
   "Для тестирования gRPC ендпоинтов, нужно будет воспользоваться BloomRPC.",
   "Весь исходный код, доступен на github."
]