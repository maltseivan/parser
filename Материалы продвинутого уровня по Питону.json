[
   "Материалы продвинутого уровня по Питону",
   "В мире все примерно распределяется в соответствии с принципом Паретто. Меньшая часть — богатые, большая часть — бедные (читающий, ты входишь в золотой миллиард). Тоже касается и материалов о программировании. Порой очень сложно найти хоть что-нибудь не начального уровня.\n\r\nПосле прочтения Dive into Python или подобной ей и ознакомления с документацией возникает вопрос, а что читать дальше? Можно обратиться к списку книг на python.org. Там есть раздел Advanced Books, но в нем всего лишь 6 книг (седьмая не выходила), и только одну я бы назвал по-настоящему стоящей.\n\r\nК счастью, у Питона есть очень подробная и качественная документация. Но даже в ней многие темы либо только поверхностно затронуты, либо их очень сложно найти (потому что документация большая, и если не знаешь, куда смотреть, не найдешь).\n\r\nНиже собраны сложные материлы про Питон, его устройство и возможности. Все на английском (грех, не знать технический английский). Про Dive into Python я слукавил. Большинство приведенных материалов требуют хорошее знание Питона и наличие опыта программирования на нем.\n\n\n\nСтатьи из официальной документации\nData model\r\nБазовая статья про объекты в Питоне. Ее надо знать наизусть (правда-правда). Без нее дальнейшее понимание, как работает Питон, практически невозможно. Также хотелось бы заострить внимание на:\n\nImplementing Descriptors. По-моему, дескрипторы — это лучшая, непревзойденная, возможность Питона, но при этом самая недооцененая. Сейчас они, по большей степени, используются только в фреймворках. Надо будет, как-нибудь, написать, насколько дескрипторы упрощают разработку и улучшают качество кода.\nCustomizing attribute access. И первое, про что здесь надо прочитать, это про разницу __getattribute__ и __getattr__.\nSpecial method lookup for new-style classes. Важно: доступ к магическим методам происходит в обход __getattribute__, если вы только не вызываете их напрямую (len(obj) и obj.__len__()).\n\nExceptions\r\nВ исключениях надо разобраться с наследованием (PEP 352: Exceptions as New-Style Classes). В Питоне 2.4 Exception — это классический класс, не сабкласс object'а. В Питоне 2.5 Exception уже наследует BaseException(object), т.е. это уже новый класс. Также обратите внимание на то, что в версии 2.4 KeyboardInterrupt и SystemExit наследуют Exception, а в 2.5 — BaseException.\n\r\nЕще рекомендую прямо взять и сравнить (поставить два окна рядом) иерахию исключений в Питоне 2.4 и иерархию в Питоне 2.6 (по сравнению с 2.5 добавилось только несколько классов).\n\n\nСтатьи про классы, атрибуты и методы\nUnifying types and classes in Python 2.2, Guido van Rossum\r\nСтатья от создателя языка о том, что такое new-style classes. Думаю, не требуется писать, почему ее надо прочитать (лучше, несколько раз).\n\nThe Python 2.3 Method Resolution Order, Michele Simionato\r\nКак происходит вычисление порядка доступа к методам (MRO) и атрибутам при множественном наследовании. У новых классов можно получить через атрибут __mro__.\n\nShalabh Chaturvedi: \r\nОчень хорошие и большие книги-статьи + красиво сверстаны.\n\nPython Types and Objects\r\nКак соотносятся type и object.\n\nPython Attributes and Methods\r\nКак происходит доступ к атрибутам в новых классах, отличие функций и методов, описание дескрипторов и MRO.\n\nBe Pythonic\r\nКраткая, не столь важная статья, как писать код в стиле Питона (добавил только для того, чтобы перечислить все статьи автора).\n\n\nМетаклассы\r\nХотелось бы привести одну [очень известную] цитату о метаклассах:\n\n           English                             Русский\n[Metaclasses] are deeper magic      Метаклассы -- это сложная магия, \nthan 99% of users should ever       о которой 99% разработчиков даже \nworry about. If you wonder          не стоит беспокоиться. Если вы \nwhether you need them, you          спрашиваете, нужны ли вам \ndon't (the people who actually      метаклассы, знайте, они вам не\nneed them know with certainty       нужны (люди, которым они \nthat they need them, and don't      действительно нужны, абсолютно \nneed an explanation about why)      уверены в этом, и им не требуется \nTim Peters (c.l.p post 2002-12-22)  объяснение почему).\n\n                                    (очень плохо, что вы не знаете \n                                    английский, в этой статье ссылки\n                                    только на англоязычные материалы)\n\nПроще вставить как моноширинный, чем пытаться изобразить таблицей с ячейками без атрибута width, не говоря уж про стили. Я честно пытался минут 20.\n\r\nТак вот, это не так. Если вы не знаете метаклассы, вы не знаете Питон. Теперь, после мотивирования, можно и к статьям вернуться.\n\nCustomizing class creation\r\nОфициальная документация.\n\nPython Metaclasses: Who? Why? When?, Mike Fletcher, PDF\r\nМного практических примеров, как и зачем можно [но часто не нужно, авт.] использовать метаклассы.\n\nMetaclass programming in Python, Часть 2, Часть 3, David Mertz, Michele Simionato\r\nОчень подробные статьи, разбирается все по косточкам. Единственно НО: очень занудно и академично написано. Хотя вполне возможно, что это просто у меня предвзятое отношение к статьям на IBM DeveloperWorks.\n\nMetaclasses in Python 3000, PEP 3115\r\nМетаклассы в третьем Питоне. Основные отличия — возможность передавать kwargs прямо в определении класса class Foo(*bases, **kwargs) и поддержка функции  __prepare__, которая должна вернуть маппинг для атрибутов класса, например упорядоченный словарь.\n\r\nВ целом про метаклассы: знать, знать и еще раз знать. Но! Если вы решили их использовать, подумайте, потом еще раз подумайте и, все-таки, попробуйте обойтись без них ;-D.\n\n\nСтатьи на другие темы\nPython 401: Some Advanced Topics, PDF\r\nЛучшее и самое подробное объяснение интерполяции строк ('Hello, %s.' % username). Плюс итераторы, генераторы, дескрипторы, метаклассы, почему методы медленне функций (потому что при каждом вызове создается объект) и т.д.\n\nHow-To Guide for Descriptors, Raymond Hettinger\r\nКак работают дескрипроты, как их вызывать и использовать.\n\nDavid Beazley\r\nПишет очень хорошие, а главное, практические статьи. Только у него можно прочитать, как с помощью генераторов распарсить лог апача или как написать «операционную систему» на корутинах.\n\nInside the Python GIL\r\nКак работает Global Interpreter Lock и почему использование тредов в Питоне может замедлять программу.\n\nInside the New GIL (Python 3.2)\r\nОписание и тесты нового GIL, который будет в Питоне 3.2 (и может быть, будет портирован в 2.7).\n\nGenerator Tricks for Systems Programmers, Версия 2\r\nПрактическое использование генераторов и их преимущества (скорость + низкое потребление памяти).\n\nA Curious Course on Coroutines and Concurrency\r\nЧто такое корутины и почему надо четко отличать их от обычных генераторов (у них функции разные: одни выдают данные, другие их перерабатывают). В конце он напишет на них аналог операционной системы.\n\nМои рекомендации\r\nПосмотрите результат dir(method) и dir(func). Прочитайте справку по модулям new, itertools, functools. Обязательно, если еще не знаете, познакомьтесь с функциями map, reduce, zip и filter (map может принимать сразу много итераторов).\n\r\nПрочитайте про Abstract Base Classes и коллекции. И не только в Питоне, но и в Яве. ABC во многом идет по ее следам.\n\r\nПосетите сайт PyCon, ежегодной конференции разработчиков. Там же доступны и материалы прошлых конференций (хотя часто не доступны). Смотреть надо в Conference/Schedule.\n\r\nЧуть не забыл, обязательно прочитайте Python Cookbook. Эта практическая книга просто превосходна. Как быстро сортировать, используя метод decorate-sort-redecorate, какой алгоритм сортировки использует Питон (insertion sort для небольшого количества элементов и timsort для большого), как работать с XML, динамически создавать модули и многое другое.\n\n\nЗаключение\r\nНаписал, что вспомнил или обнаружил в закладках. Надеюсь, многим поможет. Также не забывайте ipython и его? и ??.. (для тех, кто не знает, это очень мощная интерактивная оболочка для Питона, а вопросы показывают информацию об объектах, например, import sys; sys?). Да прибудет в вами сила. "
]