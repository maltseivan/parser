[
   "Чек-лист вёрстки. Что можно отдавать клиенту, а что надо переделывать",
   "Вы PM. Как узнать – готова ли вёрстка к реальному использованию?\r\nВы заказчик. Как убедиться, что работа выполнена качественно?\r\nКак оценить качество вёрстки?\n\r\nКогда я стал тим-лидом, а позже PM, передо мной стала задача проверять вёрстку наших проектов. Нужно было выработать формальные, легкопроверяемые критерии, соответствие кода которым, должно было давать некую гарантию, что не будет факапов и ни клиент, ни программеры не сказажут потом “WTF?”.\n\r\nКлиенту неважно насколько красив ваш код, но ему важен результат. Качественный код нужен фирме, т.к. он надёжней и в будущем его будет легче поддерживать.\n\nТребования должны были быть такие, что соблюсти их легче, создавая качественную вёрстку, а не говнокод. Я составлял такой чек-лист в течении полутора лет. За последние полгода в него не добавилось ничего. Значит самое главное учтено.\n\r\nИтак что же это за список?\n\nКраткая версия теперь доступна на html5checklist.com (github), где можно вносить pull-request'ы.\n\nИстория обновлений:\n\n2015/08/11: Актуализировал рекомендации по оптимизации скорости загрузки. Добавил требование поддержки Retina. Дополнил «19. Мелочи» требованием что изображения должны масштабироваться в зависимости от размера окна.\n2015/08/10: актуализирован список исключений для CSSLint\n2015/07/29: актуализирован пункт №13 «плохо»/«хорошо»\n2015/04/08: добавлено требование использования препроцессоров и рекомендация использования систем сборки\n2013/04/25: добавлены анализаторами качества кода: CSSLint и JSHint, указан сайт подбора css font stack (спасибо  @fliptheweb), мелкие уточнения (работу интерактивных элементов страницы, что не пропадает фон на высоких разрешениях, не должно быть пустых презентационных блоков, при проверках контента — пробовать удалять заголовки, менять местами блоки)\n2013/04/24: добавил пункт об минимизации каскада (БЭМ-техники, MCSS, SMACSS), необходимости вписывания в экран моб. устройства, заменил ссылку на проверочный текст отображения стандартного html на код с normalize.css, поправил пример где в рекомендации встречался длинный каскад, упомянул про Opera на Presto и новый уровень семантики — в именах классов BEM.\n2012/04/12: отсортировал пункты проверки в порядке важности, выделил главные, дополнил статью подробностями\n2011/12/07: дополнил согласно доклада на WSD Минск'2011.\n2011/07/19: добавлено про повышение надёжности вёрстки благодаря html5-тэгам, про необходимость favicon/apple-touch-icon, отсутствие багов при ресайзе textarea\n2011/06/15: добавил пояснения какие ошибки валидации допустимы, рассказал про отсутствие официальной кнопки «HTML5 Valid» и про официальное лого HTML5 на сайте.\n\n\n\nНа хабре была статья про «Требования к html-верстке». Но это ТЗ для исполнителя/соглашение о кодировании/советы хорошего тона, но не проверочный список: готова-ли работа и можно-ли её принимать. Он хороший, но увы, его соблюдение не гарантирует что проблем не будет.\n\nДля того чтобы отдавать вёрстку клиенту, достаточно соблюдения первых 5 пунктов.\r\nДля выдачи в продакшен — первых 6.\n\n\nСоответствие макету\nКроссбраузерность, кодировка и DOCTYPE\nВалидность (включая CSSLint и JSHint), доступность, микроформаты\nНезависимость блоков в CSS: минимизация каскада, использование техник БЭМ\nСайт должен нормально смотреться во всех стандартных разрешениях от 1024 и выше, не иметь горизонтального скролла и вписываться в экран мобильных устройств\nКорректная работа при вбивании реального текста, надёжность вёрстки\nИспользование препроцессоров и систем сборки\nПроверка и оптимизация скорости загрузки: github.com/ihorzenich/WebPerformanceChecklist\nПоддержка Retina\nНаличие Win/Mac/Linux-аналогов шрифтов\nДоступность при выключенных(загружающихся) картинках\nHTML5 формы, линковка, валидация\nСемантичность. Отсутствие глупостей в html и css, единообразие, аккуратность\nПравильная структура заголовков (H1,H2,… и т.д. и TITLE)\nРаботоспособность при выключенном JavaScript\nРаботоспособность при выключенном Flash\nОтсутствие багов при увеличенном шрифте\nИ последний пункт – мелкие проверки (ниже подробней)\n\n\nПункт номер 1. Соответствие макету\nРасположение блоков должно быть 1:1 по сравнению с макетом. Допускается расхождение до 5px для текста. Разрешены и даже приветствуются правки размеров и расположения криво нарисованных блоков (разница размерах в 1-2px на разных страницах).\n\r\nЯсное дело что при изменениях контента, размеры блоков могут меняться (по высоте например), это нормально. Мы используем Pixel Perfect не для попиксельного задротства (адекватный ПМ не должен затягивать сдачу проекта, тратя время, а значит и деньги фирмы, на вылизывание каждого пикселя), а для проверки что все базовые блоки находятся там где надо, их размеры, отступы — соответсвуют макету.\n\r\nПроверяется в Firefox через плагин  Pixel Perfect. Для проверки в других браузерах используйте ModularGrid, но в принципе достаточно просто глянуть намётанным глазом, если расхождения заметные — они будут бросаться в глаза.\n\n\n\n№2. Кроссбраузерность, кодировка и DOCTYPE\n\nКодировка: UTF-8\r\nЗачем нужно: UTF-8 это универсальность и совместимость. Это современный стандарт, за ним даже не будущее, а настоящее.\r\nКак проверяется: в FF Инструменты→Информация о странице, в появившемся окне должно быть написано «Кодировка: UTF8». Эта кодировка должна использоваться для всех файлов: html, css, js (если файлы в разных кодировках могут быть проблемы)\nDOCTYPE: HTML5\r\nЗачем нужно: наличие корректного doctype необходимо чтоб страницы отображались в соответсвии со стандартами. Новый doctype позволяет нам смело использовать современные тэги (canvas, header, article,...) и старые проверенные решения, ранее бывшые в опале (например embed). HTML5 — это современный стандарт, в нём можно писать и в строгом XHTML-синтаксисе. Аргументация для сомневающихся.\n\r\nПроверка: открываем исходный код страницы, первая строка должны быть <!DOCTYPE HTML>.\nКроссбраузерность:\n\nFirefox (последний)\nChrome (последний)\nSafari (последний) и если у вас нет Mac чтоб проверить «размытые Mac'овские» шрифты (они чуть большего размера, из-за этого бывает вылазят баги) то установите в Preferences→Appearance, «Font Smoothing» в Medium (по дефолту там «Windows Standart»).\niPhone (смотрим в landscape и portrait режимах, т.е. вертикально и горизонтально) + Android. Тут важно чтоб верстальщик не забыл указать правильный viewport.\nOpera (последняя) Имеет смысл также посмотреть на 12-версии с движком Presto, если там есть баги в отображении — это признак потенциальных проблем в качестве кода\nIE7+ (для IE6 выводится уведомление о неподдержке и предложении скачать другой браузер или установить Google Frame, но с возможностью всё-таки просмотреть сайт)\nOpera Mini (проверяется в Opera Developer Tools→Opera Mini Simulator, нужно установить Java плагин к браузеру, или в крайнем случае: Opera 9.64→Вид-Маленький экран, но в 9.64 JS будет работать полноценно в отличие от настоящей Opera Mini, это нужно учитывать)\n\r\nПроверяется просмотром сайта в вышеперечисленных браузерах.\n\nПроверка в IE7 делается переключением IE8 в режим IE7 (F12→Режим обозревателя→Internet Explorer 7).\nВ IE6 можно посмотреть на ipinfo.info/netrenderer или на виртуальной машине (удобно использовать Windows XP Mode в Win7).\n\n\n\n\n№3. Валидность (включая CSSLint и JSHint), доступность, микроформаты\n\nНе должно быть js-ошибок!\nТитулка должна быть валидна в любом случае. Ошибки на внутряках простительны в следующих случаях:\n\nУпоротая секретарша копипастит тексты из Word’а в визиг;\nПрограммеру ну очень нужны какие-то кастомные атрибуты (хотя для этого в HTML5 ввели специальные пользовательские атрибуты «data-*»).\n\nCSS валидируется по версии 3.0, его валидность не требуется (да и валидатор ещё кривоват), а вот синтаксические ошибки (типа margin: 10xp) исправлять надо.\nМикроформаты должны быть. Как минимум – hCard. Желательно также hCalendar, XFN, hAtom.\nПроверка статическими анализаторами качества кода: CSSLint и JSHint\n\r\nОшибки js проверяются просмотром сайта в IE – в левом нижнем углу не должно быть значка «есть js-ошибки».\n\nЗачем нужна валидность? Главнейший практический плюс: валидный код обладает заранее известной структурой и упорядоченностью. Если в коде царит порядок, то такой код проще обрабатывать, обслуживать, видоизменять… Маленькое лирическое отступление: инженеры уже давно поняли, что унификация и стандартизация значительно снижают стоимость изготовления и, главное, обслуживания изделий… Код с ошибками — чаще всего именно кустарщина. © rossomachin\n\r\nHTML5 помогает нам в случае необходимости своих, кастомных, невалидных атрибутов для элементов. Просто указываем атрибут «data-чтоугодно» — и можем использовать! Это валидно!\n\r\nМикроформаты не только полезны для SEO, но и здорово упорядочивают код. Не нужно полчаса думать как назвать новый блок. Выбирай из существующих стандартных имён! Бери entry-content, не ошибёшся :)\n\r\nВалидность проверяется онлайн-валидаторами:\n\nHTML: validator.w3.org (или  Web Developer →Инструменты →Проверить HTML)\nCSS: jigsaw.w3.org/css-validator (или  Web Developer →Инструменты →Проверить CSS)\nНаличие микроформатов проверяется плагинами  Operator и  Tails Export.\r\nВалидаторы микроформатов:\n\nmicroformatique.com/optimus\nwww.google.com/webmasters/tools/richsnippets\nwebmaster.yandex.ru/microtest.xml\nhcard.geekhood.net\n\n\n\r\nВ настоящее время (2012 год) микроформаты постепенно вытесняются microdata, стоит использовать и то и другое.\n\nВ идеале вёрстка должна соответствовать стандарту доступности: WCAG.\r\nОн имеет три уровня сложности, если проходит хотя бы WCAG1 A (Priority 1) – уже хорошо. Идеальный вариант – WCAG2 Priority 3 (AAA). Самый просто способ проверить что скорей всего WCAG1 Priority A соблюдён — www.cynthiasays.com (или  Web Developer →Инструменты →Проверить WAI). Почему «скорей всего»? Некоторые требования WCAG невозможно проверить автоматически. Вот ещё несколько скриптов помошников:\n\nCheck a Site: scan web sites for over 450 quality problems\nTotal Validator: (X)HTML validator, an accessibility validator, a spell checker, and a broken links checker\nValidación de accesibilidad de acuerdo a las WCAG 2.0 con PISTA\n\r\nИ собственно сам чеклист WCAG2:\n\nwww.w3.org/TR/WCAG20/#guidelines\nи детальнее: www.w3.org/WAI/WCAG20/quickref \n\n\nНекоторые ошибки в валидации допустимы.\nHTMLСтандарт HTML5 находится в активной разработке: вносятся изменения, что-то добавляется, что-то исключается. Валидатор HTML5 меняет правила проверки в соответствии с этим.\r\nТо что было валидным вчера, сегодня может выдавать ошибку, например такая ситуация сейчас с apple-touch-icon и XFN.\r\nВ отличии от HTML4 и XHTML, официальной кнопки «Valid HTML 5» не существует, поэтому валидатор не выдаст вам код для её вставки, даже если он считает документ валидным.\nЛюди сами рисуют свои варианты кнопочек, вы можете использовать любые, но рекомендованным вариантом на сегодняшний день является добавление на сайт официального HTML5 badge с лентой используемых технологий, например так:\n\n\n\nCSS\nПо-умолчанию валидатор CSS проверяет код согласно стандарту 2.1, а не 3.\r\nПоэтому допустимы ошибки такого рода:\nProperty box-shadow doesn't exist in CSS level 2.1\nProperty border-radius doesn't exist in CSS level 2.1\nProperty background-size doesn't exist in CSS level 2.1\nValue Error : background Too many values or values are not recognized : linear-gradient(top,#7baee7,#b5dbff 22%) linear-gradient(top,#7baee7,#b5dbff 22%)\nи т.п.\n\nВалидатор считает ошибкой указание вендорных префиксов\r\nПоэтому допустимы ошибки такого рода:\nProperty -moz-box-shadow doesn't exist\nProperty -webkit-background-clip doesn't exist\nProperty -o-border-image doesn't exist\nProperty -khtml-background-size doesn't exist\nProperty -ms-filter doesn't exist\nProperty -pie-background doesn't exist\nUnknown pseudo-element or pseudo-class :-moz-any-link\nValue Error : display -moz-inline-box is not a display value\nи т.п.\n\nРаньше проприентарные свойства IE было рекомендовано выносить в отдельный CSS. Сейчас стоит использовать HTML5 Boilerplate и фильтровать в style.css с помощью html.oldie, html.ie7 и т.д.\r\nТогда допустимы ошибки такого рода:\nProperty behavior doesn't exist\nProperty progid doesn't exist\nProperty _display doesn't exist\nи т.п.\n\n\n\n\nНастройки CSSLint:\r\nЯ выключаю следующие опции: \r\n<pre // We didn't support IE7!\r\n «box-sizing»: false,\r\n «adjoining-classes»: false,\n\r\n// Allow Safety CSS Hacks\r\n «star-property-hack»: false, // IE8-\r\n «underscore-property-hack»: false, // IE7-\n\r\n// Stupid rules\r\n «box-model»: false, // Developers know what is box model!\r\n «empty-rules»: false, // Empty rules are useful for describing the layout\r\n «floats»: false, // Grids can't fully replace floats\n\r\n// OOCSS didn't suitable for real life. BEM does.\r\n «qualified-headings»: false,\r\n «unique-headings»: false,\r\n «font-sizes»: false\n\n\nНастройки JSHint:\r\nДопустимо (пока ещё допустимо!) выключение опции:\r\n — When code is not in strict mode\n\r\nКак правило для большинства кода необходимо включить: \r\n + jQuery\n\n\n\n№4. Независимость блоков в CSS: минимизация каскада, использование техник БЭМ\nПроверяется в FF через плагин  Firebug\r\nПри наведении на любой блок, в его стилях не должно быть множество перечёркнутых правил (следствие длинного каскада).\r\nДля минимизации каскада и построения надёжной, современной, масштабируемой вёрстки сейчас применяют следующие техники: БЭМ, MCSS и SMACSS.\n\n\n\n\n№5. Сайт должен нормально смотреться во всех стандартных разрешениях от 1024 и выше, не иметь горизонтального скролла и вписываться в экран мобильных устройств\nПроверяется в FF через плагин  Web Developer→Resize\r\nСписок классических разрешений:\n\n1024x600\n1024x768\n1152x864\n1280x800\n1280x1024\n1440x900\n1680x1050\n1920x1080\n\r\nНа больших разрешениях нужно обращать внимание что не пропадает фоновая графика по краям сайта (что размера картинки хватило на большое разрешение).\n\r\nВписывание в экран мобильных устройств лучше проверять на самих мобильных устройствах. Множество проблем решается указанием верного Viewport. Подробнее: прекрасный доклад Вадима Макеева «Прокрустовы окна. Как вписаться в устройства с минимальными потерями».\n\n\n№6. Корректная работа при вбивании реального текста, надёжность вёрстки\nВёрстка должна тянутся, не разваливаться и не терять дизайнерский вид при изменении контента на странице. Его может быть больше или меньше чем на макете, он может быть обёрнут во всякие <p> из визига и т.п.\r\nОбязательно нужно проверять удаление заголовков! Бывает что отступы между блоками после этого схлопываются, это частая ошибка, причина — что отступы были заданы не для блоков, а для внутренних элементов — заголовоков.\n\nПроверка ввода и удаления данных.\r\nПроверяется: на странице с контентом, пробуем добавлять и удалять содержимое – «что будет когда текста много?», «а когда мало?». \r\nОбязательно пробовать менять расположение элементов, чтоб после того как ты поменял блоки местами не развалилось оформление (из-за каскада).\nПроверка корректности работы стилей.\r\nПроверяется: на страницы с контентом вбиваем текст с абзацами и без абзацев (важно! бывает горе-верстальщики прописывают стили только для абзацев), со списками и картинками, таблицами и заголовками разных уровней.\n\r\nЭто нужно чтоб на живом сайте потом не полезли проблемы при заполнении реальными данными.\r\nПравки содержимого страницы делаются в FF через плагин  Firebug: HTML→Edit – меняем/добавляем/удаляем текст. Хороший пример проверочного текста находится в normalize.css в test.html между <body> и </body>.\n\r\nХорошо использовать html5-тэги для разметки: header, footer, aside, nav, section, article и т.д. Кроме того что это семантично, также повышается надёжность, «пуленепробиваемость» вёрстки. Лишний открытый или закрытый div легко может поломать вёрстку. Но когда каркас сайта — атомарные и редко повторяющиеся html5-тэги, то «поломка» локализуется в пределах html5-тэга.\n\n\n№7. Использование препроцессоров и систем сборки\r\nCSS должен быть написан с использованием препроцессоров (LESS/Sass/Stylus). \r\nПроверяется поиском файлов с расширениями вида: .less, .sass, .scss, .styl — какое-то одно должно быть.\n\r\nЖелательно использование систем сборки (Grunt/Gulp) и построцессоров (PostCSS/Autoprefixer).\r\nПроверяется поиском файлов Gruntfile.js или Gulpfile.js\n\n\n№8. Оптимизация скорости загрузки\nРаньше я советовал спрайты, base64 для картинок, CSS3 вместо графики, оптимизацию JPG и PNG и вынос JS из html во внешние файлы с объединением.\r\nСейчас я написал отдельный большой чеклист включающий это и многое другое: https://github.com/ihorzenich/WebPerformanceChecklist\r\nЗачем это нужно: скорость загрузки оказывает ключевое влияние на доступность сайта (больше психологическую, чем фактическую), активность пользователей на сайте (медленными сайтами люди предпочитают не пользоваться) и его конверсию (медленным сайтам не доверяют). © sunnybear.\r\nВ целом скорость загрузки проверяется так:\n\nпо панели Net в  Firebug\r\nНеобходимо проверять, как отображается страница при загрузке на малых скоростях (хотя бы 64 КБ). Очень часто в такие моменты пользователь видит разъехавшуюся верстку.\nСервисами PageSpeed Insights и GTMetrix\n\r\nУчитывайте что значительная часть рекомендаций: включение сжатия, установка определённых headers, minifying кода – относится к серверным работам, а не вёрстке\n\r\nНу и конечно нужно не забывать очевидные вещи: правильно выбирать тип картинки для сохранения JPG или PNG, выставлять тип Progressive для JPG, не использовать тяжелые (больше 200-300kb картинки).\n\r\nНеобходимо учитывать что спрайтов, base64 encode и css3-стилей может и не быть по причине ненужности (макет очень простой).\n\n\n№9. Поддержка Retina\n\n\n№10. Наличие Win/Mac/Linux-аналогов шрифтов\nЕсли альтернативные шрифты не прописаны, то у пользователей у которых отсутствует используемый в вёрстке шрифт, вместо него отобразится стандартный. Это может быть не только некрасиво, но и даже поломать отображение сайта.\r\nЧасто забывают прописывать альтернативы для Myriad Pro, Arial Narrow.\n\r\nПроверяется поиском по тексту css названий “Helvetica”,“Liberation”, “DejaVu”,”Meera”,”Monaco”, “ Century Schoolbook L”,” Nimbus Mono L”, “URW”. Хотя бы два из них должны быть.\n\r\nИсправляется указанием готовых наборов шрифтов (css font stack) с http://cssfontstack.com/\n\r\nТакже стоит ознакомится с тем какие шрифты идут стандартно в разных OS:\n\nComplete Guide to Pre-Installed Fonts in Linux, Mac, and Windows\nCSS font matching: Windows, Mac and Linux\nCodestyle: Combined font survey results\nCommon fonts to all versions of Windows & Mac equivalents\n\n\n\n\n№11. Доступность при выключенных(загружающихся) картинках\nНадписи (особенно логотип и главное меню сайта) должны оставаться читабельными, у всех информационных картинок должны быть подписи аккуратным небольшим серым шрифтом (да, для img можно задавать font – это внешний вид alt-текста, что выводится вместо картинки).\r\nКартинки часто отключают при использовании дорогого инета, тарифицируемого по траффику (GPRS, роуминг).\n\r\nПроверяется в FF через плагин  Web Developer→Images→Replace Images With Alt Attributes.\n\n\n№12. HTML5 формы, линковка, валидация\n\nLabel и input/select должны быть слинкованы.\r\nЭто нужно для удобства юзеров. Также это очень облегчает жизнь пользователям с ограниченными физическими возможностями.\r\nПроверяется кликом по label – должен активироваться соответствующий ему элемент ввода.\nHTML5 валидация заполнения формы.\r\nПрактическая ценность пока-что невелика, ведь серверная проверка ввода данных тоже может быть реализована без перезагрузки страницы (через ajax), но это говорит о проф. уровне исполнителя — у редкого числа юзеров современных браузеров с отключенным javascript, проверка ввода данных произойдёт средствами браузера, а не сервера.\r\nПроверяется в Opera: выключаем javascript, не заполняем форму, жмём Submit – должны появится уведомления о необходимости заполнить поля.\nJS-валидация формы.\r\nЭто ожидаемое поведение. Пользователи привыкли что если они неправильно заполнят форму, им не дадут её отправить, а укажут на ошибки.\r\nПроверяется в Opera/Safari/Chrome: включаем javascript, не заполняем форму, жмём Submit – должны появится уведомления о необходимости заполнить поля.\nЕсли проверяем frontend в целом — должна быть серверная валидация формы.\r\nПроверяется в Firefox 3.6: выключаем javascript, не заполняем форму, жмём Submit – должны появится уведомления о необходимости заполнить поля.\nПравильные input type=”email/url/tel”.\r\nПока-что практическая ценность для пользователя лишь в том, что на iPhone будет показываться клавиатура соответствующая формату поля ввода.\r\nПроверяется на iPhone — в зависимости от типа поля ввода он должен показывать различную клавиатуру: стандартную/цифровую/для набора web/email-адресов.\n\n\r\nУведомления об ошибках должны быть не js-alert’ом, а текстом в дизайне сайта!\r\nВсё оформление в формах должно быть повешено на классы, id — только для линковки с label (a то потом программеры прикручивают, пишут свои id и ломается внешний вид).\n\n\n№13. Семантичность. Отсутствие глупостей в html и css, единообразие, аккуратность\nПожалуй единственный пункт, где нельзя дать чётких критериев. Про то, что такое плохо можно почитать в моей статье «Вредная вёрстка» (делая скидку что она написана в 2008 году).\n\nПлохо:\n\nСамое страшное, к счастью уже редкое — float: left для всех блоков. Безумный верстальщик эмулирует привычные ячейки таблиц, расставляя блоки как кирпичи друг за другом. Вон из профеcсии! Проверяется: Web Developer Outline → Float elements, если всё в красных блоках, вёрстку нужно выкидывать на помойку.\nОтступы между блоками на сайте должны быть за счёт margin у блоков, а не выпирающих наружу margin у содержимого блоков.\nПлохо — отсутствие тайтлов.\nПлохо — отсутствие alt у картинок.\nПлохо — хаки для браузеров внутри main.css (как без фильтров, так и с ними). Без фильтров — это когда когда просто пишем {zoom: 1;} — это оч. плохо, т.к. будет применяться ко всем IE, а не только к тому, в котором проблема. С фильтрами — когда пишут (* html, *+html и т.д.) — плохо, потому что это засоряет код, делает его менее читабельным, а какие-то хаки могут быть и вообще невалидными и нарушать прогон CSSLint. Conditional Comments — тоже плохо, хотя раньше считалось хорошей техникой, плохо т.к. это увеличение кол-ва css-файлов и главное — это разнесение кода в разные места. Сейчас рекомендуется использовать специальные классы типа html.ie7, html.ie8,… (из HTML5 Boilerplate), Modernizer-детектирование фич (классы вида html.js.flexbox.canvas.no-touch…) и JS-детектирование браузера и платфорым (например CSS Browser Selector генерирующий классы вида html.webkit.chrome.chrome25.win.win8…)\nПлохо — не проверять tabindex в формах.\nПлохо — писать стили не думая о логике размещения элементов. Например, если элемент всегда находится сверху, у него должен быть большой z-index, нельзя надеяться на то что сейчас всё нормально смотрится — стили должны быть железобетонными. Если элемент всегда должен находится на каком-то месте, в независимости от окружающих его элементов — это position: absolute; а не float и т.д.\r\nБлоки независящие друг от друга не должны быть внутри одного блока (например телефон компании и поиск по сайту). Блоки независящие по расположению друг от друга должны быть position absolute, а не float’ится.\nОчень плохо — презентационные классы (right, red).\nНежелательно когда вёрстка содержить пустые блоки для презентационных целей, для этого существуют псевдоэлементы\nПлохо когда нет базовых стилей у стандартных элементов. Т.е. просто h1,h2,ul,table,etc без классов должны смотреться красиво и органично. Проще говоря — используйте Normalize, a не Reset CSS.\nПлохо когда нет постепенного уточнения стилей для текста, когда стиль выписывается для каждого элемента отдельно, а за его пределами — внешний вид может быть кардинально другой. Речь о ситуации когда например текст, написанный без абзацев, имеет вообще не тот стиль что у всех элементов в блоке. Надо вести стили снизу вверх, постепенно уточняя их. Тут важно не путать стили для текста и стили для блоков. Для текста — каскад это добро, для блоков сайта — нужно использовать БЭМ.\nЕщё хуже — чересчур детализированные глобальные стили. Например a {font: italic 10px Tahoma;} /* Ненависть! Ненависть! НЕНАВИСТЬ!!11 */ Потом приходится переопределять стиль ссылок для каждого блока.\nРазмеры и позиционирование элемента должны указываться в одних единицах измерения. Т.е. высота/ширина блока в px и margin/padding в em — это странно и скорей всего ошибка. Line-height — лучше задавать коэффициентом (1/1.2/1.4… т.е. без указания единицы измерения — это цифра на которую умножается font-size и получится межстрочный интервал). Если задали font-size/height в em — значит задаём и margin/padding тоже в em. Классический пример: список dl-dt-dd, где dt и dd ставятся друг на против друга с помощью подтягивания dd отрицательным margin вверх. Или — выделили padding’ом место под position: absolute какого-то текстового блока. У текстовых элементов (абзацей, ячеек таблиц) задаём padding и height в em (чтоб корректно увеличивать размер шрифта) .\nПлохо(недопустимо!) вешать стили на селекторы вложенных стандартных тэгов, без классов. Т.е. допустим пишем что-то типа h2 a span {какая-то крепкая штука, типа картинки с графикой, что закрывает текст в заголовке}, а потом клиент в визиге внезапно вбивает такое сочетание! И получаем невероятный баг. На просто одиночные теги для вывода текста из БД — можно, но используя блок .b-text (смотри BEM CSS).\nПлохо — напрямую задавать визуальное отображение элементов через js: $('.element').css(color,\"#f00\"). Это должно делаться через установку/смену классов.\n\n\nХорошо:\n\nБЭМ! Важно понимать что это методология, а не инструменты. Для обычных сайтов достаточно вёрстки по BEM CSS, без использования библиотеки блоков и bem-tools. Я долго считал что «BEM — это классная идея, но это чересчур, так категорично не надо, надо чуть по-другому, под себя...», так вот — это неверно! Нужно обязательно уходить от каскада, а БЭМ — это один из отличных вариантов решения.\nХорошо — структурировать код в блоки описывающие логику документа. Т.е. создавать div даже там, где он для презентационных целей не нужен. И наоборот — стараться не ставить лишний div там, где структура этого не требует, а это нужно лишь для визуальных эффектов.\nHTML5 Boilerplate — замечательный стартовый шаблон от «отцов». Используйте и присоединяйтесь к разработке, добавляйте свои велосипеды туда! \r\nРаньше у нас был свой самописный framework-стартовый html, теперь используем Boilerplate как основу, а в него уже добавляем старые наработки.\nИспользуйте наработанные решения, чужие модули, jQuery-плагины, не изобретайте велосипедов, а если изобретаете — поддерживайте их, ведите библиотеку кода (после каждого нового проекта добавляйте туда код, обновляйте старый).\nДля текстовых блоков, что редактируются в админке, должна обеспечиваться атомарность текстовых стилей. Т.е. есть у нас страничка с каким-то текстовым блоком, примерно такой структуры:\n.content-text h1\n.content-text .entry\n.content-text .entry .somenamedblock\n\r\nТо .somenamedblock должен получать текстовые стили непосредственно — .somenamedblock {font: …; color: …;}, т.к. иначе в визиге админки мы не сможем их застайлить.\nодинаковый html-код для блоков на морде и внутряках, с идентичным контентом, но разным визуальным представлением данных. Реализуется через модификаторы блоков и элементов, но не через модификацию от родителя (каскад от body.pagename например!)\n \n\n\n№14. Правильная структура заголовков (H1,H2,… и т.д. и TITLE)\nЭто забота о семантичности кода, заголовки структурируют сайт, делают его корректным документом. Корректный Document Outline важен для SEO.\n\r\nПроверяется в FF через плагин  Web Developer→Information→View Document Outline. Красных строк быть не должно!\n\n\n\n\n№15. Работоспособность при выключенном JavaScript\nJS может быть выключен согласно корпоративных требований безопасности. А в Opera Mini он работает только методом перезагрузки страницы. \nНо самое главное — сайт должен сохранять нормальный вид, пока он грузится на медленном 3G и js-скрипты ещё не выполнились!\n\r\nВесь критически важный функционал сайта должен быть доступен без JS. Дополнительные фишки (например ссылки на увеличение шрифта или распечатку) – при выключенном JS не должны отображаться.\n\r\nЕсли не хочется/нет возможности реализовывать функционал без JS, нужно хотя-бы выводить уведомление о необходимости его включить (реализовывается через <noscript>).\n\r\nПроверяется в FF через плагин  Web Developer→Disable→Disable JavaScript→All JavaScript.\n\n\n\n\n№16. Работоспособность при выключенном Flash\nВ идеале весь критически важный функционал сайта был доступен без Flash. В реальной жизни нужно:\n\nвыводить фоновую графику в блок, где должен отображаться презентационный flash;\nвыводить хотя-бы просто тестовую инфу в блок где через flash выводится какая-то информация;\nвыводить кнопочку “Get Adobe Flash Player” и предлагать Express Install если уж без флеша совсем никак.\n\r\nFlash не работает на iOS-девайсах. Flash плохо индексируется поисковиками.\n\r\nПроверяется в FF отключением flash-плагина: Tools→Add-ons→Plugins→Shockwave Flash→disable.\n\n\n\n\n№18. Отсутствие багов при увеличенном шрифте\nПроверяется в FF:\n\nШрифты – включением View→Zoom→Zoom Text Only и последовательным нажатие клавиш Ctrl + — (или View→Zoom→Zoom In).\n120 dpi – настраивается отдельным апплетом в Control Panel (Vista/Seven) или в свойствах драйвера видеокарты в XP.\n\r\nПро приведение внешнего вида сайта на 120dpi к 96 читайте в моей статье «120 dpi и шрифты в em».\n\n\n\nДля проектов, где это оговорено, проверяется:\n\n\nВерсия для печати (она должна быть реализована через css)\nМобильная версия (таки тоже должна быть через css)\n\n\n\n\n\n№19. Важные мелочи:\n\n\nЛого на внутряках должно вести на титулку. На титулке logo = h1, на внутряках H1=заголовок контента, а Logo=div\nУ каждой страницы должен быть свой уникальный TITLE формата About Us — %CompanyName%\nВсе страницы должны быть слинкованы и проверены на наличие битых ссылок.\nВсе ссылки должны как-то реагировать на :hover, :active и :focus — показыванием/убиранием подчёркивания, сменой цвета, чем угодно. У всех ссылок, кроме пунктов меню, должна быть реакция на :visited\nПроверять что все интерактивные элементы страницы что должны работать — работают.\n«Контент в начале страницы» — содержимое страницы должно идти в начале кода, до всяких сайдбаров и прочего.\nВсе созданные странички изначально должны быть порезаны на шаблоны, чтоб программеру было легче их интегрировать.\nКопирайт должен быть написан правильно.\nДолжны быть favicon.ico (желательно с включенными внутрь неё 32×32, 48×48 и 64×64 вариациями) и apple-touch-icon\nВ вёрстке не должны оставаться закомментированные «на всякий случай» куски кода, лишние неиспользуемые файлы, старые версии файлов и т.п. Все бекапы можно вытянуть из системы контроля версий (например Git или SVN), а на живом проекте «мусор» потом мешает разобраться как что работает.\nРазмеры для блоков, чьи размеры зависят от содержащегося в них текста, нужно задавать в em, а не px.\nЕсли url ссылки неизвестен, то он должен быть равен её анкору, написанному латиницей с заменой пробелов/спецсимволов на тире.\nSkype-плагин не должен ломать вёрстку\nРесайз textarea не должен ломать вёрстку\nПри проверке frontend в целом — 404-страница должна отдаваться с кодом 404 а не 200.\nНужно подстраховываться фиксируя в css размеры картинок, выводящихся программно.\nПроверка орфографии Word’ом или Орфографом, желательно — оттипографить контент.\nСсылки на чужие сайты должны быть с target=\"blank\", желательно выделять их иконкой «внешняя ссылка».\nРазумеется картинки должны быть в отдельной папке, css — в отдельной и js — в отдельной. Графика, не являющаяся частью дизайна (всякие илююстрации, фото в новостях и т.д.) — нужно положить в отдельную папку, например userfiles.\nИзображения должны масштабироваться в зависимости от размера окна (max-width:100%; height:auto;) \n\n\n\r\nГде же 17? Пропущено, правильно, тест на внимание, не спи, чья-то рука в твоём кармане, йо!\r\nИ последнее, но самое важное тем не менее – на “WTF?” манагера — имей своё мнение :)\n\nДоклад по мотивам статьи:\n\nЧек-лист вёрстки. Что можно отдавать клиенту, а что надо переделывать "
]