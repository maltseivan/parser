[
   "Автоматизация разработки конструкторской документации средствами VBA. Продолжение",
   "Как часто в горестной разлуке,В моей блуждающей судьбе,Комплект КД, я думал о тебе!Итак, в предыдущей статье я остановился на автоматизации отдельного документа и пообещал рассказать о том, как удалось организовать работу с  комплектом разнородных документов при помощи вспомогательной базы Excel и  как оказалось возможным делать комплекты документов вообще не открывая  Word.Под комплектом я здесь понимаю набор файлов форматов Word, Visio и AutoCAD, относящихся к одному общему проекту или изделию. То есть те файлы, которые представляют документы с одинаковыми, взаимно синхронизируемыми текстовыми полями. Далее, я буду называть этот комплект - автоматизированным комплектом документов или АКД.Давайте посмотрим, как выглядит АКД в проводнике Windows.Автоматизированный комплект документов статьОбратите внимание на файл variables.xls. Именно здесь располагаются все переменные, которые мы хотим централизованно распределять по нашему комплекту. В этом файле, при работе макросов VBA Word, Visio, AutoCad - автоматически создаются страницы, соответствующие этим файлам и содержащим все специфические переменные этих файлов.Есть два нюанса. Первый - страница \"All\". Она понадобилась для того, чтобы сохранять переменные, которые одинаковы для ВСЕХ без исключения документов АКД. Например, для переменной vObj - Объект проектирования = Зал славы. :)) Второй нюанс - для документов Visio вкладка создается для каждой страницы документа, так как обычно достаточно удобно держать все схемы проекта в одном файле. В принципе, никто не мешает разнести эти схемы и по разным файлам, но в Excel попадут все равно названия страниц этих документов. Ну и дополнительно, чисто для эстетики, цвета вкладок-листов Excel соответствуют типам файлов. Например, синие - это Word. Так как в предыдущей статье я уже рассказал о принципе формирования и обработки полей-переменных, то сейчас расскажу только о дополнительных вещах, относящихся к работе с файлом переменных. На следующем рисунке показана связь переменных, которые мы создаем с файлом variables.xls. Имя файла может быть любым и оно задается в основном окне макроса - в нижнем белом поле. Связь переменных с файлом ExcelМетодом проб и ошибок я пришел к такой организации работы со своим \"детищем\":Создается новый файл. Как правило, уже на основе имеющегося шаблона. В окне макроса нажимается кнопка \"Сохранить\". При этом в фале переменных автоматически создается новая вкладка для этого файла и на нее заносятся имеющиеся в документе переменные. Если эти переменные уже есть на вкладке \"All\" - то они не вносятся на персональную вкладку документа.После сохранения, все \"персональные\" переменные документа отображаются и редактируются на вкладке окна макроса \"Локальные\". Общие переменные АКД - отображаются на вкладке \"Общие\". (Кстати, там они не редактируются, а только отображаются, во избежание ошибочных изменений, которые затронут весь комплект)Если я хочу сделать какие-то из переменных документа - общими, то я просто потом перехожу в файл Excel и перетаскиваю их строки с листа документа на лист \"All\". А если я хочу переопределить общую переменную персонально для конкретного файла, например, если везде разработчик один и тот же, но в единственном документе он другой то я копирую строку с листа \"All\" на персональную вкладку этого самого \"особенного\" документа.Такое повторяется для каждого документа комплекта (если комплект создается \"с нуля\". Если комплект типовой - то вообще ничего делать не надо, только в Excel или в окне макроса переменные менять.)Ниже приведу, для примера, код функции, которая обеспечивает занесение переменных  документа в файл.Код функции записи переменных и дисклаймерНа всякий случай, сообщаю - я не профессиональный программист. Поэтому представленный код не является образцом для подражания и периодически балует меня окнами ошибок. Однако, моя идеология программирования заключается в том, чтобы не делать код таким, чтобы он вносил непоправимые ошибки в документы. Соответственно, по мере возникновения ошибок, я просто вношу соответствующие правки в код и работаю дальше.Sub xlAddVars(ExcelFile As String)\n  Dim xlWSh, xlWShAll As Object\n  Dim xlWbk As Object\n  Dim xlApp As Object\n  Dim Checked As Boolean\n  Dim FileEx As Boolean\n  Dim AllLastRow, LastRow\n  Dim SheetName As String\nSheetName = \"\"\nOn Error Resume Next\nSheetName = ActiveDocument.Name\nOn Error GoTo openexcel\nSet xlApp = GetObject(, \"excel.application\")\nChecked = False\nFor a = 1 To xlApp.Workbooks.Count\nIf xlApp.Workbooks(a).Name = ExcelFile Then Checked = True: Set xlWbk = xlApp.Workbooks(ExcelFile): Exit For\nNext\nIf Not Checked Then\nOn Error GoTo CreateFile\nFileEx = FileDateTime(ActiveDocument.Path + \"\" + ExcelFile)\nOn Error GoTo 0\nIf FileEx Then Set xlWbk = xlApp.Workbooks.Open(ActiveDocument.Path + \"\\\" + ExcelFile)\n\nEnd If\nFound = False\nFor a = 1 To xlWbk.sheets.Count\nIf xlWbk.sheets(a).Name = SheetName Then Found = True\nNext\nIf Not Found Then\nSet xlWbs = xlWbk.sheets.Add(After:=xlApp.Worksheets(xlApp.Worksheets.Count))\nxlWbs.Name = SheetName\nxlWbs.Tab.ColorIndex = 37\nEnd If\nSet xlWSh = xlApp.ActiveWorkbook.Worksheets(SheetName)\nSet xlWShAll = xlApp.ActiveWorkbook.Worksheets(\"All\")\n'Calculate last used rows in sheets\nAllLastRow = xlWShAll.Cells(1, 1).End(-4121).Row\nIf AllLastRow >= 65536 Then\nIf xlWShAll.Cells(1, 1).Value = Empty Then AllLastRow = 0 Else AllLastRow = 1\nEnd If\nLastRow = xlWSh.Cells(1, 1).End(-4121).Row\nIf LastRow >= 65536 Then\nIf xlWSh.Cells(1, 1).Value = Empty Then LastRow = 0 Else LastRow = 1\nEnd If\n'Запись кол-ва листов\nActiveDocument.Variables(\"vPages\").Value = ActiveDocument.BuiltInDocumentProperties(wdPropertyPages)\nFor b = 1 To ActiveDocument.Variables.Count\nChecked = False\n'Search in All sheet\nFor a = 1 To AllLastRow\n  If xlWShAll.Cells(a, 1).Value = ActiveDocument.Variables(b).Name Then\n     Checked = True\n     Exit For\n  End If\nNext\n\n'Search in self sheet\nIf Not Checked Then\n    For a = 1 To LastRow\n        sL = ActiveDocument.Variables(b).Name\n        sR = \"\"\n        sL = Left(sL, InStr(1, sL, \"_\"))\n        If sL = \"\" Then sL = ActiveDocument.Variables(b).Name Else sR = Right(ActiveDocument.Variables(b).Name, Len(ActiveDocument.Variables(b).Name) - InStr(1, ActiveDocument.Variables(b).Name, \"_\"))\n        If xlWSh.Cells(a, 1).Value = sL Then\n            If sR = \"\" Then\n                xlWSh.Cells(a, 2).Value = \"'\" + CStr(ActiveDocument.Variables(b).Value)\n                Checked = True\n                Exit For\n            Else\n                For bb = 2 To 100\n                    If xlWSh.Cells(1, bb).Value = sR Then\n                       xlWSh.Cells(a, bb).Value = \"'\" + CStr(ActiveDocument.Variables(b).Value)\n                       Checked = True\n                       Exit For\n                    End If\n                Next\n            End If\n        End If\n    Next\nEnd If\n'If not found - add personal row in self sheet\nIf Not Checked Then\n   xlWSh.Cells(LastRow + 1, 1).Value = \"'\" + CStr(ActiveDocument.Variables(b).Name)\n   xlWSh.Cells(LastRow + 1, 2).Value = \"'\" + CStr(ActiveDocument.Variables(b).Value)\n   LastRow = LastRow + 1\nEnd If\n\nNext\nSet xlApp = Nothing    ' the application, then release the reference.\nExit Sub\nCreateFile:\nSet xlWbk = xlApp.Workbooks.Add\nxlWbk.ActiveSheet.Name = \"All\"\nxlApp.DisplayAlerts = False\nFor a = xlWbk.sheets.Count To 2 Step -1\nxlWbk.sheets(a).Delete\nNext\nxlApp.DisplayAlerts = True\nSet xlWbs = xlWbk.sheets.Add(After:=xlApp.Worksheets(xlApp.Worksheets.Count))\nxlWbs.Name = SheetName\nxlApp.Workbooks(xlWbk.Name).SaveAs (ActiveDocument.Path + \"\\\" + ExcelFile)\nResume\n\nopenexcel:\nSet xlApp = CreateObject(\"excel.application\")\nxlApp.Visible = True\nResume\nEnd SubКак и в случае немодального окна макроса, я делаю Excel доступным для редактирования во время работы. Произвольным образом, при этом, могу редактировать значения переменных там, где мне удобно.Итого, проработав все документы комплекта, мы получаем каталог файлов и один управляющий Excel-файл для централизованного внесения изменений. В некоторых случаях, комплекты получаются таковы, что отредактировав файл переменных можно избежать работы в Word полностью. Разве что придется открыть эти файлы, нажать кнопку макроса \"Обновить\" и убедиться в корректной подстановке значений в поля перед печатью этого документа.Теперь давайте посмотрим, что можно сделать, если какой-либо документ комплекта требует специфической проработки. Например, это, в моем случае, будет таблица соединений и подключений.Exel и Word. (... Добро и зло. А выбрать нам дано - одно.) :)))Заполнять строки таблицы в Word мне неудобно, я лучше это сделаю в Excel. Тем более там можно произвести расчет значений, например, длин кабелей по формулам, автоматом пронумеровать по возрастанию порты, и т.п.Для переноса этой информации в Word - я сделаю макрос импорта таблицы. При этом, так-как операция эта специфическая именно для \"таблицы соединений\", то этот макрос я буду создавать именно в этом файле, в файле шаблона таблицы, а не глобально в normal.dotm.Он из себя представляет следующее: (см внутри)'Формирование списка\nSub BuildSpec2()\n    Dim sTab As Table\n    Dim xlWSh As Object\n    Dim xlApp As Object\n    Dim of As Boolean\n    Dim nf As Boolean\n    Dim cf As Boolean\n    Dim oCol, nCol, cCol As Integer\n        \n    i = Selection.Rows.Count\n    If i = 0 Then\n      MsgBox (\"Необходимо выделить строки спецификации, куда будет помещены строки раздела (Оборудование)!\")\n      Exit Sub\n    End If\n    \n    Response = MsgBox(\"Экспортировать из Эксел?\", _\n                       vbYesNo, _\n                       \"Заполнение таблицы\")\n        If Response = vbNo Then Exit Sub\n        \n        On Error Resume Next\n        Set xlApp = GetObject(, \"Excel.Application\")\n        If Err.Number <> 0 Then\n          Err.Clear    ' Clear Err object in case error occurred.\n             MsgBox (\"Сначала необходимо открыть в Excel соответствующую спецификацию\")\n          Exit Sub\n        End If\n        On Error GoTo 0\n        \n               \n        Set xlRange = xlApp.Selection\n        If xlRange.Rows.Count < 2 Then\n            MsgBox (\"Необходимо выделить диапазон строк в Экселе.\")\n            Exit Sub\n        End If\n                \n        UserForm1.Show\n        \n        Application.ScreenUpdating = False\n        Set sTab = Tables(1)\n        i = Selection.Rows(1).Index - 1\n        For a = 1 To xlRange.Rows.Count - 1\n            sTab.Rows.Add\n            For b = 1 To 9\n                sTab.Rows(a + i).Cells(b).Range.Text = xlRange.Rows(a).Cells(b).Text\n            Next\n            UserForm1.Label2.Caption = sTab.Rows(a + i).Cells(1).Range.Text\n            UserForm1.Repaint\n        Next\n        UserForm1.Hide\n        Application.ScreenUpdating = True\n    \n        Set xlApp = Nothing    ' the application, then release the reference.\n\nEnd SubПринцип работы этого макроса заключается единственно в том, чтобы взять диапазон выделенных предварительно в Excel строк и перенести в заготовку таблицы, имеющуюся в шаблоне документа.При этом, если шаблон сделан правильно (а он сделан правильно), то при заполнении таблицы на первом листе, новые строки таблицы появятся на вновь созданном втором (третьем, четвертом, ...) листе (причем этот лист будт сделан уже с другими форматными рамками, соотвтетсвующими последующим листам ЕСКД, с маленькой нижней рамкой основной надписи).Еще один специфичный документ - спецификация. Часть его заполняется на основе шаблона тем же макросом что и таблица кабелей (именно поэтому, если вы обратили внимание, там в названии макроса стоит Buildspec)Здесь можно дополнительно сделать формирование списка документации, который... правильно! Соответствует набору вкладок в файле variables.xls. Поэтому очередной специфический макрос для документа \"спецификация\" будет осуществлять просмотр листов-вкладок \"Excel\" и в порядке следования занесет их в таблицу \"Документация\". Названия, коды, примечания - будут взяты из соответствующих переменных, введенных ранее для этих документов.В комплекте документов есть еще ряд файлов Visio и AutoCAD. Работа с ними отличается от работы с Excel и Word, что само собой разумеется. И эти отличия заслуживают отдельного рассмотрения. В следующей статье, я опишу принципы и некоторые детали реализации автоматизации Visio - документов. В том числе работу с шаблонами и Stencils-ами. "
]