[
   "Как обновить образы контейнеров с помощью Podman",
   " Изображение Hessel Visser с сайта Pixabay\n\r\nПоддержание образов в актуальном состоянии является стандартной процедурой при эксплуатации и управлении контейнерной средой. Далее мы рассмотрим, как следует это делать.\n\r\nPodman — это daemon-less движок для разработки, управления и запуска контейнеров, соответствующих Open Container Initiative (OCI). Это одна из серии статей об использовании Podman, основанная на том, что я делаю в своей реальной рабочей среде. Ранее я показывал, как отображать сетевую информацию с помощью Podman, включая контейнеры и IP-адреса подов.\n\r\nВ данной же статье показано, как обновлять образы контейнеров. Очень важно поддерживать запущенные контейнеры и поды в актуальном состоянии с самыми последними обновлениями образа. Прежде чем следовать этой статье, вы можете сначала запустить shell-скрипты, которые я использовал в одной из предыдущих статей, в разделе \"Первичная настройка\".\n\r\nВы можете ознакомиться со всеми моими предыдущими материалами из цикла статей про Podman здесь:\n\n\nБыстрое, простое и легко воспроизводимое создание контейнеров с помощью Podman и shell-скриптов\nКак использовать Podman для получения информации о ваших контейнерах\nКак Podman может извлечь внешний IP-адрес контейнера\n\nПроверяйте образы перед обновлением\r\nПеред обновлением любых образов важно понять, что именно изменилось в одной версии образа по сравнению с другой. Отслеживание этих изменений позволит вам понять их влияние на вашу инфраструктуру. В определённых сценариях может быть полезно использовать более глубокие инструменты проверки, такие как Skopeo, который позволяет проверить «удалённый образ, показывая его свойства, включая слои, без необходимости переносить образ на хост». Вы также можете проверить Dockerfile образа, чтобы получить информацию об обновлении. Однако только интерфейс командной строки (CLI) Podman может помочь вам собрать некоторую часть этой информации.\n\r\nВ этом примере показаны образы, которые я использовал с момента публикации первой статьи:\n\n$ podman image ls\nREPOSITORY               \tTAG     \tIMAGE ID  \tCREATED    \tSIZE\ndocker.io/library/wordpress  latest  \t054741915cf1  6 weeks ago\t629 MB\ndocker.io/library/mysql  \tlatest  \tbbf6571db497  6 weeks ago\t521 MB\ndocker.io/library/httpd  \tlatest  \tea28e1b82f31  6 weeks ago\t148 MB\nk8s.gcr.io/pause         \t3.5     \ted210e3e4a5b  10 months ago  690 kB\r\nДля этой демонстрации я буду использовать образ httpd. В колонке CREATED Podman сообщает, что образ с последней меткой был создан шесть недель назад. Чтобы проверить, что было сделано с этим образом при его создании, можно получить историю образа:\n\n$ podman image history httpd\nID        \tCREATED  \tCREATED BY                                 \tSIZE          \tCOMMENT\nea28e1b82f31  6 weeks ago  /bin/sh -c #(nop)  CMD [\"httpd-foreground\"]\t0 B\n<missing> \t6 weeks ago  /bin/sh -c #(nop)  EXPOSE 80               \t0 B  \n<missing> \t6 weeks ago  /bin/sh -c #(nop) COPY file:c432ff61c4993e...  3.58 kB\n<missing> \t6 weeks ago  /bin/sh -c #(nop)  STOPSIGNAL SIGWINCH     \t0 B          \t \n<missing> \t6 weeks ago  /bin/sh -c set -eux;                                         \tsavedAptMark=\"$(apt...  61 MB\n<missing> \t6 weeks ago  /bin/sh -c #(nop)  ENV HTTPD_PATCHES=      \t0 B\n<missing> \t6 weeks ago  /bin/sh -c #(nop)  ENV HTTPD_SHA256=20e01d...  0 B\n<missing> \t6 weeks ago  /bin/sh -c #(nop)  ENV HTTPD_VERSION=2.4.51\t0 B\n<missing> \t6 weeks ago  /bin/sh -c set -eux;                       \tapt-get update;   apt...  \t2.69 MB\n<missing> \t6 weeks ago  /bin/sh -c #(nop) WORKDIR /usr/local/apache2   0 B\n<missing> \t6 weeks ago  /bin/sh -c mkdir -p \"$HTTPD_PREFIX\"        \t&& ch...      \t3.07 kB\n<missing> \t6 weeks ago  /bin/sh -c #(nop)  ENV PATH=/usr/local/apa...  0 B\n<missing> \t6 weeks ago  /bin/sh -c #(nop)  ENV HTTPD_PREFIX=/usr/l...  0 B\n<missing> \t6 weeks ago  /bin/sh -c #(nop)  CMD [\"bash\"]            \t0 B  \n<missing> \t6 weeks ago  /bin/sh -c #(nop) ADD file:ece5ff85ca549f0...  83.9 MB\r\nОбратите внимание на переменную окружения HTTPD_VERSION=2.4.51. Чтобы получить более подробную информацию об этом образе, рассмотрим его с помощью подкоманды inspect. Вывод очень многословен, поэтому здесь я его сократил:\n\n$ podman image inspect httpd\n[\n\t{\n    \t\"Id\": \"ea28e1b82f314092abd3f90a69e57d6ccf506382821ee0b8d9b48c3e47440c1f\",\n    \t\"Digest\": \"sha256:fba8a9f4290180ceee5c74638bb85ff21fd15961e6fdfa4def48e18820512bb1\",\n    \t\"RepoTags\": [\n        \t\"docker.io/library/httpd:latest\"\n    \t],\n    \t\"RepoDigests\": [  \"docker.io/library/httpd@sha256:24d492e04f02881adcc1d7543b0251754a2be6a24c75aae7a008fdae767b7337\", \"docker.io/library/httpd@sha256:fba8a9f4290180ceee5c74638bb85ff21fd15961e6fdfa4def48e18820512bb1\"],\n    \t\"Parent\": \"\",\n    \t\"Comment\": \"\",\n    \t\"Created\": \"2021-12-02T10:03:55.933654778Z\",\n    \t\"Config\": {\n        \t\"ExposedPorts\": {\n            \t\"80/tcp\": {}\n        \t},\n        \t\"Env\": [\n            \t\"PATH=/usr/local/apache2/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\", \"HTTPD_PREFIX=/usr/local/apache2\", \"HTTPD_VERSION=2.4.51\",\n[…]\n    \t\"Version\": \"20.10.7\",\n    \t\"Author\": \"\",\n    \t\"Architecture\": \"amd64\",\n    \t\"Os\": \"linux\",\n    \t\"Size\": 147627312,\n    \t\"VirtualSize\": 147627312,\n    \t\"GraphDriver\": {\n        \t\"Name\": \"overlay\",\n        \t\"Data\": {\n            \t\"LowerDir\": \"/home/localuser/.local/share/containers/storage/overlay/e20054c1032fd3c5f8d8b35d8c75b806d8f813c90621b8304d543c7edf26b2f6/diff:/home/localuser/.local/share/containers/storage/overlay/1121e686efcde8973c70358a33725d8e9616f13eab864334568ee5aea0578295/diff:/home/localuser/.local/share/containers/storage/overlay/\n[...]\r\nДалее приступаем к обновлению образа.\n\nРучное обновление образов контейнеров\r\nЧтобы обновить образ, выполним ту же команду, которая используется для извлечения образа, podman pull. Её синтаксис следующий:\n\npodman pull [options] IMAGE [IMAGE...]\r\nЧтобы запустить определённую версию образа, установим нужный тег образа. В данной демонстрации я буду запускать последнюю версию для образа httpd, поэтому Podman извлечет самую новую версию httpd, используя тег latest.\n\r\nЕсли вы не укажете никакого тега, Podman по умолчанию извлечет образ, используя самый последний тег:\n\n$ podman pull docker.io/library/httpd:latest\nTrying to pull docker.io/library/httpd:latest...\nGetting image source signatures\n[...]\nCopying blob 67283bbdd4a0 done  \nCopying config dabbfbe0c5 done  \nWriting manifest to image destination\nStoring signatures\ndabbfbe0c57b6e5cd4bc089818d3f664acfad496dc741c9a501e72d15e803b34\r\nТеперь, когда вы снова проверите свои извлечённые образы, вы увидите, что образ httpd изменил свой ID, а в колонке CREATE указано, что он был создан «4 недели назад». Это означает, что новый извлечённый образ имеет двухнедельные отличия в обновлениях по сравнению с предыдущей версией:\n\n$ podman image ls\nREPOSITORY               \tTAG     \tIMAGE ID  \tCREATED    \tSIZE\ndocker.io/library/httpd  \tlatest  \tdabbfbe0c57b  4 weeks ago\t148 MB\ndocker.io/library/wordpress  latest  \t054741915cf1  6 weeks ago\t629 MB\ndocker.io/library/mysql  \tlatest  \tbbf6571db497  6 weeks ago\t521 MB\n<none>                   \t<none>  \tea28e1b82f31  6 weeks ago\t148 MB\nk8s.gcr.io/pause         \t3.5     \ted210e3e4a5b  10 months ago  690 kB\r\nНо что изменилось между одним образом и другим? Проверим историю образа, чтобы узнать это:\n\n$ podman image history httpd\nID        \tCREATED  \tCREATED BY                                 \tSIZE          \tCOMMENT\ndabbfbe0c57b  4 weeks ago  /bin/sh -c #(nop)  CMD [\"httpd-foreground\"]\t0 B\n<missing> \t4 weeks ago  /bin/sh -c #(nop)  EXPOSE 80               \t0 B    \n<missing> \t4 weeks ago  /bin/sh -c #(nop) COPY file:c432ff61c4993e...  3.58 kB\n<missing> \t4 weeks ago  /bin/sh -c #(nop)  STOPSIGNAL SIGWINCH     \t0 B\n<missing> \t4 weeks ago  /bin/sh -c set -eux;                                         \tsavedAptMark=\"$(apt...  61.1 MB\n[...]\n<missing> \t4 weeks ago  /bin/sh -c #(nop)  ENV HTTPD_PREFIX=/usr/l...  0 B\n<missing> \t4 weeks ago  /bin/sh -c #(nop)  CMD [\"bash\"]            \t0 B\n<missing> \t4 weeks ago  /bin/sh -c #(nop) ADD file:09675d11695f65c...  83.9 MB\r\nПомните переменную окружения HTTPD_VERSION=2.4.51, на которую я просил вас обратить внимание? Вы можете видеть, что она была изменена в этом обновлённом образе на HTTPD_VERSION=2.4.52, что означает, что между версиями был обновлён Apache.\n\r\nНо этот обновлённый образ не используется ни одним запущенным контейнером. Что произойдёт, если я обновлю образ уже запущенного контейнера? Проверим это.\n\nРучное применение обновлений образа к работающему контейнеру\r\nЯ буду использовать тот же образ httpd, взятый из реестра docker.io, что и выше. Я запущу его как контейнер rootfull, чтобы снова использовать старый образ, так как раньше я использовал его для пользователя root. Вот старый извлечённый образ:\n\n$ sudo  podman image ls\nREPOSITORY                         \tTAG     \tIMAGE ID  \tCREATED    \tSIZE\ndocker.io/library/wordpress        \tlatest  \t054741915cf1  6 weeks ago\t629 MB\ndocker.io/library/mysql            \tlatest  \tbbf6571db497  6 weeks ago\t521 MB\ndocker.io/library/httpd            \tlatest  \tea28e1b82f31  6 weeks ago\t148 MB\nregistry.access.redhat.com/ubi8/pause  latest  \t20b34168e325  2 months ago   3.49 MB\nk8s.gcr.io/pause                   \t3.5     \ted210e3e4a5b  10 months ago  690 kB\r\nВот запущенный контейнер rootfull, использующий старый образ:\n\n$ sudo podman ps\nCONTAINER ID  IMAGE                       \tCOMMAND       \tCREATED\tSTATUS        \tPORTS             \tNAMES\nb85600da6d86  docker.io/library/httpd:latest  httpd-foreground  4 min ago  Up 3 minutes ago  0.0.0.0:8081->80/tcp  httpd\r\nПростой curl к запущенному веб-серверу контейнера показывает версию Apache, предоставленную этим образом:\n\n$ sudo curl -v http://localhost:8081\n*   Trying 127.0.0.1:8081...\n* Connected to localhost (127.0.0.1) port 8081 (#0)\n> GET / HTTP/1.1\n> Host: localhost:8081\n> User-Agent: curl/7.79.1\n> Accept: */*\n>\n* Mark bundle as not supporting multiuse\n< HTTP/1.1 200 OK\n< Date: Tue, 18 Jan 2022 18:00:14 GMT\n< Server: Apache/2.4.51 (Unix)\n< Last-Modified: Tue, 07 Dec 2021 21:29:58 GMT\n< ETag: \"74-5d295133b0ae6\"\n< Accept-Ranges: bytes\n< Content-Length: 116\n< Content-Type: text/html\n<\n<html>\n  <header>\n\t<title>Enable SysAdmin</title>\n  </header>\n  <body>\n\t<p>Hello World!</p>\n  </body>\n</html>\n* Connection #0 to host localhost left intact\r\nСервер: Apache/2.4.51 (Unix) показывает ту же версию, что и в переменной окружения HTTPD_VERSION=2.4.51 для этого образа, подтверждая, что он всё ещё работает со старым образом. Я ещё раз проверю последнюю версию образа, пока контейнер работает:\n\n$ sudo podman pull docker.io/library/httpd:latest\nTrying to pull docker.io/library/httpd:latest...\nGetting image source signatures\nCopying blob 41c22baa66ec done  \n[...]\nCopying blob d982c879c57e done  \nCopying config dabbfbe0c5 done  \nWriting manifest to image destination\nStoring signatures\ndabbfbe0c57b6e5cd4bc089818d3f664acfad496dc741c9a501e72d15e803b34\r\nВ колонке UP видно, что контейнер не остановился ни на один момент, что хорошо, потому что веб-сервер продолжил обеспечивать работу своих служб:\n\n$ sudo podman ps\nCONTAINER ID  IMAGE                       \tCOMMAND       \tCREATED    \tSTATUS        \tPORTS             \tNAMES\nb85600da6d86  docker.io/library/httpd:latest  httpd-foreground  4 minutes ago  Up 4 minutes ago  0.0.0.0:8081->80/tcp  httpd\r\nПроверяем, что образ httpd был обновлён, изменил свой IMAGE ID и показывает в колонке CREATED, что он был создан «4 недели назад». Это означает, что теперь у меня самая последняя версия образа:\n\n$ sudo podman image ls\nREPOSITORY                         \tTAG     \tIMAGE ID  \tCREATED    \tSIZE\ndocker.io/library/httpd            \tlatest  \tdabbfbe0c57b  4 weeks ago\t148 MB\ndocker.io/library/wordpress        \tlatest  \t054741915cf1  6 weeks ago\t629 MB\ndocker.io/library/mysql            \tlatest  \tbbf6571db497  6 weeks ago\t521 MB\n<none>                             \t<none>  \tea28e1b82f31  6 weeks ago\t148 MB\nregistry.access.redhat.com/ubi8/pause  latest  \t20b34168e325  2 months ago   3.49 MB\nk8s.gcr.io/pause                   \t3.5     \ted210e3e4a5b  10 months ago  690 kB\r\nНо когда я снова запускаю простой curl относительно запущенного контейнера, я вижу, что версия Apache не изменилась вообще:\n\n$ sudo curl -v http://localhost:8081\n*   Trying 127.0.0.1:8081...\n* Connected to localhost (127.0.0.1) port 8081 (#0)\n> GET / HTTP/1.1\n> Host: localhost:8081\n> User-Agent: curl/7.79.1\n> Accept: */*\n>\n* Mark bundle as not supporting multiuse\n< HTTP/1.1 200 OK\n< Date: Tue, 18 Jan 2022 18:04:12 GMT\n< Server: Apache/2.4.51 (Unix)\n< Last-Modified: Tue, 07 Dec 2021 21:29:58 GMT\n< ETag: \"74-5d295133b0ae6\"\n< Accept-Ranges: bytes\n< Content-Length: 116\n< Content-Type: text/html\n<\n<html>\n  <header>\n\t<title>Enable SysAdmin</title>\n  </header>\n  <body>\n\t<p>Hello World!</p>\n  </body>\n</html>\n* Connection #0 to host localhost left intact\r\nПри рассмотрении запущенного контейнера httpd можно увидеть, что он всё ещё отображает переменную окружения HTTPD_VERSION=2.4.51, что объясняет, почему он продолжает использовать версию Apache 2.4.51:\n\n$ sudo podman inspect httpd --format \"{{.Image}} {{.ImageName}} {{.Config.Env}}\"\nea28e1b82f314092abd3f90a69e57d6ccf506382821ee0b8d9b48c3e47440c1f docker.io/library/httpd:latest [PATH=/usr/local/apache2/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin TERM=xterm container=podman HTTPD_PREFIX=/usr/local/apache2 HTTPD_VERSION=2.4.51 HTTPD_SHA256=20e01d81fecf077690a4439e3969a9b22a09a8d43c525356e863407741b838f4 HTTPD_PATCHES= HOME=/root HOSTNAME=b85600da6d86]\r\nЭто происходит потому, что простое извлечение и обновление образов контейнеров не приводит к автоматическому обновлению запущенных контейнеров, использующих эти образы. Для этого требуется отдельная операция. Чтобы вручную заставить запущенный контейнер использовать обновлённый образ, остановите контейнер и запустите его снова. Я создал сценарий create_web.sh в этом примере в первой статье этого цикла:\n\n$ sudo podman stop httpd\nhttpd\n\n$ sudo podman rm -a\nb85600da6d86cdd9cce0edf782025718de4e3fa9c3203005c579418ec9c99737\n\n$ sudo ./create_web.sh\n7b932bbe6367b2af96d2d7e4dc059d56873737d1e4b1c343912e10574f6ce8cc\r\nТеперь контейнер снова запущен, и он использует обновлённый образ:\n\n$ sudo podman ps\nCONTAINER ID  IMAGE                       \tCOMMAND       \tCREATED    \tSTATUS        \tPORTS             \tNAMES\n7b932bbe6367  docker.io/library/httpd:latest  httpd-foreground  5 seconds ago  Up 4 seconds ago  0.0.0.0:8081->80/tcp  httpd\r\nЧтобы убедиться в этом, проверяем только что запущенный контейнер на наличие переменной окружения HTTPD_VERSION:\n\n$ sudo podman inspect httpd --format \"{{.Image}} {{.ImageName}} {{.Config.Env}}\"\ndabbfbe0c57b6e5cd4bc089818d3f664acfad496dc741c9a501e72d15e803b34 docker.io/library/httpd:latest [PATH=/usr/local/apache2/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin TERM=xterm container=podman HTTPD_VERSION=2.4.52 HTTPD_SHA256=0127f7dc497e9983e9c51474bed75e45607f2f870a7675a86dc90af6d572f5c9 HTTPD_PATCHES= HTTPD_PREFIX=/usr/local/apache2 HOME=/root HOSTNAME=7b932bbe6367]\r\nДжекпот! Теперь контейнер работает с переменной окружения HTTPD_VERSION=2.4.52, что означает, что Apache должен работать с этой версией. Я проверю это, запустив curl снова:\n\n$ sudo curl -v http://localhost:8081\n*   Trying 127.0.0.1:8081...\n* Connected to localhost (127.0.0.1) port 8081 (#0)\n> GET / HTTP/1.1\n> Host: localhost:8081\n> User-Agent: curl/7.79.1\n> Accept: */*\n>\n* Mark bundle as not supporting multiuse\n< HTTP/1.1 200 OK\n< Date: Tue, 18 Jan 2022 18:23:04 GMT\n< Server: Apache/2.4.52 (Unix)\n< Last-Modified: Tue, 07 Dec 2021 21:29:58 GMT\n< ETag: \"74-5d295133b0ae6\"\n< Accept-Ranges: bytes\n< Content-Length: 116\n< Content-Type: text/html\n<\n<html>\n  <header>\n\t<title>Enable SysAdmin</title>\n  </header>\n  <body>\n\t<p>Hello World!</p>\n  </body>\n</html>\n* Connection #0 to host localhost left intact\r\nКак показывает поле Server: Apache/2.4.52 (Unix), контейнер наконец-то обновлён и работает с последней версией образа httpd. Вот и весь процесс быстрого обновления образа вручную.\n\r\nВы можете сказать: «Это, конечно, хорошо, но чревато ошибками. Может быть, есть какой-нибудь автоматический способ всё это запустить?». Конечно, есть! И для этого я рекомендую две отличные статьи от членов сообщества «Извлечение образов podman из репозитория контейнера» и «Как использовать автообновление и восстановление в Podman».\n\nПоддерживайте актуальность\r\nПоддерживать образы контейнеров в актуальном состоянии необходимо для работы и управления контейнерной средой. Такой подход даёт несколько главных преимуществ:\n\n\nЭто позволяет вашим приложениям иметь последние версии определённых пакетов и инструментов.\nЭто также гарантирует, что вы сможете вносить необходимые изменения в приложение на уровне образа.\nЭто повышает безопасность вашей инфраструктуры, поскольку образы всегда будут содержать самые последние исправления безопасности и багфиксы.\n\nНЛО прилетело и оставило здесь промокоды для читателей нашего блога:\n\r\n — 15% на все тарифы VDS (кроме тарифа Прогрев) — HABRFIRSTVDS.\n\r\n —  20% на выделенные серверы AMD Ryzen и Intel Core — HABRFIRSTDEDIC. "
]