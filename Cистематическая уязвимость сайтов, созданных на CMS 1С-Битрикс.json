[
   "Cистематическая уязвимость сайтов, созданных на CMS 1С-Битрикс",
   "Написать о систематических уязвимостях сайтов, созданных на коммерческих CMS, подтолкнул пост, в котором были описаны риски взлома «защищенных» CMS. \n\r\nВ этой статье основное внимание уделяется компрометации ресурсов по причине «человеческого фактора», а тема эксплуатации уязвимостей сайтов и веб-атак была обойдена предположением существования «неуязвимых» CMS. Предположение о существовании «неуязвимых» CMS, возможно, имеет право на существование, как пример, безопасность готового интернет-магазина «из коробки» на CMS 1C-Битрикс очень высока, и найти более-менее серьезные уязвимости кода «коробочной версии» вряд ли удастся. \n\r\nДругое дело безопасность конечного продукта, созданного на такой CMS, и самое главное, систематика проявления уязвимостей высокого уровня угроз у этих сайтов. Исходя из нашей практики по обеспечению безопасности сайтов (компания InSafety), а также статистики, которую мы собираем по уязвимостям платформ (CMS), не менее чем у пятидесяти процентов сайтов, созданных на платформе 1С-Битрикс c личными кабинетами пользователей, существует возможность эксплуатации хранимых XSS-атак. \n\nПлатформа: CMS 1C-Битрикс 15.0 и выше\nУгроза безопасности: хранимая XSS-атака \nСистематика: не менее 50% сайтов с личными кабинетами пользователей\r\nУязвимость кода, позволяющая эксплуатацию XSS атаки, заключается в недостаточной фильтрации данных полей формы регистрационной информации личного кабинета пользователя ресурса, которые передаются в БД.\n\nПример\n\r\nРазработчик сохраняет данные, например, имя пользователя из $_REQUEST, через API Битрикса, то они не фильтруются полностью, и тэги сохраняются. Например, передаем строку в поле формы «имя» ЛК пользователя сайта:\n\ntest\"><a href='#'><img src='http://insafety.org/img/xss2.jpg'/></a><p\n\r\nДанные передаются через обычный input в $_POST['name'] и далее в $USER->Update, например, так:\n\n$USER->Update($USER->GetID(),array(\n'NAME' => $_POST['name'],\n));\r\nHTML-код не будет санирован и будет запомнен в имени пользователя «как есть». Скриншот админки сайта:\n\n\r\nРезультат:\n\n\n\nЭтот пример наглядно демонстрирует наличие угрозы безопасности\n\r\nВ предложенной демонстрации существовании угрозы, было показано внедрение HTML кода, а не JS, что предполагает типовая XSS-атака. Это обусловлено тем, что у большинстве сайтов, разработанных на CMS 1C-Битрикс, попытку внедрения JS-кода заблокирует фильтр проактивной защиты.\n\r\nВнедрение большинства синтаксических тегов HTML кода, проактивной защитой CMS 1C-Битрикс не фильтруется. Такая демонстрация обнаружения уязвимости кода абсолютно безопасна и наглядна. В случае, когда фильтр проактивной защиты 1С-Битрикс по какой-то причине отключен, вышеописанная уязвимость кода позволяет эксплуатировать хранимые XSS-атаки в «классической» реализации.\n\r\nУровень угрозы безопасности для сайта от внедрения любого (будь то JS или HTML) несанкционированного кода, как и его вывода без должной фильтрации, крайне высок.\n\nПо понятным причинам, в этой статье не предлагаются варианты реальной эксплуатации атаки, как с включенным, так и с отключенным фильтром проактивной защиты.\n\nЗащита от XSS-атаки\r\nЗащитить свой сайт от возможности эксплуатации XSS атаки достаточно просто. Для этого следует фильтровать входные и выходные данные путем экранирования символов и преобразования спецсимволов в HTML-сущности. В php это можно сделать с помощью функций htmlspecialchars(), htmlentities(), strip_tags(). \n\nПример:\n\n$name = strip_tags($_POST['name']);\n$name = htmlentities($_POST['name'], ENT_QUOTES, \"UTF-8\");\n$name = htmlspecialchars($_POST['name'], ENT_QUOTES);\r\nКроме этого следует явно указывать кодировку страниц сайта:\n\nHeader(\"Content-Type: text/html; charset=utf-8\");\r\nСпособов защиты от XSS атак множество, к примеру, существуют варианты запрета на передачу кавычек и скобок (фильтрация данных по черному списку) на уровне конфигурации веб-сервера.\n\r\nПример для NGINX: (запись в конфигурационный файл)\n\nlocation / {\n\tif ($args ~* '^.*(<|>|\").*'){\n\treturn 403; \n\t}\n\tif ($args ~* '^.*(%3C|%3E|%22).*'){\n\treturn 403;\n\t}\n}\r\nДля веб-сервера Apache это будет запись в файл .htaccess:\n\nRewriteEngine on\nRewriteCond %{HTTP_USER_AGENT} (<|>|\"|%3C|%3E|%22) [NC,OR]\nRewriteRule ^{правило} \r\nФильтрация данных по черному списку применима далеко не для всех сайтов. Применять такой способ защиты от атак, следует с большой осторожностью, так как можно заблокировать легальные запросы.\n\nЗаключение\r\nВышеозначенная угроза безопасности на веб-приложения, является наиболее популярной и известной атакой. Про XSS атаки и защиту от них, написано тысячи статей и публикаций.\n\r\nВ практике нашей компании уязвимость к XSS атакам личных кабинетов пользователей была обнаружена осенью 2015 года. Весною 2016 года наша статистика уязвимых сайтов на CMS 1С-Битрикс явно указывала на наличие возможности эксплуатации атаки у более 50% процентов исследуемых сайтов. В апреле 2016 года, понимая, что уязвимость кода в этом разделе носит системный характер, мы передали всю информацию по угрозе безопасности в компанию Битрикс. Сотрудники компании Битрикс приняли информацию, сообщив в обратной связи, что приняли меры, исправив документацию к системе. Несмотря на принятые меры, вышеописанная угроза безопасности для сайтов на 1С-Битрикс остаётся крайне актуальной на сегодняшний день.\n\r\nНадеюсь, что эта информация будет полезной для разработчиков и владельцев сайтов, созданных на платформе 1C-Битрикс.\n\nНужно понимать, что эксперименты с безопасностью чужих сайтов, не говоря о эксплуатации атаки в криминальных целях, может повлечь уголовную ответственность. Вся информация по угрозе безопасности сайтов, в этом посте, предоставлена с целью повышения общего уровня ИБ конечных продуктов на платформе 1C-Битрикс. "
]