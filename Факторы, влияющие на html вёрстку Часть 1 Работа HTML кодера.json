[
   "Факторы, влияющие на html вёрстку (Часть 1: Работа HTML кодера)",
   "Для кого эта статья?\nHtml кодерам – начинающим кодерам поможет повысить \r\nсвой профессиональный уровень; оценить текущую ситуацию \r\nв проектах, предупредить негативное течение проекта.Тем, кто \r\nещё только определяется «быть или не быть» больше вкурить \r\nо профессии html кодер. Те же, кто в кодинге давно врятле \r\nнайдут в статье что-то новое для себя, а некоторые вещи \r\nдаже могут показаться не достойными внимания. Однако стоит \r\nпомнить, что очевидные вещи для одного — это неизвестный \r\nмир для другого, а ваш опыт хорошей практики может быть \r\nвыходом из сложной сложившейся ситуации для кого-то.\nРуководству – узнать, какие мероприятия стоит провести \r\nв компании для улучшения рабочего процесса, повышения \r\nопыта работников, уменьшения издержек (за счёт уменьшения \r\nперерасхода проектного времени и учёта не просчитанных \r\nранее активностей) и повышения качества.\nРуководителям проектов (Project managers) – поможет \r\nучесть некоторые специфические риски проекта: узнать о \r\nнеизвестных ранее поглотителях проектного времени и не \r\nзапланированных активностях; узнать о реальных трудозатратах \r\nпо некоторым активностям; оценить и улучшить текущий уровень \r\nведения проектов. \nДругим участникам web разработок  – поможет больше \r\nузнать о трудовых буднях своих коллег. \n \r\nИзначально статья была в табличном виде, что соответствовало \r\nсемантике материала. Однако опубликовав статью в ЖЖ и \r\nполучив ряд не только бесценных комментариве (аля «неасилил»,«многа \r\nбукафф» ), но и практический совет переделать материал \r\nбез таблиц решил ему последовать. Работа над ошибками \r\nпроделана — статья приведена в блогоподобный (какие слова \r\nпорождает наше время) вид и выставлена на обозрение хабрасообществу.\r\nСгруппированные факторы\n\nРабота HTML кодера\n1. Исходные данные и материал для вёрстки.\n1.1 Вёрстка дизайна\nХудший вариант:\r\nКлиент присылает некачественный материал для вёрстки. \r\nМатериал в форматах pdf, ppt, jpg либо psd со склеенными \r\nслоями, растеризованными шрифтами, шрифтами со сглаживаниями; \r\nшрифтами, не входящими в поставку Windows. Требования \r\nописаны словесно («сделайте красным», «сделайте, как здесь»).\nХорошая практика:\r\nМатериал для вёрстки должен быть в формате PSD (не исключён \r\nдругой популярный формат, поддерживающий слои). В PSD \r\nиспользуемые слои названы соответственно своему содержимому. \r\nШрифты, не входящие в стандартную поставку Windows, используются \r\nтолько для картинок.\nВлияние:\r\nСклеенные слои, растеризованный текст и другие не соблюдённые требования к исходному материалу приводят к увеличению времени вёрстки.\n\nПример: в дизайне используется кнопка в виде картинки. Необходимо сделать похожую по аналогии. При дизайне, каким он должен быть, это займёт около 10 минут. При плохом качестве может занять и 2 часа.\n\nДействия:\n1. PM: На этапе выяснения требований дать клиенту \r\nознакомиться с документом по требованиям к графическому \r\nматериалу. (Содержащему примеры требований. Желательно \r\nсо скриншотами и пояснениями к каждому пункту). \n2. PM: Вовлечь клиента в процесс контроля за соблюдением \r\nтребований при приёмке у сторонних дизайнеров. Объяснить, \r\nчто качество графического материала, прежде всего, влияет \r\nна чувство доверия и отношения его будущих клиентов (пользователей) \r\nсайта, а также на качество работы html кодера. (Важно \r\nразличать качественный дизайн и красивый дизайн: это не \r\nтождественные вещи).\n1.2 Редизайн\nХудший вариант:\r\nКлиент присылает или сообщает ссылки (что ещё хуже) на \r\nстраницы со свёрстанным дизайном плохого качества (без \r\nтиповых элементов, содержащим проблемы кроссбраузерности, \r\nневалидный код).\nХорошая практика:\r\nКлиент присылает свёрстанный код. HTML кодер, PM и другие \r\nучастники проверяют его качество и наличие необходимых \r\nэлементов.\nВлияние:\r\nЕсли факт плохого качества страниц не озвучен перед клиентом \r\nили PM’ом, то за все вытекающие баги ответственность перекладывается \r\nна HTML кодера. Тем самым увеличивается время незапланированного \r\nфиксинга багов.\r\nВ случае со страницами, расположенными в Интернете, прежде \r\nчем приступить к вёрстке, кодеру необходим этап переподготовки \r\nдля создания сайта локально. Это время следует учесть \r\nпри оценке.\nПример: Чтобы воссоздать локально сайт, где все \r\nкартинки прописаны в CSS, верстальщику надо отследить \r\nпуть каждой, прописать его в адресной строке, чтобы скопировать \r\nкаждую картинку на локальный диск. Количество прописанных \r\nв CSS картинок не ограничено.\nДействия:\n1. PM: На этапе выяснения требования подчеркнуть \r\nважность качества входящего материала и последствия плохого: \r\nтехнические (баги, перерасход проектного времени, плохая \r\nрасширяемость) и негативное влияние на чувство доверия \r\nи отношение будущих клиентов (пользователей).\n2. PM: Просить клиента прислать свёрстанный код \r\nвместо публикации на сайте (если нет FTP доступа). Это \r\nпозволяет HTML кодеру сразу же работать с кодом «как есть», \r\nне занимаясь переподготовкой. Важно отметить, что это \r\nещё и позволяет предотвратить тихое добавление клиентом \r\nновых элементов под видом того же плана работ.\n3. HTML кодер: Известить PM’а о возможных проблемах, \r\nошибках и качестве материала. Написать, каких элементов \r\nне достаёт в новом дизайне. Попросить провести сравнительный \r\nанализ нового и старого дизайна (выяснить, что меняется, \r\nчто добавляется, что убирается и т. д.).\n2. Требования к вёрстке (DIV, table, смешанная).\n2.1 Вёрстка на дивах \nХудший вариант:\r\nПроекты с требованием блочной вёрстки (семантическая вёрстка \r\nс использованием DIV) выполняются кодерами, не имеющими \r\nнеобходимого опыта, или используется блочная вёрстка там, \r\nгде она не обоснована.\nХорошая практика:\r\nБлочную вёрстку стоит применять в тех местах, где это \r\nприменение обосновано (субъективное мнение), если:\r\n — необходимо соблюдение стандартов;\r\n — это единственно-возможный способ реализации;\r\n — это требования клиента или платформы;\r\n — это способ уменьшить количество багов у web-developer’oв \r\nпри работе с HTML кодом;\r\n — необходимо упростить места соприкосновения клиента с \r\nкодом\r\nУмение «верстать на дивах» (и править достаточное количество \r\nнетривиальных багов) требует наличия подобного опыта у \r\nHTML кодера.\r\nМенее изящная, но стабильная табличная вёрстка покрывает \r\nосновные запросы к вёрстке в 80% типовых задач.\r\nСмешанная вёрстка — компромисс и способ вобрать лучшее \r\nиз двух вариантов.\nВлияние:\r\nБлочная вёрстка привносит вероятность несуществующих при \r\nтабличной вёрстке багов, таких как:\r\n — неправильный рендер браузером;\r\n — неправильное или непредсказуемое поведение вёрстки при \r\nизменении размера окна, шрифта, размера текста и т.д.;\r\n — сложные баги кроссбраузерности.\r\nПодобные баги исправляются достаточно сложно, часто с использованием \r\nхаков и незадокументированных возможностей. Решения не \r\nвсегда кроссбраузерны, расширяемы и надёжны.\nДействия:\n1. PM и HTML кодер: В начале проекта обсудить вопросы, \r\nкасающиеся типа вёрстки.\n2 PM и HTML кодер: Воспользоваться консультантом, \r\nпопросить консультации у коллег.\n2.2 Требуется табличная вёрстка, а исходный материал на \r\nблочной\nХудший вариант:\r\nДля редизайна проектов, которые были на табличной вёрстке \r\nклиент предоставил версию, полностью выполненную в DIV \r\nвёрстке.\nХорошая практика:\r\nЕсли предоставленный заказчиком материал выполнен на DIVах, \r\nа существующая реализация — на таблицах, то необходимо \r\nиспользовать смешанную вёрстку, а также учесть возможные \r\nпроблемы адаптации при временной оценке.\nВлияние:\r\nЕсли тип вёрстки не совпадает то, надо понимать, что переделывание \r\nна новый тип — это уже не редизайн, а фактически создание \r\nвсего оформления с нуля, что в реальности приведёт к огромному \r\nколичеству багов, несоответствий и непредвиденных ситуаций. \n\r\nТот же результат (создание практически с нуля, а не переделка), \r\nесли заказчик прислал вёрстку не подходящую для используемой \r\nплатформы.\nДействия:\n1. HTML кодер: Использовать смешанную вёрстку (процесса \r\nадаптации и багов на стыках двух типов не избежать, однако \r\nэто минимизирует расход времени в сравнении с созданием \r\nс нуля).\n2. PM: Понимать и учитывать при оценке, что в подобной \r\nситуации дизайн не берётся как есть. Конечный результат \r\nпредставляет собой симбиоз прошлого решения и клиентского \r\nварианта. Любое нововведение чревато багами, множащимися \r\nв геометрической прогрессии.\n3. Знание проекта (структуры папок, элементов, генерирующих \r\nдизайн).\nХудший вариант:\r\nHTML кодер не знает проект.\nХорошая практика:\r\nHTML кодер знает проект.\nВлияние:\r\nНезнание проекта приводит к тому, что на разбирательство \r\nс особенностями реализации системы тратится время, выделенное \r\nна выполнение самого задания. Следующая статья значительной \r\nтраты времени – баги и недоделки, произошедшие из-за незнания \r\nсистемы (неучтённые страницы, разное отображение при разных \r\nусловиях и т.д.). \nДействия:\n1. Рабочий процесс: Изучение используемых платформ \r\nв свободное от проектов время. Таск на ознакомление с \r\nсистемой перед началом проекта. Проведение обязательной \r\nаттестации на знание системы.\n2. Рабочий процесс: Использовать в проекте консультанта \r\nс таском «Консультирование» (кроме этого таска он в проекте \r\nможет не участвовать).\n3. PM и HTML кодер: Воспользоваться консультантом, \r\nпопросить консультации у коллег.\n4. Степень зависимости от программно- аппаратной части.\nХудший вариант:\r\nВысокая зависимость от программно- аппаратной части.\nХорошая практика:\r\nАвтономная, параллельная работа.\nВлияние:\r\nПримеры зависимостей, которые отражаются на времени:\r\n — зависимость от аппаратной части ПК (Photoshop (несколько \r\nодновременно открытых PSD), Dreamweaver (2-3 окна), TopStyle \r\n(2-3 открытых файла), проводник (или коммандер), 2-3 открытых \r\nбраузера (FireFox, IE, Opera) и иногда программа для работы \r\nc PHP – вот вполне типовой пример рабочий области).\r\n — зависимость от аппаратной части и интернетHTML кодеру \r\nв работе требуется видеть моментальный результат своих \r\nдействий, т.к. иногда вёрстка строится на предположении \r\nи результатах того, как ведёт себя дизайн в определенных \r\nизменяющихся условиях. Время ожидания результата иногда \r\nпревышает время на его создание. Когда, даже чтобы увидеть \r\nрезультат самых небольших изменений, необходимо дождаться \r\nдолгой перегрузки всей страницы (а перезагружает страницу \r\nкодер за проект достаточно много раз). \r\n — зависимость от действий программиста и программ, связанных \r\nс рабочим процессом. Несмотря на то, что SVN (и другие \r\nсистемы контроля версий) призвана не только сохранить \r\nкод, но и распараллелить разработку, временами приходится \r\nвместо разработки возиться с обновлением SVN и восстановлением \r\nработоспособности своего хоста после обновления. Это связано \r\nс тем, что параллельный разработчик меняет что-то радикальное, \r\nскрывает или добавляет часть функциональности влияющей \r\nи на работу HTML кодера.\nДействия:\n1. Рабочий процесс (проектная команда): Обсудить \r\nвлияние друг на друга и исходя из этого предложить порядок \r\nтасков.\n2. Рабочий процесс: Приемлемые мощности ПК и скорость \r\nинтернет.\n5. Стадия вступления в проект.\nХудший вариант:\r\nКодер вступает в проект, когда ещё не готова часть ключевой \r\nфункциональности или часть, влияющая на визуальное отображение. \r\nВозможны вмешательство или доработки в уже проработанных \r\nстраницах. Остались не выясненными до конца части сайта.\nХорошая практика:\r\nПроект проходит таким образом, что кодер и девелопер работают \r\nлибо параллельно, либо кодер после девелопера.\nВлияние:\r\nРегрессии необоснованно забирают время, которое не может \r\nбыть просчитано в начале.\nДействия:\n1. Рабочий процесс (проектная команда): Обсудить \r\nвлияние друг на друга и исходя из этого предложить порядок \r\nтасков.\n2. Рабочий процесс: Эффективные коммуникации по \r\nходу проекта позволяют избежать регрессий или снизить \r\nих количество, избежать багов.\n3. PM: Контролирует проект на промежуточных стадиях. \r\nОтсутствие контроля со стороны PM в ходе проекта выльется \r\nв регрессии, переделку и аврал в конце. Если в начале \r\nидёт девелопмент, потом кодинг и натяжка, то перед натяжкой \r\nследует проверить результаты девелопмента на соответствие \r\nтребованиям спецификации и своим представлениям. Как показала \r\nпрактика, отсутствие этого приводит к следующим ситуациям:\r\n — время на девелопмент израсходовано, и нет возможности \r\nпривлечь ресурс для доработки. Приходится отвлекать занятых \r\nна другом проекте людей.\r\n — нормальный процесс HTML кодинга нарушается. Из-за недоработок \r\nприходиться переделывать и доделывать куски проекта, по \r\nкоторым, как казалось, работа завершена.\r\n — авральная работа, перерасход рабочего времени, баги.\n6. Коммуникации и выяснение возникающих вопросов по ходу \r\nпроекта с участниками проекта.\nХудший вариант:\r\nКоммуникации затруднены (между клиентом и PM или участниками \r\nкоманды).\nХорошая практика:\r\nС коммуникациями никаких проблем.\nВлияние:\r\nЗатруднение обсуждения оперативных вопросов ведёт к неоднозначному \r\nпониманию требований. Если у вас был вопрос, который вы \r\nрешили самостоятельно, и его решение не совпало с видением \r\nклиента, то это приведёт к переделке => потери проектного \r\nвремени.\r\nВнутрикомандные коммуникации тоже влияют на процесс. Например, \r\nиспользование IM при обсуждении оперативных вопросов часто \r\nзамедляет общение, т. к. некоторые вещи достаточно тяжело \r\nи долго объяснять, и также приходиться делать это сразу \r\nс несколькими людьми в нескольких окнах.\nДействия:\n1. Рабочий процесс: Один из неявных примеров улучшения \r\nкоммуникаций — словарь рабочего сленга в Wiki. Новый сотрудник \r\nбез труда может прочитать и понять используемые слова \r\nиз лексикона коллег. Участники проектной команды должны \r\nпроявлять инициативу в улучшении коммуникаций (использовать \r\nкак логические инструменты, так и технические средства).\n2. Рабочий процесс: Для проектной группы лучше использовать \r\nобщий чат, где все участники проекта будут в курсе обсуждения \r\nпроекта.\n7. Условия и ограничения используемой платформы или проекта. \n\nХудший вариант:\r\nПроектная команда не знает требований системы или работы \r\nкомпонентов, отвечающих за дизайн. Приходится переделывать \r\nпод вновь узнанные требования.\nХорошая практика:\r\nВёрстка учитывает требования системы при натяжке.\nВлияние:\r\nПоявляющиеся новые требования в виде ограничений и условий \r\nсистемы приводят к переделкам и адаптации, что влечёт \r\nтрату незапланированного времени.\nПример 1: Не всегда есть возможность скачать текущую \r\nверсию сайта клиента, поэтому для работы локально приходиться \r\nвырывать какие-то части и ставить их на локал. Ещё чаще \r\nприходится делать сначала локально, потом после проверки \r\nпроделывать те же действия на клиенте. Незапланированное \r\nвремя — это повтор тех же действий на клиенте и время, \r\nпотраченное на устранение разницы (закачка/скачка на/с \r\nклиента).\nПример 2: Open Source сильно подвержен ограничениям \r\nи условиям. Так в системе OsCommerce содержание категории \r\nтоваров генерируется жёстко в коде, что может повлечь \r\nне только переделку HTML, но даже переделку PHP.\nДействия:\n1. Рабочий процесс (проектная команда): Обсудить \r\nузкие места, изучить систему до старта проекта.\n2. PM и HTML кодер: Воспользоваться консультантом, \r\nпопросить консультации у коллег.\n3. Рабочий процесс: Конспектировать решение проблем \r\nили сами проблемы в Wiki, создавая базу знаний.\n8. Квалификация и опыт. Способность идентифицировать проблему, \r\nрешить и «законспектировать».\nХудший вариант:\r\nHTML кодер использует нестабильные решения, не заинтересован \r\nв улучшении качества работы, безразличен ктенденциям и \r\nтехникам.\nХорошая практика:\r\nHTML кодер совершенствует технику, интересуется тенденциями. \r\nЗнакомится с чужим опытом и создаёт собственные наработки.\nВлияние:\r\nОпытный специалист — ключ к решению любой задачи.\nДействия:\n1. Рабочий процесс: Популяризировать пользу базы \r\nзнаний. Культивировать и централизировать материал. Освещать \r\nи доводить до сведения, вовлекать.\n2. HTML кодер: Использовать прочтённое на практике, \r\nне боятся экспериментировать, наблюдать результат. Знакомиться \r\nи изучать смежные области знаний, накапливать и синтезировать \r\nзнания. Предлагать внедрение обкатанных и обдуманных вариантов.\n3. HTML кодер: 70% проблем с которыми сталкиваешься \r\nв процессе работы уже решал кто-то. Задокументированное \r\nрешение позволит не только не вспоминать судорожно, как \r\nэто решалось в прошлый раз, но и избавить от таких мыслей \r\nколлег.\r\nПродолжение следует… \r\nИсточник: Блог о web-разработке \r\nи способах её улучшения  "
]